From a command prompt and the directory you would like to create your new project in:

1.) Create a dotnet webapi project
	dotnet new webapi -o GrowthWare.Web.Angular
2.) Add the SPA middleware
	cd GrowthWare.Web.Angular
	dotnet add package Microsoft.AspNetCore.SpaProxy
	dotnet restore
3.) Create an angular workspace, application and library
  ng analytics disable --global true
  ng new Angular --create-application=false --skip-install
  cd Angular
  ng generate application gw-frontend --prefix gw-frontend --ssr false --style "scss" --skip-install
  ng generate library @growthware/gw-lib --prefix gw-core --skip-install
  npm install run-script-os --save
  npm install @auth0/angular-jwt --save
  ng add @angular-eslint/schematics --save-dev --skip-confirmation
  npm install roboto-fontface --save
  npm init @eslint/config
    √ How would you like to use ESLint? · To check syntax, find problems, and enforce code style
    √ What type of modules does your project use? · JavaScript modules (import/export)
    √ Which framework does your project use? · None of these
    √ Does your project use TypeScript? · No / Yes
    √ Where does your code run? · browser
    √ How would you like to define a style for your project? · Answer questions about your style
    √ What format do you want your config file to be in? · JSON
    √ What style of indentation do you use? · tab
    √ What quotes do you use for strings? · single
    √ What line endings do you use? · windows
    √ Do you require semicolons? · No / Yes
    The config that you've selected requires the following dependencies:

    @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest
    √ Would you like to install them now? · No / Yes
    √ Which package manager do you want to use? · npm

  ng generate @angular-eslint/schematics:add-eslint-to-project gw-frontend
  ng generate @angular-eslint/schematics:add-eslint-to-project @growthware/gw-lib
  npm install eslint-plugin-html
  ng add @angular/material --project gw-frontend

  edit .eslintrc.json add the following to the "extends": section
    "plugin:@angular-eslint/recommended",
    "plugin:@angular-eslint/template/process-inline-templates"
  edit .eslintrc.json add the following to the "plugins": section
    "html"
  edit projects\gw-lib\.eslintrc.json
    change "extends": "../../../.eslintrc.json", to Web.Angular\Angular\projects\gw-lib\.eslintrc.json
      
  Angular/package.json  
      "scripts": {
          "build": "ng build",
          "build:lib": "ng build gw-lib",
          "lint": "eslint",
          "ng": "ng",
          "prestart": "node aspnetcore-https",
          "start": "run-script-os",
          "start:windows": "ng serve --host=127.0.0.1 --port 44455 --ssl --ssl-cert %APPDATA%\\ASP.NET\\https\\%npm_package_name%.pem --ssl-key %APPDATA%\\ASP.NET\\https\\%npm_package_name%.key",
          "start:default": "ng serve --host=127.0.0.1 --port 44455 --ssl --ssl-cert $HOME/.aspnet/https/${npm_package_name}.pem --ssl-key $HOME/.aspnet/https/${npm_package_name}.key",
          "test": "ng test",
          "watch": "ng build --watch --configuration development"
      }
  Angular/.eslintignore create file and add *.html

6.)
    ng build @growthware/gw-lib
    Take note of the "entry point" in the following:
------------------------------------------------------------------------------
Building entry point '@growthware/gw-lib'
------------------------------------------------------------------------------
√ Compiling with Angular sources in Ivy partial compilation mode.
√ Generating FESM bundles
√ Copying assets
√ Writing package manifest
√ Built @growthware/gw-lib

------------------------------------------------------------------------------
Built Angular Package
 - from: D:\Development\Temp\Growthware\Core\Web.Angular\Angular\projects\growthware\gw-lib
 - to:   D:\Development\Temp\Growthware\Core\Web.Angular\Angular\dist\growthware\gw-lib
------------------------------------------------------------------------------

7.)
  ng test @growthware/gw-lib
  npm run lint
    NOTE:
      Remember to add to the peerDependencies of package.json in the library for any package
      you are installing for the library to use!

8.)
Files you'll need to edit the following files:
	<dotNetProjectName>.csproj
	Program.cs
	.vscode\launch.json
	Properties\launchSettings.json
	<dotNetProjectName>\<angularWorkstpace>
		\angular.json
		\package.json

Important NOTE
	The port numbers in Properties\launchSettings.json need to match your .vscode\launch.json port numbers
		launchSettings.json		"applicationUrl": "https://localhost:7243;http://localhost:5000",
		launch.json				"url": "http://localhost:5000",
	The port numbers in <dotNetProjectName>.csproj need to match your package.json port numbers
		<dotNetProjectName>.csproj	<SpaProxyServerUrl>https://localhost:44455</SpaProxyServerUrl>
		package.json				"start:windows": "ng serve --port 44455 ...
									"start:default": "ng serve --port 44455 ...

Changes to launch.json
Here I add two configurations and a compounds section this will allow us to debug the angular application
with Visual Studio Code as well as the C# code. Remember the "url": in the configuration here needs
to match the applicationUrl in the launchSettings.json file

The two configurations:
        {
            "name": ".Net Only",
            "type": "coreclr",
            "request": "launch",
            "preLaunchTask": "build",
            // If you have changed target frameworks, make sure to update the program path.
            "program": "${workspaceFolder}/bin/Debug/net7.0/Growthware.Web.Angular.dll",
            "args": [],
            "cwd": "${workspaceFolder}",
            "stopAtEntry": false,
            "internalConsoleOptions": "openOnSessionStart",
            "launchBrowser": {
                "enabled": false
            },
            "env": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            },
            "sourceFileMap": {
                "/Views": "${workspaceFolder}"
            }
        },
        {
            "type": "pwa-chrome",
            "request": "launch",
            "name": "PWA Chrome",
            // For .net 6.0 + this port needs to match Properties\launchSettings.json:applicationUrl
            // otherwise the SPA will not launch
            "url": "http://localhost:5043",
            "webRoot": "${workspaceFolder}/Angular/Projects/gw-frontend",
            "sourceMaps": true,
            "sourceMapPathOverrides": {
              "webpack:///./*": "${workspaceRoot}/Angular/*"
            }
        }
The Compound:
    "compounds": [
        {
            "name": "1.) .Net + Chrome",
            "configurations": [".Net Only", "PWA Chrome"]
        } 
    ]

launchSettings.json:
	"profiles":
		"<dotNetProjectName>":
			"environmentVariables":
				Add the following: "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"

angular.json:
	If you added bootstrap then
		add "./node_modules/bootstrap/dist/css/bootstrap.min.css", to the "styles": sections in
		"projects":
			"<yourApplicationName>":
				"architect":
					"serve":
						"configurations":
							"development":
								Add the following: "proxyConfig": "proxy.conf.js"
  Remove the "src" from the following
    "projects":
      "<yourLibraryName>":
        "sourceRoot": "projects/growthware/gw-lib/src",
  Change "@growthware/gw-lib" to "gw-lib"
  Change 
    growthware/gw-lib to gw-lib
  Move the gw-lib directory up one level
    move projects\growthware\gw-lib projects\gw-lib
    rmdir projects\growthware
  Move src\public-api.ts up one level
    move projects\gw-lib\src\public-api.ts projects\gw-lib\public-api.ts
  Delete the old src directory
    rmdir projects\gw-lib\src /s/q
  Edit projects\gw-lib\ng-package.json
    change "entryFile": "src/public-api.ts" to "entryFile": "public-api.ts"
    change "dest": "../../../dist/growthware/gw-lib" to "dest": "../../dist/growthware/gw-lib"
  Edit projects\gw-lib\public-api.ts
    change contents to:
    export default {};
  Edit projects\gw-lib\package.json
    change "name" from @growthware/gw-lib to @growthware
  Edit projects\gw-frontend\src\app\app.config.ts
    add import { provideHttpClient } from '@angular/common/http';
    add provideHttpClient() to the providers:
  

Angular\tsconfig.json:
    "paths": {
      "@growthware/*": [
        "./projects/gw-lib/*",
        "./projects/gw-lib"
      ],
      "@growthware": [
        "./dist/gw-lib/*",
        "./dist/gw-lib"
      ]
    }
  Add "resolveJsonModule": true, to the "compilerOptions": { section if you are going to server .json files off line

Change ../../../ to ../../ in the following:
  Angular\projects\gw-lib\tsconfig.lib.json
  Angular\projects\gw-lib\tsconfig.spec.json

Files you'll need to create theses files:
	<dotNetProjectName>\<angularWorkstpace>\aspnetcore-https.js
	<dotNetProjectName>\<angularWorkstpace>\proxy.conf.js


********* index.ts EXAMPLE *********
export * from './public-api';

********* ng-package.json Note *********
contents: ("$schema" should be changed to match your directory structure)
********* ng-package.json EXAMPLE *********
{
  "$schema": "../../../../../node_modules/ng-packagr/ng-package.schema.json",
  "lib": {
    "entryFile": "public-api.ts"
  }
}

********* public-api.ts EXAMPLE *********
export default {};

********* aspnetcore-https.js EXAMPLE *********
// This script sets up HTTPS for the application using the ASP.NET Core HTTPS certificate
const fs = require('fs');
const spawn = require('child_process').spawn;
const path = require('path');

const baseFolder =
	process.env.APPDATA !== undefined && process.env.APPDATA !== ''
		? `${process.env.APPDATA}/ASP.NET/https`
		: `${process.env.HOME}/.aspnet/https`;

const certificateArg = process.argv.map(arg => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;

if (!certificateName) {
	console.error('Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly.');
	process.exit(-1);
}

const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
	spawn('dotnet', [
		'dev-certs',
		'https',
		'--export-path',
		certFilePath,
		'--format',
		'Pem',
		'--no-password',
	], { stdio: 'inherit', })
		.on('exit', (code) => process.exit(code));
}

********* proxy.conf.js Notes *********
The context is what is excluded from from the SPA so if you notice
the controller is named weatherforecast and so there is a context of "/weatherforecast"
This means that if you are adding more than one <myName>Controller : ControllerBase
you also need to add the "/<myName>" to the context section.
********* proxy.conf.js EXAMPLE *********
const { env } = require('process');

const target = env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}` : env.ASPNETCORE_URLS ? env.ASPNETCORE_URLS.split(';')[0] : 'http://localhost:35360';
console.log(`proxy.conf.js - Proxy target: '${target}'`);
// If you add or remove any API here you should think about changing jwt.interceptor.ts (JwtInterceptor)
const PROXY_CONFIG = [
	{
		context: [
			'/GrowthwareAccount',
			'/GrowthwareAPI',
			'/GrowthwareFile',
			'/GrowthwareFunction',
			'/GrowthwareGroup',
			'/GrowthwareMessage',
			'/GrowthwareNameValuePair',
			'/GrowthwareRole',
			'/GrowthwareSecurityEntity',
			'/GrowthwareState',
			'/swagger'
		],
		target: target,
		secure: false,
		http2: true,
		headers: {
			Connection: 'Keep-Alive'
		}
	}
];

module.exports = PROXY_CONFIG;

********* <dotNetProjectName>.csproj EXAMPLE *********
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <SpaRoot>Angular\</SpaRoot>
    <SpaProxyServerUrl>https://localhost:44455</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="8.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Web.Support\GrowthWare.Web.Support.csproj" />
    <ProjectReference Include="..\Framework\GrowthWare.Framework.csproj" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>
  
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <!-- Build the Library and Application -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build gw-lib -- --configuration production" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build gw-frontend -- --configuration production" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <!-- Originaly $(SpaRoot)dist\** needed to change in b/c we separate the Angular application and library-->
      <DistFiles Include="$(SpaRoot)dist\gw-frontend\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>

********* Programs.cs EXAMPLE *********
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

// builder.Services.AddControllers();               // Commented out
builder.Services.AddControllersWithViews();         // Added

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
if (!app.Environment.IsDevelopment())               // Added
{
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();                               // Added
app.UseRouting();                                   // Added

app.UseAuthorization();

// app.MapControllers();                            // Commented out
app.MapControllerRoute(                             // Added
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

app.MapFallbackToFile("index.html");                // Added

app.Run();
