using System;
using System.Data;
using System.Data.SqlClient;
using GrowthWare.Framework.DataAccessLayer.SQLServer.Base;
using GrowthWare.Framework.Model.Profiles;

namespace GrowthWare.Framework.DataAccessLayer.SQLServer.V2008
{
	/// <summary>
	/// DAccounts provides all database interaction to SQL Server 2008
	/// </summary>
	/// <remarks>
	///		The Profile and SecurityEntitySeqID properties must be set
	///		before using any methods.
	///		Properties where chosen instead of parameters because all
	///		methods will need one or both to perform their work.
	///	</remarks>
	class DAccounts : DDBInteraction, IDAccount
	{
		protected MAccountProfile m_Profile = null;
		protected int m_SecurityEntitySeqID = -2;

		MAccountProfile IDAccount.Profile
		{
			get { return m_Profile; }
			set { m_Profile = value; }
		}

		int IDAccount.SecurityEntitySeqID
		{
			get { return m_SecurityEntitySeqID; }
			set { m_SecurityEntitySeqID = value; }
		}

		DataRow IDAccount.GetAccount
		{
			get
			{
				String mStoredProcedure = "ZGWSecurity.Get_Account";
				SqlParameter[] mParameters = { 
				base.GetSqlParameter("@P_Is_System_Admin", m_Profile.IsSystemAdmin, ParameterDirection.Input),
				base.GetSqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID, ParameterDirection.Input),
				base.GetSqlParameter("@P_Account", m_Profile.Account, ParameterDirection.Input)};
				return base.GetDataRow(ref mStoredProcedure, ref mParameters);
			}
		}

		DataTable IDAccount.GetAccounts 
		{ 
			get
			{
				checkValid();
				String mStoredProcedure = "ZGWSecurity.Get_Account";
				SqlParameter[] mParameters =
				{
					new SqlParameter("@P_Is_System_Admin", m_Profile.IsSystemAdmin),
					new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID),
					new SqlParameter("@P_Account", "")
				};
				return base.GetDataTable(ref mStoredProcedure, ref mParameters);			
			} 
		}

		DataTable IDAccount.GetRoles()
		{
			checkValid();
			String mStoredProcedure = "ZGWSecurity.Get_Account_Roles";
			SqlParameter[] mParameters = { 
				new SqlParameter("@P_Account", m_Profile.Account), 
				new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID) 
			};
			return base.GetDataTable(ref mStoredProcedure, ref mParameters);
		}

		DataTable IDAccount.GetGroups()
		{
			checkValid();
			String mStoredProcedure = "ZGWSecurity.Get_Account_Groups";
			SqlParameter[] mParameters = { 
				new SqlParameter("@P_Account", m_Profile.Account), 
				new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID) 
			};
			return base.GetDataTable(ref mStoredProcedure, ref mParameters);
		}

		DataTable IDAccount.GetSecurity()
		{
			String mStoredProcedure = "ZGWSecurity.Get_Account_Security";
			SqlParameter[] mParameters = { 
				new SqlParameter("@P_Account", m_Profile.Account), 
				new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID) 
			};
			return base.GetDataTable(ref mStoredProcedure, ref mParameters);
		}

		int IDAccount.Save()
		{
			checkValid();
			int mRetInt;
			String mStoredProcedure = "ZGWSecurity.Set_Account";
			SqlParameter[] mParameters = { 
				base.GetSqlParameter("@P_Account_SeqID", m_Profile.Id, ParameterDirection.InputOutput),
				new SqlParameter("@P_Status_SeqID", m_Profile.Status),
				new SqlParameter("@P_Account", m_Profile.Account),
				new SqlParameter("@P_First_Name", m_Profile.FirstName),
				new SqlParameter("@P_Last_Name", m_Profile.LastName),
				new SqlParameter("@P_Middle_Name", m_Profile.MiddleName),
				new SqlParameter("@P_Prefered_Name", m_Profile.PreferedName),
				new SqlParameter("@P_Email", m_Profile.EMail),
				new SqlParameter("@P_Password", m_Profile.Password),
				new SqlParameter("@P_Password_Last_Set", m_Profile.PasswordLastSet),
				new SqlParameter("@P_Failed_Attempts", m_Profile.FailedAttempts),
				new SqlParameter("@P_Added_Updated_By", base.GetAddedUpdatedBy(m_Profile)),
				new SqlParameter("@P_Last_Login", m_Profile.LastLogin),
				new SqlParameter("@P_Time_Zone", m_Profile.TimeZone),
				new SqlParameter("@P_Location", m_Profile.Location),
				new SqlParameter("@P_Enable_Notifications", m_Profile.EnableNotifications),
				new SqlParameter("@P_Is_System_Admin", m_Profile.IsSystemAdmin)};
			base.ExecuteNonQuery(ref mStoredProcedure, ref mParameters);
			mRetInt = int.Parse(base.GetParameterValue("@P_Account_SeqID", ref mParameters));
			return mRetInt;
		}

		void IDAccount.SaveGroups()
		{
			String mStoredProcedure = "ZGWSecurity.Set_Account_Groups";
			SqlParameter[] mParameters = {
			  new SqlParameter("@P_Account", m_Profile.Account),
			  new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID),
			  new SqlParameter("@P_Groups", m_Profile.GetCommaSeporatedAssignedGroups()),
			  new SqlParameter("@P_Added_Updated_By", base.GetAddedUpdatedBy(m_Profile))
			 };
			base.ExecuteNonQuery(ref mStoredProcedure, ref mParameters);
		}

		void IDAccount.SaveRoles()
		{
			String mStoredProcedure = "ZGWSecurity.Set_Account_Roles";
			SqlParameter[] mParameters = {
			  new SqlParameter("@P_Account", m_Profile.Account),
			  new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID),
			  new SqlParameter("@P_Roles", m_Profile.GetCommaSeporatedAssingedRoles()),
			  new SqlParameter("@P_Added_Updated_By", base.GetAddedUpdatedBy(m_Profile))
			 };
			base.ExecuteNonQuery(ref mStoredProcedure, ref mParameters);
		}

		void IDAccount.Delete()
		{
			string myStoreProcedure = "ZGWSecurity.ZGWSecurity.Delete_Account";
			SqlParameter[] myParameters = { new SqlParameter("@P_Account_SeqID", m_Profile.Id) };
			base.ExecuteNonQuery(ref myStoreProcedure, ref myParameters);		
		}

		private void checkValid()
		{
			base.isValid();
			if (m_Profile == null) 
			{ 
				throw new ArgumentNullException("The Profile property must set before using any methods from this class.");
			}
			if(m_SecurityEntitySeqID == -2)
			{
				throw new ArgumentNullException("The SE_SEQ_ID property must set before using any methods from this class.");
			}
		}
	}
}
