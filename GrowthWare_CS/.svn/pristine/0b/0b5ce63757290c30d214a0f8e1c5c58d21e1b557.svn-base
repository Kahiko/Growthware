using System;
using System.Data;
using GrowthWare.Framework.Model.Profiles.Base;
using GrowthWare.Framework.Model.Profiles.Base.Interfaces;

namespace GrowthWare.Framework.Model.Profiles
{
	/// <summary>
	/// MFunctionProfile contains properties from the ZF_FUNCTIONS table.
	/// </summary>
	/// <remarks></remarks>
	[Serializable(), CLSCompliant(true)]
	public class MFunctionProfile : MSecurity, IMProfile
	{

#region Member Objects
		private int m_Nav_Type_Seq_ID = 2;
		//private int m_ALLOW_HTML_INPUT = 1;
		//private int m_ALLOW_COMMENT_HTML_INPUT = 1;
		private int m_Function_Type_Seq_ID = 1;
		private int m_ParentmFunction_Seq_ID = 1;
		private int m_LinkBehavior = 1;
#endregion

#region Public Methods
		/// <summary>
		/// Will return a Function profile with the default vaules
		/// </summary>
		public MFunctionProfile()
		{
		}

		/// <summary>
		/// Will return a fully populated Function profile.
		/// </summary>
		/// <param name="profileDatarow">A data row containing the Function information</param>
		/// <param name="derivedRoles">A data row containing all of the derived roles</param>
		/// <param name="assignedRoles">A data row containing all of the assigned roles</param>
		/// <param name="groups">A data row containing all of the assigned groups</param>
		/// <remarks></remarks>
		public MFunctionProfile(DataRow profileDatarow, DataRow[] derivedRoles, DataRow[] assignedRoles, DataRow[] groups)
		{
			this.Initialize(ref profileDatarow, ref derivedRoles, ref assignedRoles, ref groups);
		}

#endregion

#region Private methods
		/// <summary>
		/// Popluates the profile.
		/// </summary>
		/// <param name="profileDatarow">Datarow containing the profile information</param>
		/// <param name="derivedRoles">An array of datarows</param>
		/// <param name="assignedRoles">An array of datarows</param>
		/// <param name="groups">An array of datarows</param>
		/// <remarks></remarks>
		private new void Initialize(ref DataRow profileDatarow, ref DataRow[] derivedRoles, ref DataRow[] assignedRoles, ref DataRow[] groups)
		{
			base.Id = base.GetInt(ref profileDatarow, "FUNCTION_SEQ_ID");
			m_Function_Type_Seq_ID = base.GetInt(ref profileDatarow, "FUNCTION_TYPE_SEQ_ID");
			Name = base.GetString(ref profileDatarow, "NAME");
			Description = base.GetString(ref profileDatarow, "DESCRIPTION");
			Notes = base.GetString(ref profileDatarow, "NOTES");
			Source = base.GetString(ref profileDatarow, "SOURCE");
			EnableViewState = base.GetBool(ref profileDatarow, "ENABLE_VIEW_STATE");
			EnableNotifications = base.GetBool(ref profileDatarow, "ENABLE_NOTIFICATIONS");
			RedirectOnTimeout = base.GetBool(ref profileDatarow, "REDIRECT_ON_TIMEOUT");
			IsNav = base.GetBool(ref profileDatarow, "IS_NAV");
			LinkBehavior = base.GetInt(ref profileDatarow, "Link_Behavior");
			No_UI = base.GetBool(ref profileDatarow, "No_UI");
			m_Nav_Type_Seq_ID = base.GetInt(ref profileDatarow, "NAVIGATION_NVP_SEQ_DET_ID");
			m_ParentmFunction_Seq_ID = base.GetInt(ref profileDatarow, "PARENT_Function_Seq_ID");
			Action = base.GetString(ref profileDatarow, "ACTION");
			// need to set the the base class name with the action.
			// the names can repeate but the action is unique and lower case.
			base.Name = Action.ToString();
			MetaKeyWords = base.GetString(ref profileDatarow, "META_KEY_WORDS");
			base.Initialize(ref profileDatarow, ref derivedRoles, ref assignedRoles, ref groups);
		}
#endregion

#region Public Properties
		/// <summary>
		/// Represents the Action to be take within the system.
		/// </summary>
		/// <remarks>This is a unique value</remarks>
		public string Action { get; set; }

		/// <summary>
		/// Used as description of the profile
		/// </summary>
		/// <remarks>Designed to be used in any search options</remarks>
		public string Description { get; set; }

		/// <summary>
		/// Indicates to the system if the "page's" view state should be enabled.
		/// </summary>
		/// <remarks>Legacy usage</remarks>
		public bool EnableViewState { get; set; }

		/// <summary>
		/// Intended to be used to send notifications when this profile is "used" by the client
		/// </summary>
		public bool EnableNotifications { get; set; }

		/// <summary>
		/// Use to determin if a function is a navigation function
		/// </summary>
		/// <remarks>
		/// Should be replaced by LinkBehavior
		/// </remarks>
		public bool IsNav { get; set; }

		/// <summary>
		/// Represents the link behavior of a function.
		/// </summary>
		/// <returns>Integer</returns>
		/// <remarks>
		/// Data stored in ZGWSecurity.Functions and related to ZGWCoreWeb.Link_Behaviors
		/// </remarks>
		public int LinkBehavior
		{
			get { return m_LinkBehavior; }
			set { m_LinkBehavior = value; }
		}

		/// <summary>
		/// Represents the type of function Module,Security, Menu Item etc
		/// </summary>
		/// <value>Integer/int</value>
		/// <returns>Integer/int</returns>
		/// <remarks>
		/// Data stored in ZGWSecurity.Functions related to ZGWSecurity.Function_Types
		/// </remarks>
		public int Function_Type_Seq_ID
		{
			get { return m_Function_Type_Seq_ID; }
			set { m_Function_Type_Seq_ID = value; }
		}

		public string MetaKeyWords { get; set; }

		public new string Name { get; set; }

		public int NAV_TYPE_SEQ_ID
		{
			get { return m_Nav_Type_Seq_ID; }
			set { m_Nav_Type_Seq_ID = value; }
		}

		public string Notes { get; set; }

		public bool No_UI { get; set; }

		public int ParentID
		{
			get { return m_ParentmFunction_Seq_ID; }
			set { m_ParentmFunction_Seq_ID = value; }
		}

		public bool RedirectOnTimeout { get; set; }

		public string Source { get; set; }
		
#endregion
	}
}
