using System;
using System.Data;
using System.Data.SqlClient;
using GrowthWare.Framework.DataAccessLayer.SqlServer.Base;
using GrowthWare.Framework.Model.Profiles;
using GrowthWare.Framework.Model.Enumerations;

namespace GrowthWare.Framework.DataAccessLayer.SqlServer.V2008
{
	/// <summary>
	/// DFunctions provides all database interaction to SQL Server 2008
	/// </summary>
	/// <remarks>
	///		The Profile and SecurityEntitySeqID properties must be set
	///		before using any methods.
	///		Properties where chosen instead of parameters because all
	///		methods will need one or both to perform their work.
	///	</remarks>
	class DFunctions : DDBInteraction, IDFunctions
	{
		#region Member Objects
		private MFunctionProfile m_Profile = null;
		private int m_SecurityEntitySeqID = -2;

		#endregion

		#region Public Properties

		DataRow IDFunctions.GetFunction
		{
			get
			{
				checkValid();
				SqlParameter[] myParameters = 
					{ 
						new SqlParameter("@P_Function_SeqID", m_Profile.Id)
					};
				String storeProc = "ZGWSecurity.Get_Function";
				return base.GetDataRow(ref storeProc, ref myParameters);
			}
		}

		DataSet IDFunctions.GetFunctions
		{
			get
			{
				DataSet mDSFunctions = null;
				checkValid();
				SqlParameter[] mParameters =
				{
				 new SqlParameter("@P_Function_SeqID", m_Profile.Id)
				};
				try
				{
					string mStoredProcedure = "ZGWSecurity.Get_Function";
					DataTable mFunctions = base.GetDataTable(ref mStoredProcedure, ref mParameters);
					mDSFunctions = this.GetSecurity();
					mDSFunctions.Tables[0].TableName = "DerivedRoles";
					mDSFunctions.Tables[1].TableName = "AssignedRoles";
					mDSFunctions.Tables[2].TableName = "Groups";


					bool mHasAssingedRoles = false;
					bool mHasGroups = false;
					mFunctions.TableName = "Functions";
					if(mDSFunctions.Tables["AssignedRoles"].Rows.Count > 0) mHasAssingedRoles = true;
					if(mDSFunctions.Tables["Groups"].Rows.Count > 0) mHasGroups = true;
					mDSFunctions.Tables.Add(mFunctions);

					DataRelation mRelation = new DataRelation("DerivedRoles", mDSFunctions.Tables["Functions"].Columns["Function_Seq_ID"], mDSFunctions.Tables["DerivedRoles"].Columns["Function_Seq_ID"]);
					mDSFunctions.Relations.Add(mRelation);
					if(mHasAssingedRoles)
					{
						mRelation = new DataRelation("AssignedRoles", mDSFunctions.Tables["Functions"].Columns["Function_Seq_ID"], mDSFunctions.Tables["AssignedRoles"].Columns["Function_Seq_ID"]);
						mDSFunctions.Relations.Add(mRelation);
					}
					if(mHasGroups){
						mRelation = new DataRelation("Groups", mDSFunctions.Tables["Functions"].Columns["Function_Seq_ID"], mDSFunctions.Tables["Groups"].Columns["Function_Seq_ID"]);
						mDSFunctions.Relations.Add(mRelation);
					}

				}
				catch (Exception)
				{

					throw;
				}
				return mDSFunctions;

			}
		}

		MFunctionProfile IDFunctions.Profile
		{
			get
			{
				return m_Profile;
			}
			set
			{
				m_Profile = value;
			}
		}

		int IDFunctions.SecurityEntitySeqID
		{
			get
			{
				return m_SecurityEntitySeqID;
			}
			set
			{
				m_SecurityEntitySeqID = value;
			}
		}
		#endregion

		#region Public methods
		void IDFunctions.Delete()
		{
			SqlParameter[] myParameters = 
			{
			  new SqlParameter("@P_Function_SeqID", m_Profile.Id),
			  base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			};
			String storeProc = "ZGWSecurity.Delete_Function";
			base.ExecuteNonQuery(ref storeProc, ref myParameters);
		}

		int IDFunctions.Save()
		{
			SqlParameter[] mParameters = 
			{ 
				base.GetSqlParameter("@P_Function_SeqID", m_Profile.Id,ParameterDirection.InputOutput), 
				new SqlParameter("@P_Name", m_Profile.Name), 
				new SqlParameter("@P_Description", m_Profile.Description), 
				new SqlParameter("@P_Function_Type_SeqID", m_Profile.Function_Type_Seq_ID), 
				new SqlParameter("@P_Source", m_Profile.Source), 
				new SqlParameter("@P_Enable_View_State", m_Profile.EnableViewState), 
				new SqlParameter("@P_Enable_Notifications", m_Profile.EnableNotifications), 
				new SqlParameter("@P_Redirect_On_Timeout", m_Profile.RedirectOnTimeout), 
				new SqlParameter("@P_IS_NAV", m_Profile.IsNav), 
				new SqlParameter("@P_Link_Behavior", m_Profile.LinkBehavior), 
				new SqlParameter("@P_NO_UI", m_Profile.No_UI), 
				new SqlParameter("@P_NAV_TYPE_ID", m_Profile.NAV_TYPE_SEQ_ID), 
				new SqlParameter("@P_Action", m_Profile.Action), 
				new SqlParameter("@P_Meta_Key_Words", m_Profile.MetaKeyWords), 
				new SqlParameter("@P_Parent_SeqID", m_Profile.ParentID), 
				new SqlParameter("@P_Notes", m_Profile.Notes), 
				new SqlParameter("@P_Added_Updated_By", m_Profile.UpdatedBy), 
				new SqlParameter("@P_ADDED_UPDATED_DATE", base.GetAddedUpdatedBy(m_Profile))
			};
			String mStoreProc = "ZGWSecurity.Set_Function";
			base.ExecuteNonQuery(ref mStoreProc, ref mParameters);
			return int.Parse(base.GetParameterValue("@P_Function_SeqID", ref mParameters));
		}

		void IDFunctions.SaveGroups(PermissionType permission)
		{
			checkValid();
			String mCommaSeporatedString = m_Profile.GetCommaSeporatedGroups(permission);
			string myStoreProcedure = "ZGWSecurity.Set_Function_Groups";
			SqlParameter[] myParameters = { 
											  new SqlParameter("@P_Function_SeqID", m_Profile.Id), 
											  new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID), 
											  new SqlParameter("@P_Groups", mCommaSeporatedString), 
											  new SqlParameter("@P_Permissions_NVP_Detail_SeqID", permission), 
											  new SqlParameter("@P_Added_Updated_By", base.GetAddedUpdatedBy(m_Profile))
										  };
			base.ExecuteNonQuery(ref myStoreProcedure, ref myParameters);
		}

		void IDFunctions.SaveRoles(PermissionType permission)
		{
			checkValid();
			String mCommaSeporatedString = m_Profile.GetCommaSeporatedRoles(permission);
			string myStoreProcedure = "ZGWSecurity.Set_Function_Roles";
			SqlParameter[] myParameters = { 
											  new SqlParameter("@P_Function_SeqID", m_Profile.Id), 
											  new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID), 
											  new SqlParameter("@P_Roles", mCommaSeporatedString), 
											  new SqlParameter("@P_Permissions_NVP_Detail_SeqID", permission), 
											  new SqlParameter("@P_Added_Updated_By", base.GetAddedUpdatedBy(m_Profile))
										  };
			base.ExecuteNonQuery(ref myStoreProcedure, ref myParameters);
		}
		#endregion

		#region private methods
		private void checkValid()
		{
			base.isValid();
			if (m_Profile == null)
			{
				throw new ArgumentNullException("The Profile property must set before using any methods from this class.");
			}
			if (m_SecurityEntitySeqID == 0)
			{
				throw new ArgumentNullException("The SE_SEQ_ID property must set before using any methods from this class.");
			}
		}

		private DataTable GetGroups(PermissionType Permission)
		{
			checkValid();
			SqlParameter[] myParameters = { 
											new SqlParameter("@P_Security_Entity_SeqID INT", m_SecurityEntitySeqID), 
											new SqlParameter("@P_Function_SeqID", m_Profile.Id), 
											new SqlParameter("@P_Permissions_SeqID", Permission)
										  };
			String storeProc = "ZGWSecurity.Get_Function_Groups";
			return base.GetDataTable(ref storeProc, ref myParameters);
		}

		private DataTable GetRoles(PermissionType Permission)
		{
			checkValid();
			SqlParameter[] myParameters = { 
											new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID), 
											new SqlParameter("@P_Function_SeqID", m_Profile.Id), 
											new SqlParameter("@P_Permissions_SeqID", Permission)
										};
			String storeProc = "ZGWSecurity.Get_Function_Roles";
			return base.GetDataTable(ref storeProc, ref myParameters);
		}

		private DataSet GetSecurity()
		{
			string myStoreProcedure = "ZGWSecurity.Get_Function_Security";
			SqlParameter[] myParameters = { new SqlParameter("@P_Security_Entity_SeqID", m_SecurityEntitySeqID) };
			return base.GetDataSet(ref myStoreProcedure, ref myParameters);
		}


	
		#endregion
	}
}
