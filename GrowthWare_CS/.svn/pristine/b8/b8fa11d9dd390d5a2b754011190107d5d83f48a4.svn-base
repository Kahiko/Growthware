using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using GrowthWare.Framework.Common;
using GrowthWare.Framework.DataAccessLayer;
using GrowthWare.Framework.ModelObjects;

namespace GrowthWare.Framework.BusinessLogicLayer
{
	/// <summary>
	/// Process business logic for accounts
	/// </summary>
	/// <remarks>
	/// <![CDATA[
	/// MSecurityEntityProfile can be found in the GrowthWare.Framework.ModelObjects namespace.  
	/// 
	/// The following properties are necessary for correct business logic operation.
	/// .ConnctionString
	/// .DALName
	/// .DALNameSpace
	/// ]]>
	/// </remarks>
	/// <example> This sample shows how to create an instance of the class.
	/// <code language="VB.NET">
	/// <![CDATA[
	/// Dim myBll as new BAccounts(mySecurityEntityProfile)
	/// ]]>
	/// </code>
	/// </example>
	public class BAccounts
	{
		private IDAccount m_DAccounts;

		/// <summary>
		/// Private BAccounts() to ensure only new instances with passed parameters is used.
		/// </summary>
		/// <remarks></remarks>
		private BAccounts()
		{
		}

		/// <summary>
		/// Parameters are need to pass along to the factory for correct connection to the desired datastore.
		/// </summary>
		/// <param name="SecurityEntityProfile">The Security Entity profile used to obtain the DAL name, DAL name space, and the Connection String</param>
		/// <param name="CentralManagement">Boolean value indicating if the system is being used to manage multiple database instances.</param>
		/// <remarks></remarks>
		/// <example> This sample shows how to create an instance of the class.
		/// <code language="VB.NET">
		/// <![CDATA[
		/// MSecurityEntityProfile mSecurityEntityProfile = MSecurityEntityProfile = New MSecurityEntityProfile();
		/// mSecurityEntityProfile.ID = ConfigSettings.DefaultSecurityEntityID;
		/// mSecurityEntityProfile.DAL = ConfigSettings.DAL;
		/// mSecurityEntityProfile.DAL_Namespace = ConfigSettings.DAL_NameSpace(mSecurityEntityProfile.DAL);
		/// mSecurityEntityProfile.DAL_Name = ConfigSettings.DAL_AssemblyName(mSecurityEntityProfile.DAL);
		/// mSecurityEntityProfile.ConnectionString = ConfigSettings.ConnectionString;
		/// 
		/// BAccounts mBAccount = BAccounts = New BAccounts(mSecurityEntityProfile, ConfigSettings.CentralManagement);
		/// ]]>
		/// </code>
		/// <code language="C#">
		/// <![CDATA[
		/// Dim mSecurityEntityProfile As MSecurityEntityProfile = New MSecurityEntityProfile()
		/// mSecurityEntityProfile.ID = ConfigSettings.DefaultSecurityEntityID
		/// mSecurityEntityProfile.DAL = ConfigSettings.DAL
		/// mSecurityEntityProfile.DAL_Namespace = ConfigSettings.DAL_NameSpace(mSecurityEntityProfile.DAL)
		/// mSecurityEntityProfile.DAL_Name = ConfigSettings.DAL_AssemblyName(mSecurityEntityProfile.DAL)
		/// mSecurityEntityProfile.ConnectionString = ConfigSettings.ConnectionString
		/// 
		/// Dim mBAccount As BAccounts = New BAccounts(mSecurityEntityProfile, ConfigSettings.CentralManagement)
		/// ]]>
		/// </code>
		/// </example>
		public BAccounts(MSecurityEntityProfile SecurityEntityProfile, bool CentralManagement)
		{
			if(SecurityEntityProfile == null) 
			{
				throw new ArgumentException("The securityEntityProfile and not be null!");
			}
			if(CentralManagement)
			{
				if (m_DAccounts == null)
				{
					m_DAccounts = (IDAccount)FactoryObject.Create(SecurityEntityProfile.DALAssemblyName, SecurityEntityProfile.DALNamespace, "DAccounts");
				}
			}
			else
			{
				m_DAccounts = (IDAccount)FactoryObject.Create(SecurityEntityProfile.DALAssemblyName, SecurityEntityProfile.DALNamespace, "DAccounts");
			}

			m_DAccounts.ConnectionString = SecurityEntityProfile.ConnectionString;
			m_DAccounts.SecurityEntitySeqID = SecurityEntityProfile.Id;
		}

		/// <summary>
		/// Deletes a record from the database.
		/// </summary>
		/// <param name="accountId">int</param>
		/// <remarks>Not to be used lightly.  In most cases any history associated with the account will be lost.</remarks>
		/// <example> This sample shows how to create an instance of the class.
		/// <code language="VB.NET">
		/// <![CDATA[
		/// Dim mBll as new BAccounts(mySecurityEntityProfile)
		/// mBll.Delete(1)
		/// ]]>
		/// </code>
		/// <code language="C#">
		/// <![CDATA[
		/// BAccounts mBll = new BAccounts(mySecurityEntityProfile);
		/// mBll.Delete(1);
		/// ]]>
		/// </code>
		/// </example>
		public void Delete(int accountId)
		{
			m_DAccounts.Profile.Id = accountId;
			m_DAccounts.Delete();		
		}

		/// <summary>
		/// Returns Account model based given the acccount name 
		/// </summary>
		/// <param name="Account">String</param>
		/// <returns>MAccountProfile</returns>
		/// <remarks></remarks>
		/// <example> This sample shows how to create an instance of the class.
		/// <code language="VB.NET">
		/// <![CDATA[
		/// Dim mBll as new BAccounts(mySecurityEntityProfile)
		/// Dim mMAccountProfile as MAccountProfile = mbill.GetAccountProfile("Tester")
		/// ]]>
		/// </code>
		/// <code language="C#">
		/// <![CDATA[
		/// BAccounts mBll = new BAccounts(mySecurityEntityProfile);
		/// MAccountProfile mMAccountProfile = mbill.GetAccountProfile("Tester");
		/// ]]>
		/// </code>
		/// </example>
		public MAccountProfile GetAccountProfile(string Account)
		{
			m_DAccounts.Profile = new MAccountProfile();
			m_DAccounts.Profile.Account = Account;
			DataTable mAssignedRoles = m_DAccounts.GetRoles();
			DataTable mAssignedGroups = m_DAccounts.GetGroups();
			DataTable mRoles = m_DAccounts.GetSecurity();
			return new MAccountProfile(m_DAccounts.GetAccount, mAssignedRoles, mAssignedGroups, mRoles);
		}

		/// <summary>
		/// Returns a collection of MAccountProfiles without any role information
		/// </summary>
		/// <param name="Profile">An instance of MAccountProfile</param>
		/// <returns></returns>
		public Collection<MAccountProfile> GetAccounts(MAccountProfile Profile)
		{
			Collection<MAccountProfile> mRetList = new Collection<MAccountProfile>();
			DataTable mDataTable = null;
			try
			{
				m_DAccounts.Profile = Profile;
				mDataTable = m_DAccounts.GetAccounts;
				foreach(DataRow item in mDataTable.Rows)
				{
					mRetList.Add(new MAccountProfile(item));
				}
				return mRetList;
			}
			catch(Exception)
			{
				throw;
			}
			finally 
			{ 
				if(mDataTable != null)
				{
					mDataTable.Dispose();
				}
			}
		}

		/// <summary>
		/// Performs either insert or update of an MAcountProfile, and re-populates the MAccountProfile with DB information.
		/// </summary>
		/// <param name="Profile">MAccountProfile</param>
		/// <param name="SaveRoles">MAccountProfile</param>
		/// <param name="SaveGroups">MAccountProfile</param>
		/// <remarks>
		/// Updates the model object with information from the database<br></br>
		/// For example if you are creating a new account the ID will be sent into<br></br>
		/// this method as -1, after the call to this method the ID will from the database
		/// </remarks>
		/// <example> This sample shows how to create an instance of the class.
		/// <code language="VB.NET">
		/// <![CDATA[
		/// Dim mMAccountProfile as new MAccountProfile()
		/// mMAccountProfile.Account = "Account"
		/// mMAccountProfile.Password = CryptoUtility.Encrypt("my password", ConfigSettings.EncryptionType)
		/// mMAccountProfile.UpdatedBy = 1
		/// mMAccountProfile.UpdagedDate = Date.Now
		/// Dim mBll as new BAccounts(mySecurityEntityProfile)
		/// Dim mSaveRoles As Boolean = False;
		/// Dim mSaveGroups As Boolean = False;
		/// mMAccountProfile = mbill.SaveAccount(mMAccountProfile, mSaveRoles, mSaveGroups)
		/// ]]>
		/// </code>
		/// <code language="C#">
		/// MAccountProfile mMAccountProfile = new mMAccountProfile();
		/// mMAccountProfile.Account = "Account";
		/// mMAccountProfile.Password = CryptoUtility.Encrypt("my password", ConfigSettings.EncryptionType);
		/// mMAccountProfile.UpdatedBy = 1;
		/// mMAccountProfile.UpdagedDate = Date.Now();
		/// BAccounts mBll = new BAccounts(mySecurityEntityProfile);
		/// bool mSaveRoles = false;
		/// bool mSaveGroups = true;
		/// mMAccountProfile = mbill.SaveAccount(ref mMAccountProfile, mSaveRoles, mSaveGroups);
		/// </code>
		/// </example>
		public void Save(ref MAccountProfile Profile, bool SaveRoles, bool SaveGroups)
		{
			m_DAccounts.Profile = Profile;
			Profile.Id = m_DAccounts.Save();
			if(SaveGroups)
			{
				m_DAccounts.SaveGroups();
			}
			if(SaveRoles)
			{
				m_DAccounts.SaveRoles();
			}
			Profile = new MAccountProfile(m_DAccounts.GetAccount, m_DAccounts.GetRoles(), m_DAccounts.GetGroups(), m_DAccounts.GetSecurity());
		}
	}
}
