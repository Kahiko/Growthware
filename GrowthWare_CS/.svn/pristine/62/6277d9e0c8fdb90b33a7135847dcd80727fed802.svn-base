using System;
using System.Data;
using System.Data.SqlClient;
using GrowthWare.Framework.DataAccessLayer.SqlServer.Base;
using GrowthWare.Framework.ModelObjects;
using GrowthWare.Framework.Enumerations;

namespace GrowthWare.Framework.DataAccessLayer.SQLServer.V2000
{
	class DFunctions : DDBInteraction, IDFunctions
	{


#region Member Objects
		private MFunctionProfile m_Profile = null;
		private int m_SecurityEntitySeqID = -2;
		
#endregion

#region Public Properties
		DataRow IDFunctions.GetFunction
		{
			get 
			{
				checkValid();
				SqlParameter[] myParameters = 
								{ 
									new SqlParameter("@P_FUNCTION_SEQ_ID", m_Profile.Id), 
									base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
								};
				String storeProc = "ZFP_GET_FUNCTION";
				return base.GetDataRow(ref storeProc, ref myParameters);         
			}
		}

		DataTable IDFunctions.GetFunctions
		{
			get 
			{
				SqlParameter[] myParameters = 
								{ 
									new SqlParameter("@P_FUNCTION_SEQ_ID", -1), 
									base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
								};
				String storeProc = "ZFP_GET_FUNCTION";
				return base.GetDataTable(ref storeProc, ref myParameters);   
			}
		}

		MFunctionProfile IDFunctions.Profile 
		{
			get 
			{
				return m_Profile;
			}
			set 
			{
				m_Profile = value;
			}
		}
		
		int IDFunctions.SecurityEntitySeqID
		{
			get
			{
				return m_SecurityEntitySeqID;
			}
			set
			{
				m_SecurityEntitySeqID = value;
			}
		}
#endregion

#region Public methods
		void IDFunctions.Delete()
		{
			SqlParameter[] myParameters = { new SqlParameter("@P_FUNCTION_SEQ_ID", m_Profile.Id), base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) };
			String storeProc = "ZFP_DEL_FUNCTION";
			base.ExecuteNonQuery(ref storeProc, ref myParameters);
		}

		DataTable IDFunctions.GetGroups(PermissionType Permission)
		{
			checkValid();
			SqlParameter[] myParameters = { new SqlParameter("@P_SE_SEQ_ID", m_SecurityEntitySeqID), new SqlParameter("@P_FUNCTION_SEQ_ID", m_Profile.Id), new SqlParameter("@P_PERMISSIONS_SEQ_ID", Permission), base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) };
			String storeProc = "ZFP_GET_FUNCTION_GRPS";
			return base.GetDataTable(ref storeProc, ref myParameters);
		}

		DataTable IDFunctions.GetRoles(PermissionType Permission)
		{
			checkValid();
			SqlParameter[] myParameters = { 
											new SqlParameter("@P_SE_SEQ_ID", m_SecurityEntitySeqID), 
											new SqlParameter("@P_FUNCTION_SEQ_ID", m_Profile.Id), 
											new SqlParameter("@P_PERMISSIONS_SEQ_ID", Permission), 
											base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) 
										};
			String storeProc = "ZFP_GET_FUNCTION_RLS";
			return base.GetDataTable(ref storeProc, ref myParameters);
		}

		DataTable IDFunctions.GetSecurity()
		{
			string myStoreProcedure = "ZFP_GET_FUNCTIONS_SECURITY";
			SqlParameter[] myParameters = { 
											  new SqlParameter("@P_SE_SEQ_ID", m_SecurityEntitySeqID), 
											  base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) 
										  };
			return base.GetDataTable(ref myStoreProcedure, ref myParameters);
		}

		int IDFunctions.Save()
		{
			SqlParameter[] mParameters = 
			{ 
				new SqlParameter("@P_FUNCTION_SEQ_ID", m_Profile.Id), 
				new SqlParameter("@P_NAME", m_Profile.Name), 
				new SqlParameter("@P_DESCRIPTION", m_Profile.Description), 
				new SqlParameter("@P_FUNCTION_TYPE_SEQ_ID", m_Profile.Function_Type_Seq_ID), 
				new SqlParameter("@P_SOURCE", m_Profile.Source), 
				new SqlParameter("@P_ENABLE_VIEW_STATE", m_Profile.EnableViewState), 
				new SqlParameter("@P_ENABLE_NOTIFICATIONS", m_Profile.EnableNotifications), 
				new SqlParameter("@P_REDIRECT_ON_TIMEOUT", m_Profile.RedirectOnTimeout), 
				new SqlParameter("@P_IS_NAV", m_Profile.IsNav), 
				new SqlParameter("@P_NO_UI", m_Profile.No_UI), 
				new SqlParameter("@P_NAV_TYPE_ID", m_Profile.NAV_TYPE_SEQ_ID), 
				new SqlParameter("@P_ACTION", m_Profile.Action), 
				new SqlParameter("@P_META_KEY_WORDS", m_Profile.MetaKeyWords), 
				new SqlParameter("@P_PARENT_FUNCTION_SEQ_ID", m_Profile.ParentID), 
				new SqlParameter("@P_NOTES", m_Profile.Notes), 
				new SqlParameter("@P_ADDED_UPDATED_BY", m_Profile.UpdatedBy), 
				new SqlParameter("@P_ADDED_UPDATED_DATE", m_Profile.UpdatedDate), 
				base.GetSqlParameter("@P_PRIMARY_KEY", "", ParameterDirection.Output), 
				base.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) 
			};
			String mStoreProc = "ZFP_SET_FUNCTION";
			base.ExecuteNonQuery(ref mStoreProc, ref mParameters);
			return int.Parse(base.GetParameterValue("@P_PRIMARY_KEY", ref mParameters));
		}

		void IDFunctions.SaveGroups()
		{
			throw new NotImplementedException();
		}

		void IDFunctions.SaveRoles()
		{
			throw new NotImplementedException();
		}
#endregion

#region
		private void checkValid()
		{
			base.isValid();
			if (m_Profile == null)
			{
				throw new ArgumentNullException("The Profile property must set before using any methods from this class.");
			}
			if (m_SecurityEntitySeqID == 0)
			{
				throw new ArgumentNullException("The SE_SEQ_ID property must set before using any methods from this class.");
			}
		}

#endregion
	}
}
