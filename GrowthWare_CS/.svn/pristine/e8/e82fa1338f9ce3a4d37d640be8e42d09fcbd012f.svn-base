using System;
using System.Collections;
using System.Data;
using GrowthWare.Framework.Enumerations;
using GrowthWare.Framework.ModelObjects.Base.Interfaces;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace GrowthWare.Framework.ModelObjects.Base
{
	/// <summary>
	/// The MBaseSecurity is a abstract class that when inherited will add 4 types of roles
	/// to your class/object.  After you have inherited the class pass a data row to the SecurityInit sub 
	/// to populate the roles.
	/// </summary>
	/// <remarks>
	/// Currently there are 4 permission roles and they are Add, Edit, View, Delete.  
	/// If you would like to extend this class do so by inheriting this class and adding your
	/// own types of roles say Moderate if your writing some sort of formum type of class.
	/// Any of the objects you create should now inherit your class and will now have all of the 
	/// roles from this class as well as the ones for yours.
	///</remarks>
	public abstract class MSecurity : MProfile, ISecurityInfo
	{
		private Collection<string> m_AddRoles = new Collection<string>();
		private Collection<string> m_DeleteRoles = new Collection<string>();
		private Collection<string> m_EditRoles = new Collection<string>();
		private Collection<string> m_ViewRoles = new Collection<string>();
		private string m_PermissionColumn = "PERMISSIONS_SEQ_ID";

		private string m_RoleColumn = "ROLE";

		/// <summary>
		/// Initialize orverloads and calles mybase.init to will populate the Add, Delete, Edit, and View role properties.
		/// </summary>
		/// <param name="DRowSecurity">A data row that must contain two columns ("PERMISSIONS_SEQ_ID","ROLE")</param>
		/// <param name="DetailRow">A data row that contains base information</param>
		/// <remarks></remarks>
		virtual protected void Initialize(DataRow DetailRow, DataRow[] DRowSecurity)
		{
			base.Initialize(ref DetailRow);
			AddRolesTo(DRowSecurity, RoleType.AddRole);
			AddRolesTo(DRowSecurity, RoleType.DeleteRole);
			AddRolesTo(DRowSecurity, RoleType.EditRole);
			AddRolesTo(DRowSecurity, RoleType.ViewRole);
		}

		/// <summary>
		/// Return roles associated with the "Add" permission.
		/// </summary>
		public Collection<string> AddRoles
		{
			get { return m_AddRoles; }
		}

		/// <summary>
		/// Return roles associated with the "Delete" permission.
		/// </summary>
		public Collection<string> DeleteRoles
		{
			get { return m_DeleteRoles; }
		}

		/// <summary>
		/// Return roles associated with the "Edit" permission.
		/// </summary>
		public Collection<string> EditRoles
		{
			get { return m_EditRoles; }
		}

		/// <summary>
		/// Return roles associated with the "View" permission.
		/// </summary>
		public Collection<string> ViewRoles
		{
			get { return m_ViewRoles; }
		}

		/// <summary>
		/// Represents the permission column name.
		/// </summary>
		public string PermissionColumn {
			get { return m_PermissionColumn; }
			set { m_PermissionColumn = value.Trim(); }
		}

		/// <summary>
		/// Represents the role column name.
		/// </summary>
		public string RoleColumn {
			get { return m_RoleColumn; }
			set { m_RoleColumn = value.Trim(); }
		}

		/// <summary>
		/// Populates the given permissions roles.
		/// </summary>
		/// <param name="Roles">Array of DataRows</param>
		/// <param name="RoleType">Enum RoleType</param>
		protected void AddRolesTo(DataRow[] Roles, RoleType RoleType)
		{
			foreach(DataRow row in Roles)
			{
				if(!Convert.IsDBNull(row[m_PermissionColumn]))
				{
					if(!Convert.IsDBNull(row[m_RoleColumn])) 
					{
						switch(RoleType)	
						{
							case RoleType.AddRole:
								m_AddRoles.Add(row[m_RoleColumn].ToString());
								break;
							case RoleType.DeleteRole:
								m_DeleteRoles.Add(row[m_RoleColumn].ToString());
								break;
							case RoleType.EditRole:
								m_EditRoles.Add(row[m_RoleColumn].ToString());
								break;
							case RoleType.ViewRole:
								m_ViewRoles.Add(row[m_RoleColumn].ToString());
								break;
							default:
								break;
						}
					}
				}
			}
		}

		/// <summary>
		/// Populates all permissions.
		/// </summary>
		/// <param name="SecurityRows">DataRowCollection containing all derived roles for all permissions</param>
		protected void PopulatePermissions(DataRowCollection SecurityRows)
		{
			throw new NotImplementedException();
		}
	}
}
