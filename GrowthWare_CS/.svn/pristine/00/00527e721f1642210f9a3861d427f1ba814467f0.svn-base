using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GrowthWare.Framework.Model.Profiles;
using GrowthWare.Framework.Web.Utilities;
using GrowthWare.Framework.Web;
using GrowthWare.Framework.Web.Controllers;
using GrowthWare.Framework.BusinessLogicLayer;
using System.Web;
using System.Web.SessionState;
using GrowthWare.Framework.Common;

namespace GrowthWare.Framework.Web.Context
{
	/// <summary>
	/// The ClientChoicesModule ensures that the client choices are avalible 
	/// to the HTTPCONTEXT
	/// </summary>
	/// <remarks></remarks>
	public class ClientChoicesHttpModule : IHttpModule, IRequiresSessionState
	{

		private MSecurityEntityProfile m_SEProfile = SecurityEntityUtility.GetCurrentProfile();
		private bool m_Disposing = false;

		public void Init(HttpApplication App)
		{
			App.AcquireRequestState += this.AcquireRequestState;
			App.EndRequest += this.EndRequest;
		}

		public void Dispose()
		{
			if (!m_Disposing) 
			{
				m_Disposing = true;
				m_SEProfile = null;
			}
		}

		public void AcquireRequestState(object Sender, EventArgs E)
		{
			if(WebConfigSettings.DBStatus.ToUpper() != GWWebHelper.DBStatusOnline.ToUpper()) return;
			if(HttpContext.Current.Request.Path.ToUpper().IndexOf(".ASPX") == -1) return;
			if(HttpContext.Current.Session == null) return;
			String mAccountName = "Anonymous";
			if(HttpContext.Current.Request.IsAuthenticated)
			{
				mAccountName = HttpContext.Current.User.Identity.Name;
			}

			MClientChoicesState mClientChoicesState = null;
			ClientChoicesUtility mClientChoicesUtility = new ClientChoicesUtility();
			mClientChoicesState = mClientChoicesUtility.GetClientChoicesState(mAccountName);
			// Add ClientChoicesState object to the context items for use
			// throughout the application.
			HttpContext.Current.Items[MClientChoices.SessionName] = mClientChoicesState;

		}

		public void EndRequest(object Sender, EventArgs E)
		{
			if (HttpContext.Current.Request.Path.ToUpper().IndexOf(".ASPX") == -1) return;

			//Save ClientChoicesState back to data store
			MClientChoicesState mState = (MClientChoicesState)HttpContext.Current.Items[MClientChoices.SessionName];
			BClientChoices mBll = new BClientChoices(ref m_SEProfile, ConfigSettings.CentralManagement);
			if (((mState != null)))
			{
				mBll.Save(ref mState);
				HttpContext.Current.Items[MClientChoices.SessionName] = mState;
			}
		}
	}

}
