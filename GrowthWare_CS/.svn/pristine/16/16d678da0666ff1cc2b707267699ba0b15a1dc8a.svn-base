using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using GrowthWare.Framework.DataAccessLayer.Interfaces;
using GrowthWare.Framework.DataAccessLayer.SQLServer.Base;
using GrowthWare.Framework.Model.Profiles;

namespace GrowthWare.Framework.DataAccessLayer.SQLServer.V2000
{
	/// <summary>
	/// DClientChoices provides all database interaction to SQL Server 2000 to 2005
	/// </summary>
	/// <remarks>
	///		The Profile and SecurityEntitySeqID properties must be set
	///		before using any methods.
	///		Properties where chosen instead of parameters because all
	///		methods will need one or both to perform their work.
	///	</remarks>
	class DClientChoices : DDBInteraction, IDClientChoices
	{

#region Pubic Methods
		DataRow IDClientChoices.GetChoices(ref string account)
		{
			string mStoredProcedure = "ZFP_GET_ACCT_CHOICES";
			if (String.IsNullOrEmpty(account)) { throw new ArgumentException("Must set the Account property", "account"); };
			SqlParameter[] myParameters =
			{
				new SqlParameter("@P_ACCOUNT", account),
				base.GetSqlParameter("@P_ErrorCode", null, ParameterDirection.InputOutput)
			};
			return base.GetDataRow(ref mStoredProcedure, ref myParameters);
		}

		void IDClientChoices.Save(ref Hashtable clientChoicesStateHashTable)
		{
			if (clientChoicesStateHashTable == null || clientChoicesStateHashTable.Count == 0) { throw new ArgumentException("Must set the clientChoicesStateHashTable property", "clientChoicesStateHashTable"); };
			string mStoredProcedure = "ZFP_SET_ACCT_CHOICES";
			IEnumerator HashKeyEnum = ((IEnumerable)clientChoicesStateHashTable.Keys).GetEnumerator();
			IEnumerator HashValEnum = ((IEnumerable)clientChoicesStateHashTable.Values).GetEnumerator();
			SqlParameter[] commandParameters = new SqlParameter[clientChoicesStateHashTable.Count];
			int x = 0;
			while ((HashKeyEnum.MoveNext() & HashValEnum.MoveNext()))
			{
				SqlParameter myParameter = new SqlParameter("@P_" + HashKeyEnum.Current.ToString(), SqlDbType.NVarChar, 1000);
				myParameter.Value = HashValEnum.Current.ToString();
				commandParameters.SetValue(myParameter, x);
				x = x + 1;
			}
			base.ExecuteNonQuery(ref mStoredProcedure, ref commandParameters);
		}
		#endregion
	}
}
