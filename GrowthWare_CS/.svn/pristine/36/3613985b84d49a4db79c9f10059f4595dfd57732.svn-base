using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Web;
using GrowthWare.Framework.ModelObjects;
using GrowthWare.Framework.ModelObjects.Base.Interfaces;
using GrowthWare.Framework.ModelObjects.Base;

namespace GrowthWare.Framework.ModelObjects
{
	/// <summary>
	/// MFunctionProfile contains properties from the ZF_FUNCTIONS table.
	/// </summary>
	/// <remarks></remarks>
	[Serializable(), CLSCompliant(true)]
	public class MFunctionProfile : MSecurity
	{

		private int m_Nav_Type_Seq_ID = 2;
		private int  m_Function_Type_Seq_ID = -1;
		private int m_ParentmFunction_Seq_ID = 1;

		/// <summary>
		/// Will return a Function profile with the default vaules
		/// </summary>
		/// <remarks></remarks>
		public MFunctionProfile()
		{
		}

		/// <summary>
		/// Will return a fully populated Function profile.
		/// </summary>
		/// <param name="profileDatarow">A data row containing the Function information</param>
		/// <param name="securityDatarow">A data row containing all of the roles</param>
		/// <remarks></remarks>
		public MFunctionProfile(DataRow profileDatarow, DataRow[] securityDatarow)
		{
			this.Initialize(profileDatarow, securityDatarow);
		}

		private new void Initialize(DataRow profileDatarow, DataRow[] securityDatarow)
		{
			base.Initialize(profileDatarow, securityDatarow);
			base.Id = base.GetInt(ref profileDatarow, "FUNCTION_SEQ_ID");
			m_Function_Type_Seq_ID = base.GetInt(ref profileDatarow, "FUNCTION_TYPE_SEQ_ID");
			Name = base.GetString(ref profileDatarow,"NAME");
			Description = base.GetString(ref profileDatarow, "DESCRIPTION");
			Notes = base.GetString(ref profileDatarow, "NOTES");
			Source = base.GetString(ref profileDatarow, "SOURCE");
			EnableViewState = base.GetBool(ref profileDatarow, "ENABLE_VIEW_STATE");
			EnableNotifications = base.GetBool(ref profileDatarow, "ENABLE_NOTIFICATIONS");
			RedirectOnTimeout = base.GetBool(ref profileDatarow, "REDIRECT_ON_TIMEOUT");
			IsNav = base.GetBool(ref profileDatarow, "IS_NAV");
			LinkBehavior = base.GetInt(ref profileDatarow, "Link_Behavior");
			No_UI = base.GetBool(ref profileDatarow, "No_UI");
			m_Nav_Type_Seq_ID = base.GetInt(ref profileDatarow, "NAVIGATION_NVP_SEQ_DET_ID");
			m_ParentmFunction_Seq_ID = base.GetInt(ref profileDatarow, "PARENT_Function_Seq_ID");
			Action = base.GetString(ref profileDatarow, "ACTION");
			// need to set the the base class name with the action.
			// the names can repeate but the action is unique and lower case.
			base.Name = Action.ToString();
			MetaKeyWords = base.GetString(ref profileDatarow, "META_KEY_WORDS");
		}

		/// <summary>
		/// Represents the Action to be take within the system.
		/// </summary>
		/// <remarks>This is a unique value</remarks>
		public string Action { get; set; }

		public string Description { get; set; }

		public bool EnableViewState { get; set; }

		public bool EnableNotifications { get; set; }

		/// <summary>
		/// Use to determin if a function is a navigation function
		/// </summary>
		/// <remarks>
		/// Should be replaced by LinkBehavior
		/// </remarks>
		public bool IsNav { get; set; }

		/// <summary>
		/// Replresents the link behavior of a function.
		/// </summary>
		/// <returns>Integer</returns>
		/// <remarks>
		/// Data stored in ZGWSecurity.Functions and related to ZGWCoreWeb.Link_Behaviors
		/// </remarks>
		public int LinkBehavior { get; set; }

		public int Function_Type_Seq_ID { get; set; }

		public string MetaKeyWords { get; set; }

		public new string Name { get; set; }

		public int NAV_TYPE_SEQ_ID {
			get { return m_Nav_Type_Seq_ID; }
			set { m_Nav_Type_Seq_ID = value; }
		}

		public string Notes { get; set; }

		public bool No_UI { get; set; }

		public int ParentID {
			get { return m_ParentmFunction_Seq_ID; }
			set { m_ParentmFunction_Seq_ID = value; }
		}

		public bool RedirectOnTimeout { get; set; }

		public string Source { get; set; }
	}
}
