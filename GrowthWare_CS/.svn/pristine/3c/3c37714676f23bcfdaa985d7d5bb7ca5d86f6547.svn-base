using System;
using System.Collections.ObjectModel;
using System.Web;
using GrowthWare.Framework.BusinessLogicLayer;
using GrowthWare.Framework.Common;
using GrowthWare.Framework.Enumerations;
using GrowthWare.Framework.ModelObjects;

namespace GrowthWare.Framework.Web.Utilities
{
	/// <summary>
	/// AccountUtility serves as the focal point for any web application needing to utiltize the GrowthWare framework.
	/// Web needs such as caching are handeled here
	/// </summary>
	public class AccountUtility
	{
		//private String m_SecutiryEntityCacheKey = "SecurityEntity_XX_Account";
		private MSecurityEntityProfile m_SecurityEntityProfile = null;
		private BAccounts m_BAccount = null;

		/// <summary>
		/// Constructor sets up the private fields
		/// </summary>
		public AccountUtility()
		{
			SecurityEntityUtility mSecurityUtility = new SecurityEntityUtility();
			m_SecurityEntityProfile = mSecurityUtility.GetCurrentProfile;
			m_BAccount = new BAccounts(m_SecurityEntityProfile, ConfigSettings.CentralManagement);
		}

		/// <summary>
		/// Retrieves the current profile.
		/// </summary>
		/// <returns>MAccountProfile</returns>
		/// <remarks>If context does not contain a referance to an account anonymous will be returned</remarks>
		public MAccountProfile GetCurrentProfile
		{
			get
			{
				MAccountProfile mRetProfile = null;
				if(HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity.Name.Length > 0)
				{
					mRetProfile = this.GetProfile(HttpContext.Current.User.Identity.Name);
				}else
				{
					mRetProfile = this.GetProfile("Anonymous");
				}
				return mRetProfile;
			}
		}


		/// <summary>
		/// Retrieves an account profile given the account
		/// </summary>
		/// <param name="account">String</param>
		/// <returns>a populated MAccountProfile</returns>
		public MAccountProfile GetProfile(String account)
		{
			return m_BAccount.GetAccountProfile(account);
		}

		/// <summary>
		/// Retruns a collection of MAccountProfiles given an MAccountProfile and the current SecurityEntitySeqID
		/// </summary>
		/// <param name="profile">MAccountProfile</param>
		/// <remarks>If the Profiles.IsSysAdmin is true then all accounts will be returned</remarks>
		public Collection<MAccountProfile> GetAccounts(MAccountProfile profile)
		{
			return m_BAccount.GetAccounts(profile);
		}

		/// <summary>
		/// Inserts or updates account information
		/// </summary>
		/// <param name="profile">MAccountProfile</param>
		/// <param name="saveRoles">Boolean</param>
		/// <param name="saveGroups">Boolean</param>
		/// <remarks>Changes will be reflected in the profile passed as a reference.</remarks>
		public MAccountProfile Save(MAccountProfile profile, bool saveRoles, bool saveGroups)
		{
			m_BAccount.Save(ref profile, saveRoles, saveGroups);
			return profile;
		}

	}

}
