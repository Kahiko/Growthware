CREATE PROCEDURE [ZFP_GET_ACCT]
	@P_IS_SYSTEM_ADMIN INT,
	@P_ACCOUNT VARCHAR(128),
	@P_SE_SEQ_ID INT,
	@P_ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
IF LEN(@P_ACCOUNT) = 0
	BEGIN
		IF @P_IS_SYSTEM_ADMIN = 1
			BEGIN
				SELECT
					[ACCT_SEQ_ID],
					[STATUS_SEQ_ID],
					[ACCT],
					[FIRST_NAME],
					[LAST_NAME],
					[MIDDLE_NAME],
					[PREFERED_NAME],
					[EMAIL],
					[PASSWORD_LAST_SET],
					[PWD],
					[FAILED_ATTEMPTS],
					[ADDED_BY],
					[ADDED_DATE],
					[LAST_LOGIN],
					[TIME_ZONE],
					[LOCATION],
					[ENABLE_NOTIFICATIONS],
					[UPDATED_BY],
					[UPDATED_DATE]
				FROM
					[ZFC_ACCTS]
				ORDER BY 
					[ACCT] ASC
			END
		ELSE
			BEGIN
				DECLARE @V_Accounts TABLE (ACCT_SEQ_ID INT, ACCT VARCHAR(100), EMAIL VARCHAR(100), ENABLE_NOTIFICATIONS BIT, IS_SYSTEM_ADMIN INT, STATUS_SEQ_ID INT, PWD VARCHAR(256), FAILED_ATTEMPTS INT, FIRST_NAME VARCHAR(30), LAST_LOGIN DATETIME, LAST_NAME VARCHAR(30), LOCATION VARCHAR(100), MIDDLE_NAME VARCHAR(30), PREFERED_NAME VARCHAR(100), TIME_ZONE INT, ADDED_BY INT, ADDED_DATE DATETIME, UPDATED_BY INT, UPDATED_DATE DATETIME)
				INSERT INTO @V_Accounts
				SELECT -- Roles via roles
					ZFC_ACCTS.ACCT_SEQ_ID,
					ZFC_ACCTS.ACCT,
					ZFC_ACCTS.EMAIL,
					ZFC_ACCTS.ENABLE_NOTIFICATIONS,
					ZFC_ACCTS.IS_SYSTEM_ADMIN,
					ZFC_ACCTS.STATUS_SEQ_ID,
					ZFC_ACCTS.PWD,
					ZFC_ACCTS.FAILED_ATTEMPTS,
					ZFC_ACCTS.FIRST_NAME,
					ZFC_ACCTS.LAST_LOGIN,
					ZFC_ACCTS.LAST_NAME,
					ZFC_ACCTS.LOCATION,
					ZFC_ACCTS.MIDDLE_NAME,
					ZFC_ACCTS.PREFERED_NAME,
					ZFC_ACCTS.TIME_ZONE,
					ZFC_ACCTS.ADDED_BY,
					ZFC_ACCTS.ADDED_DATE,
					ZFC_ACCTS.UPDATED_BY,
					ZFC_ACCTS.UPDATED_DATE
				FROM
					ZFC_ACCTS,
					ZFC_SECURITY_ACCTS_RLS,
					ZFC_SECURITY_RLS_SE,
					ZFC_SECURITY_RLS
				WHERE
					ZFC_SECURITY_ACCTS_RLS.ACCT_SEQ_ID = ZFC_ACCTS.ACCT_SEQ_ID
					AND ZFC_SECURITY_ACCTS_RLS.RLS_SE_SEQ_ID = ZFC_SECURITY_RLS_SE.RLS_SE_SEQ_ID
					AND ZFC_SECURITY_RLS_SE.SE_SEQ_ID IN (SELECT SE_SEQ_ID FROM dbo.ZFF_GET_SE_PARENTS(1,@P_SE_SEQ_ID))
					AND ZFC_SECURITY_RLS_SE.ROLE_SEQ_ID = ZFC_SECURITY_RLS.ROLE_SEQ_ID
				UNION
				SELECT -- Roles via groups
					ZFC_ACCTS.ACCT_SEQ_ID,
					ZFC_ACCTS.ACCT,
					ZFC_ACCTS.EMAIL,
					ZFC_ACCTS.ENABLE_NOTIFICATIONS,
					ZFC_ACCTS.IS_SYSTEM_ADMIN,
					ZFC_ACCTS.STATUS_SEQ_ID,
					ZFC_ACCTS.PWD,
					ZFC_ACCTS.FAILED_ATTEMPTS,
					ZFC_ACCTS.FIRST_NAME,
					ZFC_ACCTS.LAST_LOGIN,
					ZFC_ACCTS.LAST_NAME,
					ZFC_ACCTS.LOCATION,
					ZFC_ACCTS.MIDDLE_NAME,
					ZFC_ACCTS.PREFERED_NAME,
					ZFC_ACCTS.TIME_ZONE,
					ZFC_ACCTS.ADDED_BY,
					ZFC_ACCTS.ADDED_DATE,
					ZFC_ACCTS.UPDATED_BY,
					ZFC_ACCTS.UPDATED_DATE
				FROM
					ZFC_ACCTS,
					ZFC_SECURITY_ACCTS_GRPS,
					ZFC_SECURITY_GRPS_SE,
					ZFC_SECURITY_GRPS_RLS,
					ZFC_SECURITY_RLS_SE,
					ZFC_SECURITY_RLS
				WHERE
					ZFC_SECURITY_ACCTS_GRPS.ACCT_SEQ_ID = ZFC_ACCTS.ACCT_SEQ_ID
					AND ZFC_SECURITY_GRPS_SE.SE_SEQ_ID IN (SELECT SE_SEQ_ID FROM dbo.ZFF_GET_SE_PARENTS(1,@P_SE_SEQ_ID))
					AND ZFC_SECURITY_GRPS_SE.GRPS_SE_SEQ_ID = ZFC_SECURITY_GRPS_RLS.GRPS_SE_SEQ_ID
					AND ZFC_SECURITY_RLS_SE.RLS_SE_SEQ_ID = ZFC_SECURITY_GRPS_RLS.RLS_SE_SEQ_ID
					AND ZFC_SECURITY_RLS_SE.ROLE_SEQ_ID = ZFC_SECURITY_RLS.ROLE_SEQ_ID
				
				SELECT DISTINCT * FROM @V_Accounts
			END
		-- END IF
	END
ELSE
	SET NOCOUNT ON
	-- SELECT an existing row from the table.
	SELECT
		[ACCT_SEQ_ID],
		[STATUS_SEQ_ID],
		[ACCT],
		[FIRST_NAME],
		[LAST_NAME],
		[MIDDLE_NAME],
		[PREFERED_NAME],
		[EMAIL],
		[PASSWORD_LAST_SET],
		[PWD],
		[FAILED_ATTEMPTS],
		[IS_SYSTEM_ADMIN],
		[ADDED_BY],
		[ADDED_DATE],
		[LAST_LOGIN],
		[TIME_ZONE],
		[LOCATION],
		[ENABLE_NOTIFICATIONS],
		[UPDATED_BY],
		[UPDATED_DATE]
	FROM [dbo].[ZFC_ACCTS]
	WHERE
		[ACCT] = @P_ACCOUNT
-- END IF
-- Get the Error Code for the statement just executed.
SELECT @P_ErrorCode=@@ERROR
