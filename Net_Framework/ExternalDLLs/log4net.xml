<?xml version="1.0"?>
<doc>
    <assembly>
        <name>log4net</name>
    </assembly>
    <members>
        <member name="T:log4net.helpers.PatternConverter">
            <summary>
            PatternConverter is an abtract class that provides the
            formatting functionality that derived classes need.
            </summary>
            <remarks>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </remarks>
        </member>
        <member name="M:log4net.helpers.PatternConverter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternConverter.#ctor(log4net.helpers.FormattingInfo)">
            <summary>
            Construct the pattern converter using a formatting info object
            </summary>
            <param name="fi">the formatting info object to use</param>
        </member>
        <member name="M:log4net.helpers.PatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="loggingEvent"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.helpers.PatternConverter.Format(System.Text.StringBuilder,log4net.spi.LoggingEvent)">
            <summary>
            A template method for formatting in a converter specific way.
            </summary>
            <param name="sbuf"></param>
            <param name="e"></param>
        </member>
        <member name="M:log4net.helpers.PatternConverter.SpacePad(System.Text.StringBuilder,System.Int32)">
            <summary>
            Fast space padding method.
            </summary>
            <param name="sbuf"></param>
            <param name="length"></param>
        </member>
        <member name="P:log4net.helpers.PatternConverter.Next">
            <summary>
            the next patter converter in the chain
            </summary>
        </member>
        <member name="T:log4net.helpers.OnlyOnceErrorHandler">
            <summary>
            The <c>OnlyOnceErrorHandler</c> implements log4net's default
            error handling policy which consists of emitting a message for the
            first error in an appender and ignoring all following errors.
            </summary>
            <remarks>
            <para>The error message is printed on <see cref="P:System.Console.Error"/>. </para>
            
            <para>This policy aims at protecting an otherwise working application
            from being flooded with error messages when logging fails.</para>
            </remarks>
        </member>
        <member name="T:log4net.spi.IErrorHandler">
            <summary>
            Appenders may delegate their error handling to ErrorHandlers.
            </summary>
            <remarks>
            Error handling is a particularly tedious to get right because by
            definition errors are hard to predict and to reproduce. 
            </remarks>
        </member>
        <member name="M:log4net.spi.IErrorHandler.Error(System.String,System.Exception,log4net.spi.ErrorCodes)">
            <summary>
            This method should handle the error. Information about the error
            condition is passed a parameter.
            </summary>
            <param name="message">The message assoicated with the error</param>
            <param name="e">The Exption that was thrown when the error occured</param>
            <param name="errorCode">The error code associated with the error</param>
        </member>
        <member name="M:log4net.spi.IErrorHandler.Error(System.String)">
            <summary>
            This method prints the error message passed as a parameter.
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:log4net.helpers.OnlyOnceErrorHandler.m_firstTime">
            <summary>
            Flag to indicate if it is the first error
            </summary>
        </member>
        <member name="M:log4net.helpers.OnlyOnceErrorHandler.Error(System.String,System.Exception,log4net.spi.ErrorCodes)">
            <summary>
            Prints the message and the stack trace of the exception on <see cref="P:System.Console.Error"/>
            </summary>
            <param name="message">the error message</param>
            <param name="e">the exception</param>
            <param name="errorCode">the internal error code</param>
        </member>
        <member name="M:log4net.helpers.OnlyOnceErrorHandler.Error(System.String)">
            <summary>
            Print a the error message passed as parameter on <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="message">the error message</param>
        </member>
        <member name="T:log4net.Filter.IFilter">
            <summary>
            Users should implement this interface to implement customized logging
            event filtering.
            </summary>
            <remarks>
            <para>Users should implement this interface to implement customized logging
            event filtering. Note that <see cref="T:log4net.Category"/> and 
            <see cref="T:log4net.Appender.AppenderSkeleton"/>, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.</para>
            
            <para>This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.IFilter.Decide(log4net.spi.LoggingEvent)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.</para>
            
            <para>The <see cref="M:log4net.Filter.IFilter.Decide(log4net.spi.LoggingEvent)"/> method must return one
            of the integer constants <c>DENY</c>, <c>NEUTRAL</c> or <c>ACCEPT</c>.</para>
            
            <para>If the value <c>DENY</c> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters. </para>
            
            <para>If the value <c>NEUTRAL</c> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behaviour is to log all logging events.</para>
            
            <para>If the value <c>ACCEPT</c> is returned, then the log
            event is logged without consulting the remaining filters. </para>
            
            <para>The philosophy of log4net filters is largely inspired from the
            Linux ipchains. </para>
            </remarks>
        </member>
        <member name="T:log4net.spi.IOptionHandler">
            <summary>
            A string based interface to configure package components.
            </summary>
        </member>
        <member name="M:log4net.spi.IOptionHandler.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to option setters.
            </summary>
            <remarks>
            This allows to defer activiation of the options until all
            options have been set. This is required for components which have
            related options that remain ambigous until all are set.
            </remarks>
        </member>
        <member name="M:log4net.Filter.IFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
            <remarks>
            <para>If the decision is <c>DENY</c>, then the event will be
            dropped. If the decision is <c>NEUTRAL</c>, then the next
            filter, if any, will be invoked. If the decision is <c>ACCEPT</c> then
            the event will be logged without consulting with other filters in
            the chain.</para>
            </remarks>
            <param name="loggingEvent">The LoggingEvent to decide upon</param>
            <returns>The decision of the filter</returns>
        </member>
        <member name="P:log4net.Filter.IFilter.Next">
            <summary>
            Property to get and set the next filter in the filter
            chain of responsability.
            </summary>
        </member>
        <member name="T:log4net.spi.LoggingEvent">
            <summary>
            The internal representation of logging events. 
            </summary>
            <remarks>
            <para>When an affirmative
            decision is made to log then a <c>LoggingEvent</c> instance
            is created. This instance is passed around to the different log4net
            components.</para>
            <para>This class is of concern to those wishing to extend log4net.</para>
            </remarks>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_fqnOfCategoryClass">
            <summary>
            Fully qualified name of the calling category class.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_category">
            <summary>
            The category of the logging event. The category field is not
            serialized for performance reasons.
            It is set by the LoggingEvent constructor or set by a remote
            entity after deserialization.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_categoryName">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_priority">
            <summary>
            Priority of logging event. Priority cannot be serializable
            because it is a flyweight.  Due to its special seralization it
            cannot be declared final either.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_ndc">
            <summary>
            The nested diagnostic context (NDC) of logging event.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_ndcLookupRequired">
            <summary>
            Have we tried to do an NDC lookup? If we did, there is no need
            to do it again.  Note that its value is always false when
            serialized. Thus, a receiving SocketNode will never use it's own
            (incorrect) NDC. See also writeObject method.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_message">
            <summary>
            The application supplied message of logging event.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_renderedMessage">
            <summary>
            The application supplied message rendered through 
            the log4net object rendering mechanism.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_threadName">
            <summary>
            The name of thread in which this logging event was generated
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_stackTraceInfo">
            <summary>
            This variable contains information about this event's throwable 
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_timeStamp">
            <summary>
            The number of milliseconds elapsed from 1/1/1970 until logging event was created.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_locationInfo">
            <summary>
            Location information for the caller.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_WindowsIdentityName">
            <summary>
            String representation of the user's windows name,
            like DOMAIN\username
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_thrownException">
            <summary>
            Hold the exception thown if nessasary
            </summary>
        </member>
        <member name="M:log4net.spi.LoggingEvent.#ctor(System.String,log4net.Category,log4net.Priority,System.Object,System.Exception)">
            <summary>
            Instantiate a LoggingEvent from the supplied parameters.
            </summary>
            <remarks>
            Except <see cref="F:log4net.spi.LoggingEvent.m_timeStamp"/> all the other fields of
            <c>LoggingEvent</c> are filled when actually needed.
            </remarks>
            <param name="fqnOfCategoryClass"></param>
            <param name="category">The category of this event</param>
            <param name="priority">The priority of this event</param>
            <param name="message">The message of this event</param>
            <param name="throwable">The throwable of this event</param>
        </member>
        <member name="M:log4net.spi.LoggingEvent.LookupMappedContext(System.String)">
            <summary>
            Lookup the kep specified in the MDC
            </summary>
            <param name="key">the key to lookup</param>
            <returns>the value associated with the key, or null if the key was not found</returns>
        </member>
        <member name="M:log4net.spi.LoggingEvent.GetExceptionStrRep">
            <summary>
            Return this event's exception's string[] representaion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.spi.LoggingEvent.ExceptionToString(System.Exception)">
            <summary>
            Convert an Exception to a string
            </summary>
            <param name="ex">the exception to convert to a string</param>
            <returns>the string representation of the exception</returns>
            <remarks>
            Similar to the Exception.ToString() method, but recursivly 
            inspects the inner exceptions
            </remarks>
        </member>
        <member name="P:log4net.spi.LoggingEvent.Priority">
            <summary>
            The Priority of the logging event
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.TimeStamp">
            <summary>
            The time of the event
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.CategoryName">
            <summary>
            The name of the category that logged the event
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.LocationInformation">
            <summary>
            Set the location information for this logging event. The collected
            information is cached for future use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.Message">
            <summary>
            Return the message for this logging event.
            </summary>
            <remarks>
            Before serialization, the returned object is the message
            passed by the user to generate the logging event. After
            serialization, the returned value equals the String form of the
            message possibly after object rendering. 
            </remarks>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.NestedContext">
            <summary>
            Get the NDC
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.RenderedMessage">
            <summary>
            Get the message (rendered through the Layouts)
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.StartTime">
            <summary>
            Returns the time when the application started, in milliseconds elapsed since 01.01.1970.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.ThreadName">
            <summary>
            Get the name of the current thread.  Returns the thread ID
            when the name is not available
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.WindowsIdentityName">
            <summary>
            Returns the identity of the current user.
            
            To improve performance, we could 
            cache the string representation of the name, and reuse that
            as long as the identity stayed constant.  Once the identity changed,
            we would need to re-assign and re-render the string.
            
            However, the GetCurrent call seems to return different objects
            every time...so the current implementation doesn't do this type
            of caching.
            
            Timing for these operations:
            
            00:00:00.2031250 sec, 10000 loops, WindowsIdentity.GetCurrent()
            00:00:08.0468750 sec, 10000 loops, WindowsIdentity.GetCurrent().Name.ToString()
            
            So we could speed things up almost 40 times by caching the ToString 
            operation, since the .Name.ToString() takes (8.04-0.20)=7.84375 sec
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.ThrowableInformation">
            <summary>
            Returns the throwable information contained within this
            event. May be <c>null</c> if there is no such information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.CategoryCreationEventHandler">
            <summary>
            Delegate used to handle category creation event notifications
            </summary>
            <param name="h">The Hierarchy in which the event handler is registered</param>
            <param name="cat">The category that has been created</param>
            <remarks>
            Delegate used to handle category creation event notifications
            </remarks>
        </member>
        <member name="T:log4net.Hierarchy">
            <summary>
            This class is specialized in retrieving categories by name and
            also maintaining the category hierarchy.
            </summary>
            <remarks>
            <para><i>The casual user should not have to deal with this class
            directly.</i> In fact, up until version 0.9.0, this class had
            default package access. However, if you are in an environment where
            multiple applications run in the same VM, then read on.</para>
            
            <para>The structure of the category hierarchy is maintained by the
            <see cref="M:log4net.Hierarchy.GetInstance(System.String)"/> method. The hierarchy is such that children
            link to their parent but parents do not have any pointers to their
            children. Moreover, categories can be instantiated in any order, in
            particular descendant before ancestor.</para>
            
            <para>In case a descendant is created before a particular ancestor,
            then it creates a provision node for the ancestor and adds itself
            to the provision node. Other descendants of the same ancestor add
            themselves to the previously created provision node.</para>
            </remarks>
        </member>
        <member name="M:log4net.Hierarchy.#ctor(log4net.Category)">
            <summary>
            Create a new Category hierarchy.
            </summary>
            <param name="root">The root of the new hierarchy</param>
        </member>
        <member name="M:log4net.Hierarchy.AddRenderer(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Add an object renderer for a specific class. 
            </summary>
            <param name="classToRender">The type that will be rendered by the renderer supplied</param>
            <param name="or">The object renderer used to render the object</param>
        </member>
        <member name="M:log4net.Hierarchy.Clear">
            <summary>
            Clear all category definitions from the internal hashtable
            </summary>
            <remarks>
            This call will clear all category definitions from the internal
            hashtable. Invoking this method will irrevocably mess up the
            category hierarchy.
            
            <para>You should <b>really</b> know what you are doing before
            invoking this method.</para>
            </remarks>
        </member>
        <member name="M:log4net.Hierarchy.Exists(System.String)">
            <summary>
            Check if the named category exists in the hierarchy. If so return
            its reference, otherwise returns <c>null</c>.
            </summary>
            <param name="name">The name of the category to lookup</param>
            <returns>The Category object with the name specified</returns>
        </member>
        <member name="M:log4net.Hierarchy.Disable(System.String)">
            <summary>
            Similar to <see cref="M:log4net.Hierarchy.Disable(log4net.Priority)"/> except that the priority
            argument is given as a String.
            </summary>
            <param name="priorityStr">The priority to disable, as a string</param>
        </member>
        <member name="M:log4net.Hierarchy.Disable(log4net.Priority)">
            <summary>
            Disable all logging requests of priority <i>equal to or
            below</i> the priority parameter <paramref name="p"/>, for
            <i>all</i> categories in this hierarchy. Logging requests of
            higher priority then <paramref name="p"/> remain unaffected.
            
            <para>The "disable" family of methods are there for speed. They
            allow printing methods such as debug, info, etc. to return
            immediately after an integer comparison without walking the
            category hierarchy. In most modern computers an integer
            comparison is measured in nanoseconds where as a category walk is
            measured in units of microseconds.</para>
            
            <para>Configurators define alternate ways of overriding the
            disable override flag.</para>
            </summary>
            <param name="p">Disable all logging requests of priority <i>equal to or below</i> the priority parameter</param>
        </member>
        <member name="M:log4net.Hierarchy.DisableAll">
            <summary>
            Disable all logging requests regardless of category and priority.
            This method is equivalent to calling <see cref="M:log4net.Hierarchy.Disable(System.String)"/> with the
            argument <see cref="F:log4net.Priority.FATAL"/>, the highest possible priority.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.DisableDebug">
            <summary>
            Disable all logging requests of priority DEBUG regardless of category.  
            This method is equivalent to calling <see cref="M:log4net.Hierarchy.Disable(System.String)"/> with the
            argument <see cref="F:log4net.Priority.DEBUG"/>, the highest possible priority.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.DisableInfo">
            <summary>
            Disable all logging requests of priority DEBUG and INFO regardless of category.  
            This method is equivalent to calling <see cref="M:log4net.Hierarchy.Disable(System.String)"/> with the
            argument <see cref="F:log4net.Priority.INFO"/>, the highest possible priority.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.EnableAll">
            <summary>
            Undoes the effect of calling any of <see cref="M:log4net.Hierarchy.Disable(System.String)"/>, <see cref="M:log4net.Hierarchy.DisableAll"/>
            <see cref="M:log4net.Hierarchy.DisableDebug"/> and <see cref="M:log4net.Hierarchy.DisableInfo"/>
            methods. More precisely, invoking this method sets the Category
            class internal variable called <c>disable</c> to its
            default "off" value.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.FireCategoryCreationEvent(log4net.Category)">
            <summary>
            Sends a category creation event to all registered listeners
            </summary>
            <param name="category">The newly created category</param>
        </member>
        <member name="M:log4net.Hierarchy.GetInstance(System.String)">
            <summary>
            Return a new category instance named as the first parameter using
            the default factory.
            
            <para>If a category of that name already exists, then it will be
            returned.  Otherwise, a new category will be instantiated and
            then linked with its existing ancestors as well as children.</para>
            </summary>
            <param name="name">The name of the category to retrieve</param>
            <returns>The category object with the name specified</returns>
        </member>
        <member name="M:log4net.Hierarchy.GetInstance(System.String,log4net.spi.ICategoryFactory)">
            <summary>
            Return a new category instance named as the first parameter using
            <paramref name="factory"/>.
            </summary>
            <remarks>
            If a category of that name already exists, then it will be
            returned. Otherwise, a new category will be instantiated by the
            <paramref name="factory"/> parameter and linked with its existing
            ancestors as well as children.
            </remarks>
            <param name="name">The name of the category to retrieve</param>
            <param name="factory">The factory that will make the new category instance</param>
            <returns>The category object with the name specified</returns>
        </member>
        <member name="M:log4net.Hierarchy.GetCurrentCategories">
            <summary>
            Returns all the currently defined categories in the default
            hierarchy as an <see cref="T:System.Collections.IEnumerator"/>.
            The root category is <b>not</b> included in the returned
            enumeration.
            </summary>
            <returns>All the defined categories</returns>
        </member>
        <member name="M:log4net.Hierarchy.OverrideAsNeeded(System.String)">
            <summary>
            Override the shipped code flag if the <paramref name="overrideStr"/>
            parameter is not null.
            </summary>
            <remarks>
            This method is intended to be used by configurators.
            <para>If the <paramref name="overrideStr"/> paramter is <c>null</c>
            then there is nothing to do. Otherwise, set
            <c>Hiearchy.disable</c> to <c>false</c> if override
            has a value other than <c>false</c>.</para>
            </remarks>
            <param name="overrideStr">String that is either <c>true</c> or <c>false</c></param>
        </member>
        <member name="M:log4net.Hierarchy.ResetConfiguration">
            <summary>
            Reset all values contained in this hierarchy instance to their
            default.  This removes all appenders from all categories, sets
            the priority of all non-root categories to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the priority
            of the root category to <see cref="F:log4net.Priority.DEBUG"/>. Moreover,
            message disabling is set its default "off" value.
            
            <para>Existing categories are not removed. They are just reset.</para>
            
            <para>This method should be used sparingly and with care as it will
            block all logging until it is completed.</para>
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.SetDisableOverride(System.String)">
            <summary>
            Set the disable override value given a string.
            </summary>
            <param name="overrideStr">String that is either 'true' or 'false'</param>
        </member>
        <member name="M:log4net.Hierarchy.Shutdown">
            <summary>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all categories including the root category.
            
            <para>Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.</para>
            
            <para>The <c>Shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a category
            and again to a nested appender.</para>
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.UpdateParents(log4net.Category)">
            <summary>
            Updates all the parents of the specified category
            </summary>
            <remarks>
            This method loops through all the <i>potential</i> parents of
            'cat'. There 3 possible cases:
            <list type="number">
            	<item>
            		<term>No entry for the potential parent of 'cat' exists</term>
            		<description>We create a ProvisionNode for this potential 
            		parent and insert 'cat' in that provision node.</description>
            	</item>
            	<item>
            		<term>There entry is of type Category for the potential parent.</term>
            		<description>The entry is 'cat's nearest existing parent. We 
            		update cat's parent field with this entry. We also break from 
            		he loop because updating our parent's parent is our parent's 
            		responsibility.</description>
            	</item>
            	<item>
            		<term>There entry is of type ProvisionNode for this potential parent.</term>
            		<description>We add 'cat' to the list of children for this 
            		potential parent.</description>
            	</item>
            </list>
            </remarks>
            <param name="cat">The category to update the parents for</param>
        </member>
        <member name="M:log4net.Hierarchy.UpdateChildren(log4net.spi.ProvisionNode,log4net.Category)">
            <summary>
            We update the links for all the children that placed themselves
            in the provision node 'pn'. The second argument 'cat' is a
            reference for the newly created Category, parent of all the
            children in 'pn'
            
            <para>We loop on all the children 'c' in 'pn':</para>
            
            	<para>If the child 'c' has been already linked to a child of
            	'cat' then there is no need to update 'c'.</para>
            
            <para>Otherwise, we set cat's parent field to c's parent and set
            c's parent field to cat.</para>
            </summary>
            <param name="pn"></param>
            <param name="cat"></param>
        </member>
        <member name="P:log4net.Hierarchy.EmittedNoAppenderWarning">
            <summary>
            Flag to indicate if we have already issued a warning
            about not having an appender warning.
            </summary>
        </member>
        <member name="P:log4net.Hierarchy.DisablePriority">
            <summary>
            Get the diable level
            </summary>
        </member>
        <member name="E:log4net.Hierarchy.CategoryCreated">
            <summary>
            Event used to notify that a category has been created.
            </summary>
        </member>
        <member name="P:log4net.Hierarchy.RendererMap">
            <value>
            RendererMap accesses the object renderer map for this hierarchy.
            </value>
        </member>
        <member name="P:log4net.Hierarchy.Root">
            <summary>
            Get the root of this hierarchy.
            </summary>
        </member>
        <member name="P:log4net.Hierarchy.CategoryFactory">
            <summary>
            Set the default CategoryFactory instance.
            </summary>
        </member>
        <member name="T:log4net.Appender.OutputDebugStringAppender">
            <summary>
            OutputDebugStringAppender appends log events to the
            OutputDebugString system.  The web.config file can be used
            to control what listeners are actually used.
            
            This class uses a StringWriter to act at
            the Writer, delegates the call to the base
            class, which generates output in the
            StringWriter's StringBuffer.  This string is 
            then passed to the Trace.Write method.
            </summary>
        </member>
        <member name="T:log4net.Appender.TextWriterAppender">
            <summary>
            An Appender that writes to a <c>TextWriter</c>.
            </summary>
        </member>
        <member name="T:log4net.Appender.AppenderSkeleton">
            <summary>
            Abstract superclass of the other appenders in the package. 
            This class provides the code for common functionality, such 
            as support for threshold filtering and support for general filters.
            </summary>
        </member>
        <member name="T:log4net.Appender.IAppender">
            <summary>
            Implement this interface for your own strategies for printing log statements.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.AddFilter(log4net.Filter.IFilter)">
            <summary>
            Add a filter to the end of the filter list.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.ClearFilters">
            <summary>
            Clear the list of filters by removing all the filters in it.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.Close">
            <summary>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc. 
            It is a programming error to append to a closed appender.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.DoAppend(log4net.spi.LoggingEvent)">
            <summary>
            Log in Appender specific way
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.IAppender.RequiresLayout">
            <summary>
            Configurators call this method to determine if the appender 
            requires a layout. If this method returns <c>true</c>, 
            meaning that layout is required, then the configurator will 
            configure an layout using the configuration information at 
            its disposal.  If this method returns <c>false</c>, 
            meaning that a layout is not required, then layout configuration 
            will be	skipped even if there is available layout configuration 
            information at the disposal of the configurator..
            
            <para>In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, 
            then the appender should return <c>true</c>.</para>
            </summary>
            <returns>test if the appender requires layout</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.Filter">
            <summary>
            Returns the head Filter. The Filters are organized in a linked list
            and so all Filters on this Appender are available through the result.
            </summary>
            <returns>the head Filter or null, if no Filters are present</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.Name">
            <summary>
            Get the name of this appender. The name uniquely identifies the	appender.
            </summary>
            <returns>the name of the appender</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.ErrorHandler">
            <summary>
            Returns the <see cref="P:log4net.Appender.IAppender.ErrorHandler"/> for this appender.
            </summary>
            <returns>The error handler used</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.Layout">
            <summary>
            Returns this appenders layout.
            </summary>
            <returns>Gets the layout to use with the appender</returns>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_layout">
            <summary>
            The layout variable does not need to be set if the appender implementation has its own layout.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_name">
            <summary>
            Appenders are named.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_threshold">
            <summary>
            There is no priority threshold filtering by default.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_errorHandler">
            <summary>
            It is assumed and enforced that errorHandler is never null.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_headFilter">
            <summary>
            The first filter in the filter chain. Set to <c>null</c> initially.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_tailFilter">
            <summary>
            The last filter in the filter chain.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_closed">
            <summary>
            Is this appender closed? 
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.spi.LoggingEvent)">
            <summary>
            Subclasses of <see cref="T:log4net.Appender.AppenderSkeleton"/> should implement this method 
            to perform actual logging. See also <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.spi.LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">the event to append</param>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Finalize">
            <summary>
            Finalize this appender by calling the imlenentation's <see cref="M:log4net.Appender.AppenderSkeleton.Close"/> method.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.GetFirstFilter">
            <summary>
            Return the first filter in the filter chain for this Appender. 
            The return value may be <c>null</c> if no is filter is set.
            </summary>
            <returns>The head filter</returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Priority)">
            <summary>
            Check whether the message priority is below the appender's 
            threshold. If there is no threshold set, then the return 
            value is always <c>true</c>.
            </summary>
            <param name="priority">Priority to test against</param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
            <summary>
            Derived appenders should override this method if option structure requires it.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
            <summary>
            Add a filter to end of the filter list.
            </summary>
            <param name="newFilter">The filter to add</param>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Close">
            <summary>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc. 
            It is a programming error to append to a closed appender.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.RequiresLayout">
            <summary>
            Tests if this appender requires an <see cref="T:log4net.Layout.ILayout">ILayout</see>
            object.
            </summary>
            <remarks>
            Configurators call this method to determine if the appender 
            requires a layout. If this method returns <c>true</c>, 
            meaning that layout is required, then the configurator will 
            configure an layout using the configuration information at 
            its disposal.  If this method returns <c>false</c>, 
            meaning that a layout is not required, then layout configuration 
            will be	skipped even if there is available layout configuration 
            information at the disposal of the configurator..
            
            <para>In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, then 
            the appender should return <c>true</c>.</para>
            </remarks>
            <returns>test if the appender requires layout</returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ClearFilters">
            <summary>
            Clear the filters chain
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.spi.LoggingEvent)">
            <summary>
            This method performs threshold checks and invokes filters 
            before delegating actual logging to the subclasses specific 
            <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.spi.LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Threshold">
            <summary>
            Set the threshold priority. All log events with lower priority
            than the threshold priority are ignored by the appender.
            </summary>
            <remarks>
            <para>In configuration files this option is specified by setting the
            value of the <b>Threshold</b> option to a priority
            string, such as "DEBUG", "INFO" and so on.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.ErrorHandler">
            <summary>
            Return the currently set <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler"/> for this Appender.  
            </summary>
            <returns>the error hanlder used by this appender</returns>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Filter">
            <summary>
            Returns the head Filter.
            </summary>
            <returns>the filter (chain) used by this appender</returns>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Layout">
            <summary>
            Returns the layout of this appender. The value may be null.
            </summary>
            <returns>the layout used by this appender</returns>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Name">
            <summary>
            Returns the name of this Appender.
            </summary>
            <returns>the unique name of the appender</returns>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
            Immediate
            flush is slower but ensures that each append request is actually
            written. If <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush"/> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            
            <para>The <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush"/> variable is set to
            <c>true</c> by default.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_qtw">
            <summary>
            This is the <see cref="T:log4net.helpers.QuietTextWriter"/> where we will write to. 
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor">
            <summary>
            This default constructor does nothing
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.Stream)">
            <summary>
            Instantiate a TextWriterAppender and set the output destination 
            to a new <see cref="T:System.IO.StreamWriter"/> initialized with <paramref name="os"/>
            as its <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="layout">The layout to use with this appender</param>
            <param name="os">The Stream to output to</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.TextWriter)">
            <summary>
            Instantiate a TextWriterAppender and set the output 
            destination to <paramref name="writer"/>.
            <para>The <paramref name="writer"/> must have been previously opened by the user.</para>
            </summary>
            <param name="layout">The layout to use with this appender</param>
            <param name="writer">The TextWriter to output to</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.ActivateOptions">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.spi.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.spi.LoggingEvent)"/>
            method. 
            
            <para>If the output stream exists and is writable then write a log
            statement to the output stream. Otherwise, write a single warning
            message to <see cref="P:System.Console.Error"/>.</para>
            
            <para>The format of the output will depend on this appender's
            layout.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Close">
            <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            <para>Closed appenders cannot be reused</para>
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.RequiresLayout">
            <summary>
            The WriterAppender requires a layout. Hence, this method returns <c>true</c>.
            </summary>
            <returns>true because this appender requires a layout</returns>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.CheckEntryConditions">
            <summary>
            This method determines if there is a sense in attempting to append.
            
            <para>It checks whether there is a set output target and also if
            there is a set layout. If these checks fail, then the boolean
            value <c>false</c> is returned. </para>
            </summary>
            <returns>returns false if any of the preconditiond fail</returns>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.CloseWriter">
            <summary>
            Close the underlying <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Reset">
            <summary>
            Clear internal references to the writer and other variables.
            Subclasses can override this method for an alternate closing behavior.
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteFooter">
            <summary>
            Write a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> method.
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteHeader">
            <summary>
            Write a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> method.
            </summary>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ErrorHandler">
            <summary>
            The <see cref="T:log4net.spi.IErrorHandler"/> for this Appender and also the underlying <see cref="T:log4net.helpers.QuietTextWriter"/> if any. 
            </summary>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ImmediateFlush">
            <summary>
            If the <b>ImmediateFlush</b> option is set to
            <c>true</c>, the appender will flush at the end of each
            write.
            </summary>
            <remarks>
            This is the default behavior. If the option is set to
            <c>false</c>, then the underlying stream can defer writing
            to physical medium to a later time. 
            
            <para>Avoiding the flush operation at the end of each append results in
            a performance gain of 10 to 20 percent. However, there is safety
            tradeoff involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.Writer">
            <summary>
            <para>Sets the Writer where the log output will go. The
            specified Writer must be opened by the user and be
            writable.</para>
            
            <para>The <see cref="T:System.IO.TextWriter"/> will be closed when the
            appender instance is closed.</para>
            
            <para><b>WARNING:</b> Logging to an unopened Writer will fail.</para>
            </summary>
        </member>
        <member name="F:log4net.Appender.OutputDebugStringAppender.m_writer">
            <summary>
            Buffer used to build up the outlup message
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.CloseWriter">
            <summary>
            Override the parent method to close the default trace channel
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.OutputDebugString(System.String)">
            <summary>
            Stub for OutputDebugString native mathod
            </summary>
            <param name="lpOutputString">the string to output</param>
        </member>
        <member name="T:log4net.ObjectRenderer.IObjectRenderer">
            <summary>
            Implement this interface in order to render objects as strings
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.IObjectRenderer.DoRender(System.Object)">
            <summary>
            Render the object passed as parameter as a String
            </summary>
            <param name="obj">Object to render</param>
            <returns>the object rendered as a string</returns>
        </member>
        <member name="T:log4net.LogManager">
            <summary>
            This is the class used by client applications to bind to logger
            instances.
            </summary>
            <remarks>
            See the <see cref="T:log4net.ILog"/> interface for more details.
            </remarks>
            <example>Simple example of logging messages
            <code>
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <seealso cref="T:log4net.ILog"/>
        </member>
        <member name="F:log4net.LogManager.s_defaultHierarchy">
            <summary>
            The hierarchy where loggers are attached to by default.
            </summary>
            <remarks>
            The hierarchy where loggers are attached to by default.
            </remarks>
        </member>
        <member name="M:log4net.LogManager.#ctor">
            <summary>
            Private constructor to prevent instances. Only static methods should be used.
            </summary>
        </member>
        <member name="M:log4net.LogManager.Exists(System.String)">
            <summary>
            If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </summary>
            <remarks>
            If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </remarks>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String)">
            <summary>
            Retrieve or create a named logger.
            </summary>
            <remarks>
            Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be reutrned. Otherwise, a new instance is
            created.
            <para>By default, loggers do not have a set priority but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            </remarks>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualifed name of the type specified.
            </remarks>
            <param name="clazz">The full name of <c>clazz</c> will 
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String,log4net.spi.ICategoryFactory)">
            <summary>
            Like <see cref="M:log4net.LogManager.GetLogger(System.String)"/> except that the type of logger
            instantiated depends on the type returned by the 
            <see cref="M:log4net.spi.ICategoryFactory.MakeNewCategoryInstance(System.String)"/>
            method of the <paramref name="factory"/> parameter.
            </summary>
            <remarks>
            This method is intended to be used by sub-classes.
            </remarks>
            <param name="name">The name of the logger to retrieve</param>
            <param name="factory">A <see cref="T:log4net.spi.ICategoryFactory"/> implementation 
            that will actually create a new Instance.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:log4net.LogManager.Shutdown">
            <summary>
            Shutdown the log4net system.
            </summary>
            <remarks>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            default hierachy.
            
            <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.</para>
            
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.</para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration">
            <summary>
            Reset all values contained in this hierarchy instance to their defaults.
            </summary>
            <remarks>
            Reset all values contained in this hierarchy instance to their
            defaults.  This removes all appenders from all categories, sets
            the priority of all non-root categories to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the priority
            of the root logger to <see cref="F:log4net.Priority.DEBUG"/>. Moreover,
            message disabling is set its default "off" value.		
            </remarks>
        </member>
        <member name="P:log4net.LogManager.CurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the default
            hierarchy as an <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <value>
            An enumeration of the loggers defined.
            </value>
            <remarks>
            The root logger is <b>not</b> included in the returned
            enumeration.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="P:log4net.LogManager.LoggerRepository">
            <summary>
            Return the default Hierarchy instance.
            </summary>
            <value>
            the default Hierarchy instance
            </value>
            <remarks>
            the default Hierarchy instance
            </remarks>
        </member>
        <member name="P:log4net.LogManager.Root">
            <summary>
            Return the root of the default logger hierrachy.
            </summary>
            <value>
            the root of the default logger hierrachy
            </value>
            <remarks>
            The root logger is always instantiated and available. It's
            name is "root".
            
            <para>Nevertheless, calling <c>LogManager.GetLogger("root")</c>
            does not retrieve the root logger but a logger just under root 
            named "root".</para>
            </remarks>
        </member>
        <member name="T:log4net.DateFormatter.IDateFormatter">
            <summary>
            Interface to abstract the rendering of a <see cref="T:System.DateTime"/>
            instance into a string.
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Format the date specifed as a string
            </summary>
            <param name="date">the date to format</param>
            <param name="buf">the string builder to write to</param>
            <returns>the string builder passed</returns>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender">
            <summary>
            Appender that rolls log files based on size or date or both
            </summary>
            <remarks>
            <para>RollingFileAppender can function as either or and do both
            at the same time (making size based rolling files until a data/time 
            boundary is crossed at which time it rolls all of those files
            based on the setting for <see cref="F:log4net.Appender.RollingFileAppender.m_rollingStyle"/>.</para>
            
            <para>
            A of few additional optional features have been added:
            -- Attach date pattern for current log file <see cref="F:log4net.Appender.RollingFileAppender.m_staticLogFileName"/>
            -- Backup number increments for newer files <see cref="F:log4net.Appender.RollingFileAppender.m_countDirection"/>
            -- Infinite number of backups by file size <see cref="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups"/>
            </para>
            <para>A few notes and warnings:  For large or infinite number of backups
            countDirection &gt; 0 is highly recommended, with staticLogFileName = false if
            time based rolling is also used -- this will reduce the number of file renamings
            to few or none.  Changing staticLogFileName or countDirection without clearing
            the directory could have nasty side effects.  If Date/Time based rolling
            is enabled, CompositeRollingAppender will attempt to roll existing files
            in the directory without a date/time tag based on the last modified date
            of the base log files last modification.</para>
            <para>A maximum number of backups based on date/time boundries would be nice
            but is not yet implemented.</para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.FileAppender">
            <summary>
            FileAppender appends log events to a file. 
            </summary>
            <remarks>
            Logging events are sent to the file specified.
            The file can be opened in either append or
            overwite modes.
            </remarks>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_appendToFile">
            <summary>
            Flag to indicate if we should append to the file
            or overwite the file. The default is to append
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_fileName">
            <summary>
            The name of the log file.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <param name="append">flag to indicate if the file should be appended to</param>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
        </member>
        <member name="M:log4net.Appender.FileAppender.ActivateOptions">
            <summary>
            Activate the options on the file appender. This will
            case the file to be opened.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.Reset">
            <summary>
            Close any previously opened file and call the parent's <c>Reset</c>
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.CloseFile">
            <summary>
            Closes the previously opened file.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will
            go. The specified file must be writable.
            </summary>
            <remarks>
            If there was already an opened file, then the previous file
            is closed first.
            </remarks>
            <param name="fileName">The path to the log file</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
        </member>
        <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overriden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="P:log4net.Appender.FileAppender.File">
            <summary>
            File is the full path to the file that logging will be written to
            </summary>
        </member>
        <member name="P:log4net.Appender.FileAppender.AppendToFile">
            <summary>
            AppendToFile is a flag that indicates weather the file should be
            appended to or overwitten. If the value is set to false then the
            file will be overwitten. If it is set to true then the file will
            be appended to. The default value is true.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_datePattern">
            <summary>
            The date pattern. By default, the pattern is set to ".yyyy-MM-dd" meaning daily rollover.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_scheduledFilename">
            <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_nextCheck">
            <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_now">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollPoint">
            <summary>
            The type of rolling done
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups">
            <summary>
            There is zero backup files by default
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_curSizeRollBackups">
            <summary>
            How many sized based backups have been made so far
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxTimeRollBackups">
            <summary>
            not yet implemented
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_curTimeRollBackups">
            <summary>
            not yet implemented
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_countDirection">
            <summary>
            By default newer files have lower numbers
            </summary>
            <remarks>
            By default newer files have lower numbers. (countDirection &lt; 0)
            ie. log.1 is most recent, log.5 is the 5th backup, etc...
            countDirection &gt; 0 does the opposite ie.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use countDirection &gt; 0 to reduce rollOver costs.
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollingStyle">
            <summary>
            The rolling mode used in this appender
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollDate">
            <summary>
            Cache flag set if we are rolling by date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollSize">
            <summary>
            Cache flag set if we are rolling by size
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_staticLogFileName">
            <summary>
            Flag to indicate if we always log to the same file
            </summary>
            <remarks>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formated datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup) This will make time based roll
            overs with a large number of backups much faster -- it won't have to
            rename all the backups!
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_baseFileName">
            <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor">
            <summary>
            The default constructor does nothing
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String,System.String)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the
            file designated by <paramref name="filename"/>. The opened filename will
            become the ouput destination for this appender.
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
            <param name="datePattern"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the file designated by
            <paramref name="filename"/>. The opened filename will become the ouput
            destination for this appender.
            
            <para>If the <paramref name="append"/> parameter is true, the file will be
            appended to. Otherwise, the file desginated by
            <paramref name="filename"/> will be truncated before being opened.</para>
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
            <param name="append"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String,System.String,System.Boolean)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the file designated by
            <paramref name="filename"/>. The opened filename will become the ouput
            destination for this appender.
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
            <param name="datePattern"></param>
            <param name="append"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the file designated by
            <paramref name="filename"/>. The opened filename will become the output
            destination for this appender.
            
            <para>The file will be appended to.  DatePattern is default.</para>
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overriden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Handles append time behavior for CompositeRollingAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Creates and opens the file for logging.  If <see cref="F:log4net.Appender.RollingFileAppender.m_staticLogFileName"/>
            is false then the fully qualified name is determined and used.
            </summary>
            <param name="fileName">the name of the file to open</param>
            <param name="append">true to append to existing file</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ExistingInit">
            <summary>
            <para>Initializes based on exisiting conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/>.
            The following is done:</para>
            	A) determine curSizeRollBackups (only within the current rollpoint)
            	B) determine curTimeRollBackups (not implemented)
            	C) initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
            <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0 ) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
            <param name="sBaseFile"></param>
            <param name="curFileName"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
            <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
            <param name="sBaseFile"></param>
            <param name="arrFiles"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ComputeCheckPeriod">
            <summary>
            Calculates the RollPoint for the m_datePattern supplied.
            </summary>
            <returns>The RollPoint that is most acurate for the date pattern supplied</returns>
            <remarks>
            Essentially the date pattern is examined to determine what the
            most sutable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected whould be
            and hourly roll point as minutes could not be detected.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ActivateOptions">
            <summary>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:log4net.Appender.RollingFileAppender.ExistingInit"/> to initialize
            the current number of backups.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverTime">
            <summary>
            Rollover the file(s) to date/time tagged file(s).
            Opens the new file (through setFile) and resets curSizeRollBackups.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollFile(System.String,System.String)">
            <summary>
            Renames file <paramref name="from"/> to file <paramref name="to"/>.  It
            also checks for existence of target file and deletes if it does.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.DeleteFile(System.String)">
            <summary>
            Delete's the specified file if it exists
            </summary>
            <param name="fileName">the file name to delete</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverSize">
            <summary>
            Implements roll overs base on file size.
            </summary>
            <remarks>
            <para>If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- it's index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}.	 Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.</para>
            
            A new file is created to receive further log output.
            
            <para>If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.</para>
            
            <para>If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime)">
            <summary>
            Roll on to the next interval after the date passed
            </summary>
            <param name="currentDateTime">the current date</param>
            <returns>the next roll point an interval after the currentDateTime date</returns>
            <remarks>
            Advances the date to the next roll point after the 
            currentDateTime date passed to the method.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime,log4net.Appender.RollingFileAppender.RollPoint)">
            <summary>
            Roll on to the next interval after the date passed
            </summary>
            <param name="currentDateTime">the current date</param>
            <param name="rollPoint">the type of roll point we are working with</param>
            <returns>the next roll point an interval after the currentDateTime date</returns>
            <remarks>
            Advances the date to the next roll point after the 
            currentDateTime date passed to the method.
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.DatePattern">
            <summary>
            The <b>DatePattern</b> takes a string in the same format as
            expected by <see cref="T:log4net.DateFormatter.SimpleDateFormatter"/>. This options determines the
            rollover schedule.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Returns the value of the <b>maxSizeRollBackups</b> option.
            </summary>
            <remarks>
            <para>The <b>MaxSizeRollBackups</b> option determines how many backup
            files are kept before the oldest is erased. This option takes
            an integer value. If set to zero, then there will be no
            backup files and the log file will be truncated when it reaches
            <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize"/>.  If a negative number is supplied then
            no deletions will be made.  Note that this could result in
            very slow performance as a large number of files are rolled over unless
            <see cref="P:log4net.Appender.RollingFileAppender.CountDirection"/> up is used.</para>
            
            <para>The maximum applys to <b>each</b> time based group of files and <b>not</b> the total.
            Using a daily roll the maximum total files would be <c>(#days run) * (maxSizeRollBackups)</c>
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxFileSize">
            <summary>
            Get the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            <para>This method is equivalent to <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize"/> except
            that it is required for differentiating the setter taking a
            <c>long</c> argument from the setter taking a
            <c>String</c> argument.</para>
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaximumFileSize">
            <summary>
            Set the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            
            <para>In configuration files, the <b>MaxFileSize</b> option takes an
            long integer in the range 0 - 2^63. You can specify the value
            with the suffixes "KB", "MB" or "GB" so that the integer is
            interpreted being expressed respectively in kilobytes, megabytes
            or gigabytes. For example, the value "10KB" will be interpreted
            as 10240.</para>
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.File">
            <summary>
            Set the file name to use as the log file
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.CountDirection">
            <summary>
            Number rolling file count direction. Either positive or negative.
            Indicates if the current file is the lowest numberd file or the
            highest numbered file.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.RollingStyle">
            <summary>
            Set the rolling style
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.StaticLogFileName">
            <summary>
            Set the m_staticLogFileName flag
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollPoint">
            <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_TROUBLE">
            <summary>
            Roll the log not based on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_MINUTE">
            <summary>
            Roll the log for each minute
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_HOUR">
            <summary>
            Roll the log for each hour
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.HALF_DAY">
            <summary>
            Roll the log twice a day (midday and midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_DAY">
            <summary>
            Roll the log each day (midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_WEEK">
            <summary>
            Roll the log each week
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_MONTH">
            <summary>
            Roll the log each month
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollingMode">
            <summary>
            Style of rolling to use
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Size">
            <summary>
            Roll files based only on the size of the file
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Date">
            <summary>
            Roll files based only on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Composite">
            <summary>
            Roll files based on both the size and date of the file
            </summary>
        </member>
        <member name="T:log4net.spi.ITriggeringEventEvaluator">
            <summary>
            Implementions of this interface allow certain appenders to decide
            when to perform an appender specific action.
            </summary>
        </member>
        <member name="M:log4net.spi.ITriggeringEventEvaluator.IsTriggeringEvent(log4net.spi.LoggingEvent)">
            <summary>
            Is this the triggering event?
            </summary>
            <param name="loggingEvent">The event to chech</param>
            <returns>true if this event triggers the action</returns>
        </member>
        <member name="T:log4net.spi.IAppenderAttachable">
            <summary>
            Interface for attaching appenders to objects.
            </summary>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Add an appender.
            </summary>
            <param name="newAppender"></param>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.GetAllAppenders">
            <summary>
            Get all previously added appenders as an Enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.GetAppender(System.String)">
            <summary>
            Get an appender by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.RemoveAllAppenders">
            <summary>
            Remove all previously added appenders.
            </summary>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter from the list of appenders.
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.RemoveAppender(System.String)">
            <summary>
            Remove the appender with the name passed as parameter from the list of appenders.  
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:log4net.spi.ErrorCodes">
            <summary>
            Defined error codes that can be passed to the <see cref="M:log4net.spi.IErrorHandler.Error(System.String,System.Exception,log4net.spi.ErrorCodes)"/> method.
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.GENERIC_FAILURE">
            <summary>
            A general error
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.WRITE_FAILURE">
            <summary>
            Error while writing output
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.FLUSH_FAILURE">
            <summary>
            Failed to flush file
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.CLOSE_FAILURE">
            <summary>
            Failed to close file
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.FILE_OPEN_FAILURE">
            <summary>
            Unable to open output file
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.MISSING_LAYOUT">
            <summary>
            No layout specified
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.ADDRESS_PARSE_FAILURE">
            <summary>
            Failed to parse address
            </summary>
        </member>
        <member name="T:log4net.spi.LocationInfo">
            <summary>
            The internal representation of caller location information.
            </summary>
        </member>
        <member name="F:log4net.spi.LocationInfo.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="M:log4net.spi.LocationInfo.#ctor(System.String)">
            <summary>
            Instantiate location information based on the current thread
            </summary>
            <param name="fqnOfCallingClass"></param>
        </member>
        <member name="P:log4net.spi.LocationInfo.ClassName">
            <summary>
            Return the fully qualified class name of the caller making the logging request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.FileName">
            <summary>
            Return the file name of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.LineNumber">
            <summary>
            Returns the line number of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.MethodName">
            <summary>
            Returns the method name of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.FullInfo">
            <summary>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.helpers.AppenderAttachedImpl">
            <summary>
            A straightforward implementation of the <see cref="T:log4net.spi.IAppenderAttachable"/> interface.
            </summary>
        </member>
        <member name="F:log4net.helpers.AppenderAttachedImpl.m_appenderList">
            <summary>
            Array of appenders
            </summary>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.spi.LoggingEvent)">
            <summary>
            Call the <c>DoAppend</c> method on all attached appenders.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the number of appenders called</returns>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Attach an appender. If the appender is already in the list in won't be added again.
            </summary>
            <param name="newAppender">the appender to add</param>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.GetAllAppenders">
            <summary>
            Get all attached appenders as an Enumeration. If there are 
            no attached appenders <c>null</c> is returned.
            </summary>
            <returns>An enumeration of attached appenders</returns>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.GetAppender(System.String)">
            <summary>
            Look for an attached appender named as <paramref name="name"/>.
            </summary>
            <remarks>
            Return the appender with that name if in the list. Return <c>null</c> otherwise.
            </remarks>
            <param name="name">name of the appender to get</param>
            <returns>the appender with the name specified, or null</returns>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.RemoveAllAppenders">
            <summary>
            Remove all previously attached appenders
            </summary>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter form the list of attached appenders
            </summary>
            <param name="appender">the appender object to remove</param>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.RemoveAppender(System.String)">
            <summary>
            Remove the appender with the name passed as parameter form the list of appenders
            </summary>
            <param name="name">the name of the appender to remove</param>
        </member>
        <member name="T:log4net.Appender.TraceAppender">
            <summary>
            TraceAppender appends log events to the
            Trace system.  The web.config file can be used
            to control what listeners are actually used.
            
            This class uses a StringWriter to act at
            the Writer, delegates the call to the base
            class, which generates output in the
            StringWriter's StringBuffer.  This string is 
            then passed to the Trace.Write method.
            </summary>
        </member>
        <member name="F:log4net.Appender.TraceAppender.m_writer">
            <summary>
            Buffer used to build up the outlup message
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.TraceAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.CloseWriter">
            <summary>
            Override the parent method to close the default trace channel
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="T:log4net.helpers.LogLog">
            <summary>
            This class used to output log statements from within the log4net package.
            </summary>
            <remarks>
            <para>Log4net components cannot make log4net logging calls. However, it is
            sometimes useful for the user to learn about what log4net is
            doing. You can enable log4net internal logging by setting the debug
            flag in the configurator.</para>
            
            <para>All log4net internal debug calls go to <see cref="P:System.Console.Out"/>
            where as internal error messages are sent to <see cref="P:System.Console.Error"/>. 
            All internal messages are prepended with the string "log4net: ".</para>
            </remarks>
        </member>
        <member name="F:log4net.helpers.LogLog.s_debugEnabled">
            <summary>
             Default debug level
            </summary>
        </member>
        <member name="F:log4net.helpers.LogLog.s_quietMode">
            <summary>
            In quietMode not even errors generate any output.
            </summary>
        </member>
        <member name="M:log4net.helpers.LogLog.#ctor">
            <summary>
            Prevent instance objects
            </summary>
        </member>
        <member name="M:log4net.helpers.LogLog.SetInternalDebugging(System.Boolean)">
            <summary>
            Allows to enable/disable log4net internal logging.
            </summary>
            <param name="enabled">set to true to enable internal debugging</param>
        </member>
        <member name="M:log4net.helpers.LogLog.SetQuietMode(System.Boolean)">
            <summary>
            In quite mode no LogLog generates strictly no output, not even
            for errors. 
            </summary>
            <param name="quietMode">A true for not</param>
        </member>
        <member name="M:log4net.helpers.LogLog.EmitOutLine(System.String)">
            <summary>
            Single method that writes output the the standard
            output stream.  Use Console.Out for console output,
            and Trace for OutputDebugString output.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.EmitErrorLine(System.String)">
            <summary>
            Single method that writes output the the standard
            error stream.  Use Console.Error for console output,
            and Trace for OutputDebugString output.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Debug(System.String)">
            <summary>
            This method is used to output log4net internal debug
            statements. Output goes to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Debug(System.String,System.Exception)">
            <summary>
            This method is used to output log4net internal debug
            statements. Output goes to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="msg">the message to log</param>
            <param name="t">an exception to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Error(System.String)">
            <summary>
            This method is used to output log4net internal error
            statements. There is no way to disable error statements.
            Output goes to <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Error(System.String,System.Exception)">
            <summary>
            This method is used to output log4net internal error
            statements. There is no way to disable error statements.
            Output goes to <see cref="P:System.Console.Error"/>.  
            </summary>
            <param name="msg">the message to log</param>
            <param name="t">an exception to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Warn(System.String)">
            <summary>
            This method is used to output log4net internal warning
            statements. There is no way to disable warning statements.
            Output goes to <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Warn(System.String,System.Exception)">
            <summary>
            This method is used to output log4net internal warnings. There is
            no way to disable warning statements.  Output goes to 
            <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="msg">the message to log</param>
            <param name="t">an exception to log</param>
        </member>
        <member name="T:log4net.DateFormatter.DateTimeDateFormatter">
            <summary>
            Formats a DateTime in the format "dd MMM YYYY HH:mm:ss,SSS" for example, "06 Nov 1994 15:49:37,459".
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.AbsoluteTimeDateFormatter">
            <summary>
            Formats a <see cref="T:System.DateTime"/> in the format "HH:mm:ss,SSS" for example, "15:49:37,459".
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.ABS_TIME_DATE_FORMAT">
            <summary>
            String constant used to specify AbsoluteTimeDateFormat in layouts. Current value is <b>ABSOLUTE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.DATE_AND_TIME_DATE_FORMAT">
            <summary>
            String constant used to specify DateTimeDateFormat in layouts.  Current value is <b>DATE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.ISO8601_DATE_FORMAT">
            <summary>
            String constant used to specify ISO8601DateFormat in layouts. Current value is <b>ISO8601</b>.
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Render the date into a string. Format is "HH:mm:ss"
            </summary>
            <remarks>
            Sub classes should override this method to render the date
            into a string using a precision up to the sencond. This method
            will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </remarks>
            <param name="date">the date to render into a string</param>
            <param name="sbuf">a string builder to write to</param>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Render the date into a string. Format is "HH:mm:ss,SSS"
            </summary>
            <remarks>
            <para>Uses the FormatDateWithoutMillis() method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from FormatDateWithoutMillis() are
            cached and FormatDateWithoutMillis() is called at most once
            per second.</para>
            <para>Sub classes should override FormatDateWithoutMillis()
            rather than FormatDate().</para>
            </remarks>
            <param name="date">the date to render into a string</param>
            <param name="sbuf">a string builder to write to</param>
            <returns>the string builder passed</returns>
        </member>
        <member name="F:log4net.DateFormatter.DateTimeDateFormatter.m_shortMonths">
            <summary>
            Cache the list of month names
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Formats the date as: "dd MMM YYYY HH:mm:ss"
            the base class will append the ',SSS' milliseconds section.
            We will only be called at most once per second.
            </summary>
            <remarks>
            Formats a DateTime in the format "dd MMM YYYY HH:mm:ss" for example, "06 Nov 1994 15:49:37".
            </remarks>
            <param name="date">the date to format</param>
            <param name="sbuf">the string builder to write to</param>
        </member>
        <member name="T:log4net.Config.BasicConfigurator">
            <summary>
            Use this class to quickly configure the package.
            </summary>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.AddRenderer(log4net.Hierarchy,System.String,System.String)">
            <summary>
            Used by subclasses to add a renderer to the hierarchy passed as parameter.
            </summary>
            <remarks>
            The <paramref name="renderingClassName"/> must specify a type that implements the <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> interface/
            </remarks>
            <param name="hierarchy">the Hierarchy to add the renderer to</param>
            <param name="renderedClassName">the type that will be rendered by the renderer</param>
            <param name="renderingClassName">the type of the renderer</param>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure">
            <summary>
            Initialise the log4net system with a default configuration.
            </summary>
            <remarks>
            Initialises the log4net logging system using a <see cref="T:log4net.Appender.ConsoleAppender"/>
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout"/> layout object
            using the <see cref="F:log4net.Layout.PatternLayout.TTCC_CONVERSION_PATTERN"/>
            layout style.
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender)">
            <summary>
            Initialise the log4net system using the specified appender
            </summary>
            <param name="appender">the appender to use to log all logging events</param>
        </member>
        <member name="T:log4net.helpers.NullEnumerator">
            <summary>
            An allways empty Enumerator.
            </summary>
        </member>
        <member name="F:log4net.helpers.NullEnumerator.s_instance">
            <summary>
            The singleton instance of the null enumerator
            </summary>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.#ctor">
            <summary>
            Private constructor to enforce the singleton pattern
            </summary>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.GetInstance">
            <summary>
            Get the singleton instance of the null enumerator
            </summary>
            <returns>get the instance of the null enumerator</returns>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.MoveNext">
            <summary>
            Test if the enumerator can advance, if so advance
            </summary>
            <remarks>
            Always returns false as the NullEnumerator cannot advance
            </remarks>
            <returns>always false</returns>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.Reset">
            <summary>
            Reset the enumerator back to the start
            </summary>
        </member>
        <member name="P:log4net.helpers.NullEnumerator.Current">
            <summary>
            Gets the current object from the enumerator
            </summary>
            <remarks>
            This throws an exception because the NullEnumerator
            never has a current value.
            </remarks>
        </member>
        <member name="T:log4net.Filter.PriorityMatchFilter">
            <summary>
            This is a very simple filter based on priority matching.
            </summary>
            <remarks>
            <para>The filter admits two options <b>PriorityToMatch</b> and
            <b>AcceptOnMatch</b>. If there is an exact match between the value
            of the PriorityToMatch option and the priority of the 
            LoggingEvent, then the Decide method returns ACCEPT} in 
            case the <b>AcceptOnMatch</b> option value is set
            to <c>true</c>, if it is <c>false</c> then 
            DENY is returned.</para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.FilterSkeleton">
            <summary>
            Users should extend this class to implement customized logging
            event filtering. 
            </summary>
            <remarks>
            <para>Users should extend this class to implement customized logging
            event filtering. Note that <see cref="T:log4net.Category"/> and 
            <see cref="T:log4net.Appender.AppenderSkeleton"/>, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.</para>
            
            <para>This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.spi.LoggingEvent)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.</para>
            
            <para>The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.spi.LoggingEvent)"/> method must return one
            of the integer constants DENY, NEUTRAL or ACCEPT.</para>
            
            <para>If the value DENY is returned, then the log event is dropped 
            immediately without consulting with the remaining filters. </para>
            
            <para>If the value NEUTRAL is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behaviour is to log all logging events.</para>
            
            <para>If the value ACCEPT is returned, then the log
            event is logged without consulting the remaining filters. </para>
            
            <para>The philosophy of log4net filters is largely inspired from the
            Linux ipchains. </para>
            </remarks>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.DENY">
            <summary>
            The log event must be dropped immediately without consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.NEUTRAL">
            <summary>
            This filter is neutral with respect to the log event. The remaining filters, if any, should be consulted for a final decision.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.ACCEPT">
            <summary>
            The log event must be logged immediately without consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.m_next">
            <summary>
            Points to the next filter in the filter chain.
            </summary>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.ActivateOptions">
            <summary>
            Usually filters options become active when set. We provide a default do-nothing implementation for convenience.
            </summary>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
            <remarks>
            <para>If the decision is <c>DENY</c>, then the event will be
            dropped. If the decision is <c>NEUTRAL</c>, then the next
            filter, if any, will be invoked. If the decision is ACCEPT then
            the event will be logged without consulting with other filters in
            the chain.</para>
            </remarks>
            <param name="loggingEvent">The LoggingEvent to decide upon</param>
            <returns>The decision of the filter</returns>
        </member>
        <member name="P:log4net.Filter.FilterSkeleton.Next">
            <summary>
            Property to get and set the next filter in the filter
            chain of responsability.
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityMatchFilter.m_acceptOnMatch">
            <summary>
            flag to indicate if the filter should ACCEPT on a match
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityMatchFilter.m_priorityToMatch">
            <summary>
            the Priority to match agains
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityMatchFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Tests if the priority of the logging event matches that of the filter
            </summary>
            <remarks>
            If the priority of the event matches the priority of the
            filter then the result of the function depends on the
            value of <see cref="P:log4net.Filter.PriorityMatchFilter.AcceptOnMatch"/>. If it is true then
            the function will return ACCEPT, it it is false then it
            will return DENY. If the priority does not match then
            the result will be the opposite of when it does match.
            </remarks>
            <param name="loggingEvent">the event to filter</param>
            <returns>see remarks</returns>
        </member>
        <member name="P:log4net.Filter.PriorityMatchFilter.AcceptOnMatch">
            <summary>
            The AcceptOnMatch property is a flag that determines
            the behaviour when a matching Priority is found. If the
            flag is set to true then the filter will ACCEPT the 
            logging event, otherwise it will DENY the event.
            </summary>
        </member>
        <member name="P:log4net.Filter.PriorityMatchFilter.PriorityToMatch">
            <summary>
            The priority that the filter will match
            </summary>
        </member>
        <member name="T:log4net.Category">
            <summary>
            Internal class used to provide implmentation of <see cref="T:log4net.ILog"/>
            interface. Applications should use <see cref="T:log4net.LogManager"/> to get
            logger instances.
            </summary>
            <remarks>
            This is one of the central class' in the log4net implementation. One of the
            distintive features of log4net are hierarchical categories and their
            evaluation.
            </remarks>
        </member>
        <member name="T:log4net.ILog">
            <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
            <remarks>
            Use the <see cref="T:log4net.LogManager"/> to obtain logger instances
            that implement this interface. The <see cref="M:log4net.LogManager.GetLogger(System.String)"/>
            static method is used to get logger instances.
            <para>Contains methods for logging at different priority levels. Also
            has properties for determining if those logging priorities are
            enabled in the current configuration.</para>
            </remarks>
            <example>Simple example of logging messages
            <code>
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <seealso cref="T:log4net.LogManager"/>
            <seealso cref="M:log4net.LogManager.GetLogger(System.String)"/>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.DEBUG"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.DEBUG"/> priority. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Debug(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>DEBUG</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Debug(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.INFO"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>INFO</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.INFO"/> priority. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Info(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Info(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>INFO</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Info(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.WARN"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>WARN</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.WARN"/> priority. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Warn(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Warn(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>WARN</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Warn(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.ERROR"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.ERROR"/> priority. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Error(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Error(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>ERROR</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Error(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.FATAL"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.FATAL"/> priority. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Fatal(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Fatal(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>FATAL</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Fatal(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsDebugEnabled">
            <summary>
            Check whether this logger is enabled for the DEBUG <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>DEBUG</c> events.
            </value>
            <remarks>
            <para>This function is intended to lessen the computational cost of
            disabled log debug statements.</para>
            
            <para> For some <c>log</c> ILog interface, when you write:</para>
            <code>
            log.Debug("This is entry number: " + i );
            </code>
            
            <para>You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.</para>
            
            <para>If you are worried about speed, then you should write:</para>
            <code>
            if(log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            
            <para>This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log.</para>
            
            <para>If your logger is available staticaly then the is debug
            enabled state can be stored in a static variable like this:</para>
            <code>
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
            
            <para>Then when you come to log you can write:</para>
            <code>
            if(isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            
            <para>This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimised by the JIT compiler.</para>
            
            <para>Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.</para>
            </remarks>
            <returns><c>true</c> if this logger is debug enabled, <c>false</c> otherwise</returns>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
        </member>
        <member name="P:log4net.ILog.IsInfoEnabled">
            <summary>
            Check whether this logger is enabled for the INFO <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>INFO</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>INFO</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsWarnEnabled">
            <summary>
            Check whether this logger is enabled for the WARN <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>WARN</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>WARN</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsErrorEnabled">
            <summary>
            Check whether this logger is enabled for the ERROR <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>ERROR</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>ERROR</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsFatalEnabled">
            <summary>
            Check whether this logger is enabled for the FATAL <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>FATAL</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>FATAL</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="F:log4net.Category.FQCN">
            <summary>
            The fully qualified name of the Category class.
            </summary>
        </member>
        <member name="F:log4net.Category.m_name">
            <summary>
            The name of this category.
            </summary>
        </member>
        <member name="F:log4net.Category.m_priority">
            <summary>
            The assigned priority of this category. 
            </summary>
            <remarks>
            The <c>priority</c> variable need not be 
            assined a value in which case it is inherited 
            form the hierarchy.
            </remarks>
        </member>
        <member name="F:log4net.Category.m_parent">
            <summary>
            The parent of this category.
            </summary>
            <remarks>
            The parent of this category. All categories have at least one ancestor which is the root category.
            </remarks>
        </member>
        <member name="F:log4net.Category.m_hierarchy">
            <summary>
            Categories need to know what Hierarchy they are in.
            </summary>
            <remarks>
            Categories need to know what Hierarchy they are in.
            The hierarchy that this category is a member of is stored
            here.
            </remarks>
        </member>
        <member name="F:log4net.Category.m_aai">
            <summary>
            Helper implementation of the <see cref="T:log4net.spi.IAppenderAttachable"/> interface
            </summary>
        </member>
        <member name="F:log4net.Category.m_additive">
            <summary>
            Flag indicating if child categories inherit their parents appenders
            </summary>
            <remarks>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this category are not used. However, the children
            of this category will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </remarks>
        </member>
        <member name="M:log4net.Category.#ctor(System.String)">
            <summary>
            This constructor created a new <c>Category</c> instance and
            sets its name.
            </summary>
            <remarks>
            This constructor created a new <c>Category</c> instance and
            sets its name.
            
            <para>It is intended to be used by sub-classes only. You can't
            create categories directly.</para>
            
            <para>Categories are constructed by <see cref="T:log4net.spi.ICategoryFactory"/>
            objects. See <see cref="T:log4net.spi.DefaultCategoryFactory"/> for the default
            category creator</para>
            </remarks>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:log4net.Category.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Add <paramref name="newAppender"/> to the list of appenders of this
            Category instance.
            </summary>
            <param name="newAppender">An appender to add to this category</param>
            <remarks>
            Add <paramref name="newAppender"/> to the list of appenders of this
            Category instance.
            <para>If <paramref name="newAppender"/> is already in the list of
            appenders, then it won't be added again.</para>
            </remarks>
        </member>
        <member name="M:log4net.Category.GetAllAppenders">
            <summary>
            Get the appenders contained in this category as an 
            <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <remarks>
            Get the appenders contained in this category as an 
            <see cref="T:System.Collections.IEnumerator"/>. If no appenders 
            can be found, then a <see cref="T:log4net.helpers.NullEnumerator"/> is returned.
            </remarks>
            <returns>An enumeration of the appenders in this category</returns>
        </member>
        <member name="M:log4net.Category.GetAppender(System.String)">
            <summary>
            Look for the appender named as <c>name</c>
            </summary>
            <param name="name">The name of the appender to lookup</param>
            <returns>The appender with the name specified, or <c>null</c>.</returns>
            <remarks>
            Returns the named appender, or null if the appender is not found.
            </remarks>
        </member>
        <member name="M:log4net.Category.RemoveAllAppenders">
            <summary>
            Remove all previously added appenders from this Category instance.
            </summary>
            <remarks>
            Remove all previously added appenders from this Category instance.
            <para>This is useful when re-reading configuration information.</para>
            </remarks>
        </member>
        <member name="M:log4net.Category.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="appender">The appender to remove</param>
            <remarks>
            Remove the appender passed as parameter form the list of appenders.
            </remarks>
        </member>
        <member name="M:log4net.Category.RemoveAppender(System.String)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove</param>
            <remarks>
            Remove the named appender passed as parameter form the list of appenders.
            </remarks>
        </member>
        <member name="M:log4net.Category.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.DEBUG"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>DEBUG</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.DEBUG"/> priority. If this category is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Debug(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>DEBUG</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">he exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Debug(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Debug(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.INFO"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>INFO</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.INFO"/> priority. If this category is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Info(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>INFO</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Info(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Info(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.WARN"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>WARN</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.WARN"/> priority. If this category is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Warn(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>WARN</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Warn(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Warn(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.ERROR"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>ERROR</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.ERROR"/> priority. If this category is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Error(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>ERROR</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Error(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Error(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.FATAL"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>FATAL</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.FATAL"/> priority. If this category is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Fatal(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>FATAL</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Fatal(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Fatal(System.Object)"/>
        </member>
        <member name="M:log4net.Category.CallAppenders(log4net.spi.LoggingEvent)">
            <summary>
            Call the appenders in the hierrachy starting at
            <c>this</c>.  If no appenders could be found, emit a
            warning.
            </summary>
            <remarks>
            This method calls all the appenders inherited from the
            hierarchy circumventing any evaluation of whether to log or not
            to log the particular log request.
            </remarks>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Category.CloseNestedAppenders">
            <summary>
            Close all attached appenders implementing the IAppenderAttachable interface.
            </summary>
            <remarks>
            Used to ensure that the appenders are correctly shutdown.
            </remarks>
        </member>
        <member name="M:log4net.Category.Exists(System.String)">
            <summary>
            Check if the named category exists.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Exists(System.String)"/> instead.</b></para>
            </summary>
            <param name="name">The fully qualified category name to look for</param>
            <remarks>
            If the named category exists (in the default hierarchy) then it
            returns a reference to the category, otherwise it returns
            <c>null</c>.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Exists(System.String)"/> instead.</b></para>
            </remarks>
            <returns>The category found, or null</returns>
        </member>
        <member name="M:log4net.Category.Log(log4net.Priority,System.Object,System.Exception)">
            <summary>
            This generic form is intended to be used by wrappers
            </summary>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            Generate a logging event for the specified <paramref name="priority"/> using
            the <paramref name="message"/> and <paramref name="t"/>.
            </remarks>
        </member>
        <member name="M:log4net.Category.Log(log4net.Priority,System.Object)">
            <summary>
            This generic form is intended to be used by wrappers
            </summary>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <remarks>
            Generate a logging event for the specified <paramref name="priority"/> using
            the <paramref name="message"/>.
            </remarks>
        </member>
        <member name="M:log4net.Category.Log(System.String,log4net.Priority,System.Object,System.Exception)">
            <summary>
            This is the most generic printing method. This generic form is intended to be used by wrappers
            </summary>
            <param name="callerFQCN">The wrapper class' fully qualified class name</param>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            Generate a logging event for the specified <paramref name="priority"/> using
            the <paramref name="message"/>.
            </remarks>
        </member>
        <member name="M:log4net.Category.ForcedLog(System.String,log4net.Priority,System.Object,System.Exception)">
            <summary>
            This method creates a new logging event and logs the event without further checks.
            </summary>
            <param name="fqcn">The wrapper class' fully qualified class name</param>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            This method generates a logging event and delivers it to the attached
            appenders.
            </remarks>
        </member>
        <member name="M:log4net.Category.GetChainedPriority">
            <summary>
            Get the applied priority for this category.
            </summary>
            <remarks>
            Starting from this category, search the category hierarchy for a
            non-null priority and return it. Otherwise, return the priority of the
            root category.
            <para>The Category class is designed so that this method executes as
            quickly as possible.</para>
            </remarks>
            <returns>the nearest priority in the category hierarchy</returns>
        </member>
        <member name="M:log4net.Category.GetCurrentCategories">
            <summary>
            Returns all the currently defined categories in the default
            hierarchy as an <see cref="T:System.Collections.IEnumerator"/>.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.CurrentLoggers"/> instead.</b></para>
            </summary>
            <remarks>
            The root category is <b>not</b> included in the returned
            enumeration.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.CurrentLoggers"/> instead.</b></para>
            </remarks>
            <returns>All the defined categories</returns>
        </member>
        <member name="M:log4net.Category.GetInstance(System.String)">
            <summary>
            Get or create the named category.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String)"/> instead.</b></para>
            </summary>
            <remarks>
            Retrieve a category with named as the <c>name</c>
            parameter. If the named category already exists, then the
            existing instance will be reutrned. Otherwise, a new instance is
            created.
            <para>By default, categories do not have a set priority but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String)"/> instead.</b></para>
            </remarks>
            <param name="name">The name of the category to retrieve.</param>
            <returns>the category with the name specified</returns>
        </member>
        <member name="M:log4net.Category.GetInstance(System.Type)">
            <summary>
            Shorthand for <c>getInstance(clazz.FullName)</c>.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.Type)"/> instead.</b></para>
            </summary>
            <param name="clazz">The name of <c>clazz</c> will 
            be used as the name of the category to retrieve.</param>
            <remarks>
            Get a log category using the fully qualified class name 
            for the Type specified.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.Type)"/> instead.</b></para>
            </remarks>
            <returns>the category with the name specified</returns>
        </member>
        <member name="M:log4net.Category.GetInstance(System.String,log4net.spi.ICategoryFactory)">
            <summary>
            Like <see cref="M:log4net.Category.GetInstance(System.String)"/> except that the type of category
            instantiated depends on the type returned by the 
            <see cref="M:log4net.spi.ICategoryFactory.MakeNewCategoryInstance(System.String)"/>
            method of the <c>factory</c> parameter.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String,log4net.spi.ICategoryFactory)"/> instead.</b></para>
            </summary>
            <remarks>
            This method is intended to be used by sub-classes.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String,log4net.spi.ICategoryFactory)"/> instead.</b></para>
            </remarks>
            <param name="name">The name of the category to retrieve</param>
            <param name="factory">A <see cref="T:log4net.spi.ICategoryFactory"/> implementation 
            that will actually create a new Instance.</param>
            <returns>the category with the name specified</returns>
        </member>
        <member name="M:log4net.Category.IsEnabledFor(log4net.Priority)">
            <summary>
            Check whether this category is enabled for a given <see cref="P:log4net.Category.Priority"/> passed as parameter.
            </summary>
            <param name="priority">The priority to check</param>
            <returns>boolean True if this category is enabled for <c>priority</c>.</returns>
            <remarks>
            Check whether this category is enabled for a given <see cref="P:log4net.Category.Priority"/> passed as parameter.
            </remarks>
            <seealso cref="P:log4net.Category.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Category.Shutdown">
            <summary>
            Shutdown this hierarchy.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Shutdown"/> instead.</b></para>
            </summary>
            <remarks>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the categories including root contained in the
            default hierachy.
            
            <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.</para>
            
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a category
            and again to a nested appender.</para>
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Shutdown"/> instead.</b></para>
            </remarks>
        </member>
        <member name="P:log4net.Category.IsDebugEnabled">
            <summary>
            Check whether this category is enabled for the <c>DEBUG</c>
            priority.
            </summary>
            <value>
            True if this category is enabled for <c>DEBUG</c> events.
            </value>
            <remarks>
            <para>This function is intended to lessen the computational cost of
            disabled log debug statements.</para>
            
            <para> For some <c>cat</c> Category object, when you write:</para>
            <code>
            cat.Debug("This is entry number: " + i );
            </code>
            
            <para>You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.</para>
            
            <para>If you are worried about speed, then you should write:</para>
            <code>
            if(cat.IsDebugEnabled())
            { 
                cat.Debug("This is entry number: " + i );
            }
            </code>
            
            <para>This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>cat</c>. On
            the other hand, if the <c>cat</c> is debug enabled, you
            will incur the cost of evaluating whether the category is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a category takes about 1% of the time it
            takes to actually log.</para>
            </remarks>
            <returns><c>true</c> if this category is debug enabled, <c>false</c> otherwise</returns>
        </member>
        <member name="P:log4net.Category.IsInfoEnabled">
            <summary>
            Check whether this category is enabled for the INFO <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>INFO</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>INFO</c> priority.</returns>
            <seealso cref="P:log4net.Category.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.IsWarnEnabled">
            <summary>
            Check whether this category is enabled for the WARN <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>WARN</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>WARN</c> priority.</returns>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.IsErrorEnabled">
            <summary>
            Check whether this category is enabled for the ERROR <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>ERROR</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>ERROR</c> priority.</returns>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.IsFatalEnabled">
            <summary>
            Check whether this category is enabled for the FATAL <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>FATAL</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>FATAL</c> priority.</returns>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.Parent">
            <summary>
            The parent category in the hierarchy
            </summary>
            <value>
            The parent category in the hierarchy
            </value>
            <remarks>
            Part of the Composite pattern that makes the hierarchy.
            </remarks>
        </member>
        <member name="P:log4net.Category.Additivity">
            <summary>
            Flag indicating if child categories inherit their parent's appenders
            </summary>
            <value>
            true if child categories inherit their parent's appenders
            </value>
            <remarks>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this category are not used. However, the children
            of this category will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </remarks>
        </member>
        <member name="P:log4net.Category.DefaultHierarchy">
            <summary>
            Return the default Hierarchy instance.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.LoggerRepository"/> instead.</b></para>
            </summary>
            <value>The default hierarchy</value>
            <remarks>
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.LoggerRepository"/> instead.</b></para>
            </remarks>
        </member>
        <member name="P:log4net.Category.Hierarchy">
            <summary>
            Get / Set the <see cref="P:log4net.Category.Hierarchy"/> where this 
            <c>Category</c> instance is attached.
            </summary>
            <value>The hierarchy that this category belongs to</value>
            <remarks>
            Get / Set the <see cref="P:log4net.Category.Hierarchy"/> where this 
            <c>Category</c> instance is attached.
            </remarks>
        </member>
        <member name="P:log4net.Category.Name">
            <summary>
            Return the category name.
            </summary>
            <value>
            The name of the category
            </value>
            <remarks>
            The name of the category
            </remarks>
        </member>
        <member name="P:log4net.Category.Priority">
            <summary>
            Returns the assigned <see cref="T:log4net.Priority"/>, if any, for this Category.  
            The assigned Priority, can be <c>null</c>
            </summary>
            <value>
            The <see cref="T:log4net.Priority"/> of this category.
            </value>
            <remarks>
            Categories have assigned <see cref="T:log4net.Priority"/> levels.
            </remarks>
        </member>
        <member name="P:log4net.Category.Root">
            <summary>
            Return the root of the default category hierarchy.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.Root"/> instead.</b></para>
            </summary>
            <value>
            The Category that is the root of the hierarchy.
            </value>
            <remarks>
            The root category is always instantiated and available. It's
            name is "root".
            
            <para>Nevertheless, calling <c>Category.GetInstance("root")</c>
            does not retrieve the root category but a category just under root 
            named "root".</para>
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.Root"/> instead.</b></para>
            </remarks>
        </member>
        <member name="T:log4net.NDC">
            <summary>
            Implementation of NDC the nested diagnostic context.
            </summary>
            <remarks>
            <para>A Nested Diagnostic Context, or NDC in short, is an instrument
            to distinguish interleaved log output from different sources. Log
            output is typically interleaved when a server handles multiple
            clients near-simultaneously.</para>
            <para>Interleaved log output can still be meaningful if each log entry
            from different contexts had a distinctive stamp. This is where NDCs
            come into play.</para>
            <para>Note that NDCs are managed on a per thread basis. The NDC class
            is made up of static methods that operate on the context of the
            calling thread.</para>
            </remarks>
            <example>How to push a message into the context
            <code>
            using(NDC.Push("my context message"))
            {
            	... all log calls will have my message included ...
            
            } // at the end of the using block the message is automatically removed 
            </code>
            </example>
        </member>
        <member name="F:log4net.NDC.s_slot">
            <summary>
            The thread local data slot to use for context information
            </summary>
        </member>
        <member name="M:log4net.NDC.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.NDC.Clear">
            <summary>
            Clears all the contextual information held on the 
            current thread.
            </summary>
            <remarks>
            Clears all the contextual information held on the 
            current thread. After calling this method the
            <see cref="P:log4net.NDC.Depth"/> will be <c>0</c>.
            </remarks>
        </member>
        <member name="M:log4net.NDC.CloneStack">
            <summary>
            Creates a clone of the stack of context information.
            </summary>
            <remarks>
            Creates a clone of the stack of context information. This
            can be passed to the <see cref="M:log4net.NDC.Inherit(System.Collections.Stack)"/> method to allow
            child threads to inherit the context of their parent thread.
            </remarks>
            <returns>a clone of the context info for this thread</returns>
        </member>
        <member name="M:log4net.NDC.Inherit(System.Collections.Stack)">
            <summary>
            Inherit the contextual information from another thread.
            </summary>
            <remarks>
            This thread will use the context information from the stack
            supplied. This can be used to initialise child threads with
            the same contextual information as their parent theads. These
            contexts will <b>NOT</b> be shared. Any further contexts that
            are pushed onto the stack will not be visisble to the other.
            Call <see cref="M:log4net.NDC.CloneStack"/> to obtain a stack to pass to
            this method.
            </remarks>
            <param name="stack">The context stack to inherit</param>
        </member>
        <member name="M:log4net.NDC.Get">
            <summary>
            Get the current context information.
            </summary>
            <remarks>
            Get the current context information. That is all the messages that
            have been pushed on to the context stack.
            </remarks>
            <returns>The current context information</returns>
        </member>
        <member name="M:log4net.NDC.Pop">
            <summary>
            Remove the top context from the stack
            </summary>
            <remarks>
            Remove the top context from the stack, and return
            it to the caller. If the stack is empty then an
            empty string (not null) is returned.
            </remarks>
            <returns>the message in the context that was removed from the top of the stack</returns>
        </member>
        <member name="M:log4net.NDC.Peek">
            <summary>
            Peek at the message on the top of the context stack
            </summary>
            <returns>The message on the top of the stack</returns>
        </member>
        <member name="M:log4net.NDC.Push(System.String)">
            <summary>
            Push a new context message
            </summary>
            <param name="message">The new context message</param>
            <returns>An <see cref="T:System.IDisposable"/> is returned that 
            can be used to clean up the context stack</returns>
            <remarks>
            Push a new context onto the context stack. An <see cref="T:System.IDisposable"/>
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            conext.
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code>
            using(log4net.NDC.Push("NDC_Message"))
            {
            	log.Warn("This should have an NDC message");
            }
            </code>
            </example>
        </member>
        <member name="M:log4net.NDC.Remove">
            <summary>
            Remove the context information for this thread. It is
            not required to call this method.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:log4net.NDC.SetMaxDepth(System.Int32)">
            <summary>
            Forces the stack depth to be at most <paramref name="maxDepth"/>.
            </summary>
            <remarks>
            Forces the stack depth to be at most <paramref name="maxDepth"/>.
            This may truncate the head of the stack. This only affects the 
            stack in the current thread. Also it does not prevent it from
            growing, it only sets the maximum depth at the time of the
            call. This can be used to return to a known context depth.
            </remarks>
            <param name="maxDepth">The maximum depth of the stack</param>
        </member>
        <member name="M:log4net.NDC.GetStack">
            <summary>
            Get the stack of context objects on this thread
            </summary>
            <returns>the stack of context objects</returns>
        </member>
        <member name="P:log4net.NDC.Depth">
            <summary>
            Get the current context depth
            </summary>
            <value>the current context depth</value>
            <remarks>
            Get the current context depth
            </remarks>
        </member>
        <member name="T:log4net.NDC.DiagnosticContext">
            <summary>
            Inner class used to represent a single context in the stack
            </summary>
        </member>
        <member name="M:log4net.NDC.DiagnosticContext.#ctor(System.String,log4net.NDC.DiagnosticContext)">
            <summary>
            Construct a new context
            </summary>
            <param name="message">The nessage for this context</param>
            <param name="parent">The parent context in the chain</param>
        </member>
        <member name="P:log4net.NDC.DiagnosticContext.Message">
            <summary>
            Get the message
            </summary>
        </member>
        <member name="P:log4net.NDC.DiagnosticContext.FullMessage">
            <summary>
            Get the full text of the context down to the root level
            </summary>
        </member>
        <member name="T:log4net.NDC.NDCAutoDisposeFrame">
            <summary>
            Inner class that is returned from <see cref="M:log4net.NDC.Push(System.String)"/>
            </summary>
            <remarks>
            Inner class that is returned from <see cref="M:log4net.NDC.Push(System.String)"/>.
            This class is disposable and when it is disoposed it automatically
            returns the NDC to the corect depth.
            </remarks>
        </member>
        <member name="F:log4net.NDC.NDCAutoDisposeFrame.m_frameStack">
            <summary>
            The NDC internal stack
            </summary>
        </member>
        <member name="F:log4net.NDC.NDCAutoDisposeFrame.m_frameDepth">
            <summary>
            The depth to rethr the stack to when this instance is disposed
            </summary>
        </member>
        <member name="M:log4net.NDC.NDCAutoDisposeFrame.#ctor(System.Collections.Stack,System.Int32)">
            <summary>
            Construct a new instance with the stack and return depth specified
            </summary>
            <param name="frameStack">the internal stack used by the NDC</param>
            <param name="frameDepth">the depth to return the stack to when this object is disposed</param>
        </member>
        <member name="M:log4net.NDC.NDCAutoDisposeFrame.Dispose">
            <summary>
            Return the NDC stack to the correct depth
            </summary>
        </member>
        <member name="T:log4net.MDC">
            <summary>
            Implementation of MDC the mapped diagnostic context.
            </summary>
            <remarks>
            <para>The MDC class is similar to the <see cref="T:log4net.NDC"/> class except that it is
            based on a map instead of a stack. It provides <i>mapped
            diagnostic contexts</i>. A <i>Mapped Diagnostic Context</i>, or
            MDC in short, is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.</para>
            <para>The MDC is managed on a per thread basis</para>
            </remarks>
        </member>
        <member name="F:log4net.MDC.s_slot">
            <summary>
            The thread local data slot to use for context information
            </summary>
        </member>
        <member name="M:log4net.MDC.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.MDC.Get(System.String)">
            <summary>
            Get the context identified by the <paramref name='key'/> parameter
            </summary>
            <remarks>
            Get the context identified by the <paramref name='key'/> parameter.
            If the <paramref name='key'/> parameter does not look up to a
            previously defined context then <c>null</c> will be retutrned.
            </remarks>
            <param name="key">the key to lookup in the MDC</param>
            <returns>the string value held for the key, or null</returns>
        </member>
        <member name="M:log4net.MDC.Set(System.String,System.String)">
            <summary>
            Put a context value (the <paramref name='val'/> parameter) as identified
            with the <paramref name='key'/> parameter into the current thread's
            context map.
            </summary>
            <remarks>
            If a value is already defined for the <paramref name='key'/>
            specified then the value will be replaced.
            If the <paramref name='val'/> is specified as <c>null</c> then
            the key value mapping will be removed.
            </remarks>
            <param name="key">the key to store the value under</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:log4net.MDC.Remove(System.String)">
            <summary>
            Removes the key value mapping for the key specified.
            </summary>
            <param name="key">the key to remove</param>
            <remarks>
            Removes the <paramref name="key"/> value mapping for the key specified.
            </remarks>
        </member>
        <member name="M:log4net.MDC.GetMap">
            <summary>
            Get the map on this thread
            </summary>
            <returns>the map</returns>
        </member>
        <member name="T:log4net.spi.RootCategory">
            <summary>
            RootCategory sits at the top of the category hierachy. It is a
            regular category except that it provides several guarantees.
            </summary>
            <remarks>
            First, it cannot be assigned a <c>null</c>
            priority. Second, since root category cannot have a parent, the
            <see cref="M:log4net.spi.RootCategory.GetChainedPriority"/> method always returns the value of the
            priority field without walking the hierarchy.
            </remarks>
        </member>
        <member name="M:log4net.spi.RootCategory.#ctor(log4net.Priority)">
            <summary>
            The root category names itself as "root". However, the root
            category cannot be retrieved by name.
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:log4net.spi.RootCategory.GetChainedPriority">
            <summary>
            Return the assigned priority value without walking the category hierarchy
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.RootCategory.Priority">
            <summary>
            Setting a null value to the priority of the root category
            may have catastrophic results. We prevent this here.
            </summary>
        </member>
        <member name="T:log4net.helpers.QuietTextWriter">
            <summary>
            QuietTextWriter does not throw exceptions when things go wrong. 
            Instead, it delegates error handling to its <see cref="T:log4net.spi.IErrorHandler"/>.
            </summary>
        </member>
        <member name="F:log4net.helpers.QuietTextWriter.m_errorHandler">
            <summary>
            The error handler instance to pass all errors to
            </summary>
        </member>
        <member name="F:log4net.helpers.QuietTextWriter.m_writer">
            <summary>
            The instance of the underlying TextWriter used for output
            </summary>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.#ctor(System.IO.TextWriter,log4net.spi.IErrorHandler)">
            <summary>
            Create a new QuietTextWriter using a writer and error handler
            </summary>
            <param name="writer">the writer to actualy write to</param>
            <param name="errorHandler">the error handler to report error to</param>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.Write(System.String)">
            <summary>
            Write a string to the output
            </summary>
            <param name="str">the string data to write to the output</param>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.Flush">
            <summary>
            Flush any buffered output
            </summary>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.Close">
            <summary>
            Close the underlying output writer
            </summary>
        </member>
        <member name="P:log4net.helpers.QuietTextWriter.ErrorHandler">
            <summary>
            The error handler that all errors are passed to
            </summary>
        </member>
        <member name="T:log4net.Appender.SMTPAppender">
            <summary>
            Send an e-mail when a specific logging event occurs, typically on errors or fatal errors.
            </summary>
            <remarks>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.SMTPAppender.BufferSize"/> option. The
            <c>SMTPAppender</c> keeps only the last
            <see cref="P:log4net.Appender.SMTPAppender.BufferSize"/> logging events in its cyclic buffer. This
            keeps memory requirements at a reasonable level while still
            delivering useful application context.
            </remarks>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.#ctor">
            <summary>
            The default constructor will instantiate the appender with a
            <see cref="T:log4net.spi.ITriggeringEventEvaluator"/> that will trigger on events with
            priority ERROR or higher.
            </summary>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.#ctor(log4net.spi.ITriggeringEventEvaluator)">
            <summary>
            Use <paramref name="evaluator"/> passed as parameter as the 
            <see cref="T:log4net.spi.ITriggeringEventEvaluator"/> for this SMTPAppender.  
            </summary>
            <param name="evaluator">the trigger to deliver the mail message</param>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.ActivateOptions">
            <summary>
            Activate the specified options
            </summary>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.Append(log4net.spi.LoggingEvent)">
            <summary>
            Perform SMTPAppender specific appending actions, mainly adding
            the event to a cyclic buffer and checking if the event triggers
            an e-mail to be sent.
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.RequiresLayout">
            <summary>
            The <c>SMTPAppender</c> requires a <see cref="T:log4net.Layout.ILayout"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.CheckEntryConditions">
            <summary>
            This method determines if there is a sense in attempting to append.
            </summary>
            <remarks>
            It checks whether there is a set output target and also if
            there is a set layout. If these checks fail, then the boolean
            value <c>false</c> is returned. 
            </remarks>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.SendBuffer">
            <summary>
            Send the contents of the cyclic buffer as an e-mail message.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.EvaluatorClass">
            <summary>
            Returns value of the <b>EvaluatorClass</b> option
            The <b>EvaluatorClass</b> option takes a string value
            representing the name of the class implementing the <see cref="T:log4net.spi.ITriggeringEventEvaluator"/>
            interface. A corresponding object will
            be instantiated and assigned as the triggering event evaluator
            for the SMTPAppender.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.To">
            <summary>
            Returns value of the <b>To</b> option.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.From">
            <summary>
            Returns value of the <b>From</b> option.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.Subject">
            <summary>
            Returns value of the <b>Subject</b> option.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.BufferSize">
            <summary>
            The <b>BufferSize</b> option takes a positive integer
            representing the maximum number of logging events to collect in a
            cyclic buffer. When the <c>BufferSize</c> is reached,
            oldest events are deleted as new events are added to the
            buffer. By default the size of the cyclic buffer is 512 events.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.SMTPHost">
            <summary>
            The <b>SMTPHost</b> option takes a string value which should be a
            the host name of the SMTP server that will send the e-mail message.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.LocationInfo">
            <summary>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no effort
            to extract the location information related to the event. As a
            result, the layout that formats the events as they are sent out
            in an e-mail is likely to place the wrong location information
            (if present in the format).
            
            <para>Location information extraction is comparatively very slow and
            should be avoided unless performance is not a concern.</para>
            </summary>
        </member>
        <member name="M:log4net.Appender.DefaultEvaluator.IsTriggeringEvent(log4net.spi.LoggingEvent)">
            <summary>
            Is this <paramref name="logginEvent"/> the e-mail triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the event priority
            has ERROR priority or higher. Otherwise it returns <c>false</c></returns>
        </member>
        <member name="T:log4net.spi.DefaultCategoryFactory">
            <summary>
            Implementation of DefaultCategoryFactory.
            </summary>
        </member>
        <member name="T:log4net.spi.ICategoryFactory">
            <summary>
            Implement this interface to create new instances of Category or a sub-class of Category.
            </summary>
        </member>
        <member name="M:log4net.spi.ICategoryFactory.MakeNewCategoryInstance(System.String)">
            <summary>
            Construct a new Category instance with the name specified
            </summary>
            <param name="name">the name of the category</param>
            <returns>the instance for the name specified</returns>
        </member>
        <member name="M:log4net.spi.DefaultCategoryFactory.MakeNewCategoryInstance(System.String)">
            <summary>
            Construct a new Category object
            </summary>
            <param name="name">The name of the Category</param>
            <returns>a new Category instance</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser">
            <summary>
            Most of the work of the <see cref="T:log4net.Layout.PatternLayout"/> class
            is delegated to the PatternParser class.
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_currentLiteral">
            <summary>
            the literal being parsed
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_patternLength">
            <summary>
            the total length of the pattern
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_index">
            <summary>
            the current index into the pattern
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_head">
            <summary>
            The first pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_tail">
            <summary>
             the last pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_formattingInfo">
            <summary>
            the formatting info object
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_pattern">
            <summary>
            The pattern
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.#ctor(System.String)">
            <summary>
            Create a pattern parse for a specific pattern string
            </summary>
            <param name="pattern">the parrern to parse</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.AddToList(log4net.helpers.PatternConverter)">
            <summary>
            Internal method to add a pattern converter to the chain
            </summary>
            <param name="pc">the converter to add</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.ExtractOption">
            <summary>
            Internal method to extract the option from the pattern at the current index
            </summary>
            <remarks>
            The option is the section of the pattern between '{' and '}'.
            This function returns the option if the current index of the
            parse is at the start of the option, otherwise null is returned.
            </remarks>
            <returns>returns the option or null</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.ExtractPrecisionOption">
            <summary>
            The option is expected to be in decimal and positive. In case of error, zero is returned.
            </summary>
            <returns>the option as a number</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.Parse">
            <summary>
            Parse the pattern into a chain of pattern converters
            </summary>
            <returns>the head of a chain of pattern converters</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.FinalizeConverter(System.Char)">
            <summary>
            Internal method that works on a single option in the
            pattern
            </summary>
            <param name="c">the option specifier</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.AddConverter(log4net.helpers.PatternConverter)">
            <summary>
            Internal method to add a pattern converter
            </summary>
            <remarks>
            Resets the internal state of the parser as well as adding the pattern converter to the chain
            </remarks>
            <param name="pc">the pattern converter to add</param>
        </member>
        <member name="T:log4net.helpers.PatternParser.BasicPatternConverter">
            <summary>
            Basic pattern converter
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.BasicPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Construct the pattern converter with formatting info and type
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="type">the type of pattern</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.BasicPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            To the conversion
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the result of converting the pattern</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.BasicPatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
            <summary>
            Internal method to get the time difference between two DateTime objects
            </summary>
            <param name="start">start time</param>
            <param name="end">end time</param>
            <returns>the time difference in milliseconds</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.LiteralPatternConverter">
            <summary>
            Pattern converter for literal instances in the pattern
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.LiteralPatternConverter.#ctor(System.String)">
            <summary>
            Constructor, takes the literal string
            </summary>
            <param name="strValue"></param>
        </member>
        <member name="M:log4net.helpers.PatternParser.LiteralPatternConverter.Format(System.Text.StringBuilder,log4net.spi.LoggingEvent)">
            <summary>
            Override the formatting behaviour to ignore the FormattingInfo
            because we have a literal instead.
            </summary>
            <param name="sbuf">the builder to write to</param>
            <param name="loggingEvent">the event being logged</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.LiteralPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert this pattern into the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the literal</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.MDCPatternConverter">
            <summary>
            Mapped Diagnostic pattern converter
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.MDCPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.String)">
            <summary>
            Construct the pattern converter with formatting info and MDC key
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="key">the MDC key to emmit</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.MDCPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            To the conversion
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the result of converting the pattern</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.DatePatternConverter">
            <summary>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format the date
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.DatePatternConverter.#ctor(log4net.helpers.FormattingInfo,log4net.DateFormatter.IDateFormatter)">
            <summary>
            Construct the converter with formatting info and a
            <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format the date
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="df">the date formatter</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.DatePatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert the pattern into the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns></returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.LocationPatternConverter">
            <summary>
            Converter to include event location information
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.LocationPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Construct the converter with formatting information and
            the type of location information required.
            </summary>
            <param name="formattingInfo"></param>
            <param name="type"></param>
        </member>
        <member name="M:log4net.helpers.PatternParser.LocationPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the relevent location information</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.NamedPatternConverter">
            <summary>
            Converter to deal with '.' separated strings
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.NamedPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Construct a converter with formatting info and a precision
            argument. The precision is the number of '.' separated sections
            to return, starting from the end of the string and working 
            towards to the start.
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="precision">the precision</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.NamedPatternConverter.GetFullyQualifiedName(log4net.spi.LoggingEvent)">
            <summary>
            Overriden by subclasses to get the fully qualified name before the
            precision is applied to it.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the fully qualified name</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.NamedPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the precision of the fully qualified name specified</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.ClassNamePatternConverter">
            <summary>
            Pattern converter for the class name
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.ClassNamePatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="formattingInfo">formatting info</param>
            <param name="precision">namespace depth precision</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.ClassNamePatternConverter.GetFullyQualifiedName(log4net.spi.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the class
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the class name</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.CategoryPatternConverter">
            <summary>
            Converter for category name
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.CategoryPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="formattingInfo">formatting info</param>
            <param name="precision">category hierarchy depth precision</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.CategoryPatternConverter.GetFullyQualifiedName(log4net.spi.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the category
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the category name</returns>
        </member>
        <member name="T:log4net.ObjectRenderer.DefaultRenderer">
            <summary>
            The default Renderer renders objects by calling their <see cref="M:System.Object.ToString"/> method.
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.DoRender(System.Object)">
            <summary>
            Render the object passed as parameter by calling its <see cref="M:System.Object.ToString"/> method.
            </summary>
            <param name="obj">the object to render</param>
            <returns>the object rendered as a string</returns>
        </member>
        <member name="T:log4net.helpers.OptionConverter">
            <summary>
            A convenience class to convert property values to specific types.
            </summary>
        </member>
        <member name="M:log4net.helpers.OptionConverter.#ctor">
            <summary>
            Private constructor to prevent instances
            </summary>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ConcatanateArrays(System.String[],System.String[])">
            <summary>
            Concatenates two string arrays
            </summary>
            <param name="l">left array</param>
            <param name="r">right array</param>
            <returns>array containg left and right arrays</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ConcatanateArrays(System.Array,System.Array)">
            <summary>
            Concatenates two arrays
            </summary>
            <param name="l">left array</param>
            <param name="r">right array</param>
            <returns>array containg left and right arrays</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ConvertSpecialChars(System.String)">
            <summary>
            Converts string escape chars back to their correct values
            </summary>
            <param name="s">string to convert</param>
            <returns>converted result</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToBoolean(System.String,System.Boolean)">
            <summary>
            Convert a string to a bool value
            </summary>
            <remarks>
            If <paramref name="argValue"/> is "true", then <c>true</c> is returned. 
            If <paramref name="argValue"/> is "false", then <c>true</c> is returned. 
            Otherwise, <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="argValue">string to convert</param>
            <param name="defaultValue">the default value</param>
            <returns>true or false</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToInt(System.String,System.Int32)">
            <summary>
            Convert a string to an integer
            </summary>
            <param name="argValue">string to convert</param>
            <param name="defaultValue">default value</param>
            <returns>the int value of the string parsed</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToPriority(System.String,log4net.Priority)">
            <summary>
            Converts a standard or custom priority level to a Priority object.  
            </summary>
            <remarks>
            If <paramref name="argValue"/> is of form
            "priority#classname", then the specified class' toPriority method
            is called to process the specified priority string; if no '#'
            character is present, then the default <see cref="T:log4net.Priority"/>
            class is used to process the priority value.  
            
            <para>If any error occurs while converting the value to a priority,
            the dflt value (which may be null) is returned.</para>
            
            <para>Case of value is unimportant for the priority level, but is significant
            for any class name part present.</para>
            </remarks>
            <param name="argValue"></param>
            <param name="defaultValue"></param>
            <returns>The Priority object</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToFileSize(System.String,System.Int64)">
            <summary>
            Parse a file size into a number
            </summary>
            <remarks>
            Parses a file size of the form: number[KB|MB|GB] into a
            long value. It is scaled with the appropriate multiplier.
            </remarks>
            <param name="argValue">string to parse</param>
            <param name="defaultValue">default value</param>
            <returns>the value of the string parsed to a long</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.FindAndSubst(System.String,System.Collections.IDictionary)">
            <summary>
            Find the value corresponding to <paramref name="key"/> in 
            <paramref name="props"/>. Then perform variable substitution 
            on the found value.
            </summary>
            <param name="key">the key to lookup</param>
            <param name="props">the association to use for lookups</param>
            <returns>the substituted result</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
            <summary>
            Instantiate an object given a class name
            </summary>
            <remarks>
            Instantiate an object given a class name. Check that the
            <paramref name="className"/> is a subclass of
            <paramref name="superClass"/>. If that test fails or the object could
            not be instantiated, then <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="className">The fully qualified class name of the object to instantiate</param>
            <param name="superClass">The class to which the new object should belong</param>
            <param name="defaultValue">The object to return in case of non-fulfillment</param>
            <returns></returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.SubstVars(System.String,System.Collections.IDictionary)">
            <summary>
            Perform variable substitution in string <paramref name="val"/> from the values of keys found in <paramref name="props"/>.
            </summary>
            <remarks>
            <para>The variable substitution delimeters are <b>${</b> and <b>}</b>.</para>
            
            <para>For example, if props contains "key=value", then the call</para>
            <code>
            String s = OptionConverter.substituteVars("Value of key is ${key}.");
            </code>
            
            will set the variable <c>s</c> to "Value of key is value.".
            
            <para>If no value could be found for the specified key,
            then substitution defaults to the empty string.</para>
            
            <para>For example, if system propeties contains no value for the key
            "inexistentKey", then the call</para>
            
            <code>
            String s = OptionConverter.subsVars("Value of inexistentKey is [${inexistentKey}]");
            </code>
            will set <s>s</s> to "Value of inexistentKey is []"     
            
            <para>An Exception is thrown if
            <paramref name="val"/> contains a start delimeter "${" which is not
            balanced by a stop delimeter "}". </para>
            </remarks>
            <param name="val">The string on which variable substitution is performed</param>
            <param name="props">the dictionary to use to lookup variables</param>
            <returns>the result of the substitutions</returns>
        </member>
        <member name="T:log4net.helpers.FormattingInfo">
            <summary>
            FormattingInfo instances contain the information obtained when parsing 
            formatting modifiers in conversion modifiers.
            </summary>
        </member>
        <member name="M:log4net.helpers.FormattingInfo.Reset">
            <summary>
            Set back to default values
            </summary>
        </member>
        <member name="M:log4net.helpers.FormattingInfo.Dump">
            <summary>
            Dump debug info
            </summary>
        </member>
        <member name="P:log4net.helpers.FormattingInfo.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:log4net.helpers.FormattingInfo.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:log4net.helpers.FormattingInfo.LeftAlign">
            <summary>
            Flag indicating left align
            </summary>
        </member>
        <member name="T:log4net.helpers.CyclicBuffer">
            <summary>
            A fixed size rolling buffer of logging events.
            </summary>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.#ctor(System.Int32)">
            <summary>
            Instantiate a new CyclicBuffer of at most <paramref name="maxSize"/> events.
            </summary>
            <remarks>The <paramref name="maxSize"/> argument must a positive integer.</remarks>
            <param name="maxSize">The maximum number of elements in the buffer</param>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.Append(log4net.spi.LoggingEvent)">
            <summary>
            Add an <paramref name="loggingEvent"/> as the last event in the buffer
            </summary>
            <param name="loggingEvent">The event to append to the buffer</param>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.PopOldest">
            <summary>
            Get the oldest (first) element in the buffer. The oldest element is removed from the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.Resize(System.Int32)">
            <summary>
            Resize the cyclic buffer to <paramref name="newSize"/>.
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="P:log4net.helpers.CyclicBuffer.Item(System.Int32)">
            <summary>
            Get the <paramref name="i"/>th oldest event currently in the buffer
            </summary>
            <remarks>
            Get the <paramref name="i"/>th oldest event currently in the buffer. If
            <paramref name="i"/> is outside the range 0 to the number of elements
            currently in the buffer, then <c>null</c> is returned.
            </remarks>
        </member>
        <member name="P:log4net.helpers.CyclicBuffer.MaxSize">
            <summary>
            Get the maximum size of the buffer
            </summary>
        </member>
        <member name="P:log4net.helpers.CyclicBuffer.Length">
            <summary>
            Get the number of elements in the buffer. This number is
            guaranteed to be in the range 0 to <see cref="P:log4net.helpers.CyclicBuffer.MaxSize"/>
            (inclusive).
            </summary>
        </member>
        <member name="T:log4net.Layout.PatternLayout">
            <summary>
            A flexible layout configurable with pattern string.
            </summary>
            <remarks>
            <para>The goal of this class is to <see cref="M:log4net.Layout.PatternLayout.Format(log4net.spi.LoggingEvent)"/> a 
            <see cref="T:log4net.spi.LoggingEvent"/> and return the results as a String. The results
            depend on the <i>conversion pattern</i>.</para>
            
            <para>The conversion pattern is closely related to the conversion
            pattern of the printf function in C. A conversion pattern is
            composed of literal text and format control expressions called
            <i>conversion specifiers</i>.</para>
            
            <para><i>You are free to insert any literal text within the conversion
            pattern.</i></para>
            
            <para>Each conversion specifier starts with a percent sign (%) and is
            followed by optional <i>format modifiers</i> and a <i>conversion
            character</i>. The conversion character specifies the type of
            data, e.g. category, priority, date, thread name. The format
            modifiers control such things as field width, padding, left and
            right justification. The following is a simple example.</para>
            
            <para>Let the conversion pattern be <b>"%-5p [%t]: %m%n"</b> and assume
            that the log4net environment was set to use a PatternLayout. Then the
            statements</para>
            <code>
            Category root = Category.getRoot();
            root.debug("Message 1");
            root.warn("Message 2");   
            </code>
            would yield the output
            <code>
            DEBUG [main]: Message 1
            WARN  [main]: Message 2  
            </code>
            
            <para>Note that there is no explicit separator between text and
            conversion specifiers. The pattern parser knows when it has reached
            the end of a conversion specifier when it reads a conversion
            character. In the example above the conversion specifier
            <b>%-5p</b> means the priority of the logging event should be left
            justified to a width of five characters.</para>
            
            The recognized conversion characters are
            
            <table border="1" CELLPADDING="8">
            <th>Conversion Character</th>
            <th>Effect</th>
            
            <tr>
            	<td align="center"><b>c</b></td>
            
            	<td>Used to output the category of the logging event. The
            	category conversion specifier can be optionally followed by
            	<i>precision specifier</i>, that is a decimal constant in
            	brackets.
            
            	<para>If a precision specifier is given, then only the corresponding
            	number of right most components of the category name will be
            	printed. By default the category name is printed in full.</para>
            
            	<para>For example, for the category name "a.b.c" the pattern
            	<b>%c{2}</b> will output "b.c".</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>C</b></td>
            
            	<td>Used to output the fully qualified class name of the caller
            	issuing the logging request. This conversion specifier
            	can be optionally followed by <i>precision specifier</i>, that
            	is a decimal constant in brackets.
            
            	<para>If a precision specifier is given, then only the corresponding
            	number of right most components of the class name will be
            	printed. By default the class name is output in fully qualified form.</para>
            
            	<para>For example, for the class name "org.apache.xyz.SomeClass", the
            	pattern <b>%C{1}</b> will output "SomeClass".</para>
            
            	<para><b>WARNING</b> Generating the caller class information is
            	slow. Thus, it's use should be avoided unless execution speed is
            	not an issue.</para>
            	</td>
            </tr>
            
            <tr> 
            	<td align="center"><b>d</b></td> 
            
            	<td>Used to output the date of
            	the logging event. The date conversion specifier may be
            	followed by a <i>date format specifier</i> enclosed between
            	braces. For example, <b>%d{HH:mm:ss,SSS}</b> or
            	<b>%d{dd&amp;nbsp;MMM&amp;nbsp;yyyy&amp;nbsp;HH:mm:ss,SSS}</b>.  If no
            	date format specifier is given then ISO8601 format is
            	assumed.
            
            	<para>The date format specifier admits the same syntax as the
            	time pattern string of the <see cref="M:System.DateTime.ToString"/>.</para>
            
            	<para>For better results it is recommended to use the log4net date
            	formatters. These can be specified using one of the strings
            	"ABSOLUTE", "DATE" and "ISO8601" for specifying <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/>
            	<see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> and respectively 
            	<see cref="T:log4net.DateFormatter.ISO8601DateFormatter"/>. For example, 
            	<b>%d{ISO8601}</b> or <b>%d{ABSOLUTE}</b>.</para>
            
            	<para>These dedicated date formatters perform significantly
            	better than java.text.SimpleDateFormat.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>F</b></td>
            
            	<td>Used to output the file name where the logging request was
            	issued.
            
            	<para><b>WARNING</b> Generating caller location information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>l</b></td>
            
            	<td>Used to output location information of the caller which generated
            	the logging event. 
            
            	<para>The location information depends on the JVM implementation but
            	usually consists of the fully qualified name of the calling
            	method followed by the callers source the file name and line
            	number between parentheses.</para>
            
            	<para>The location information can be very useful. However, it's
            	generation is <b>extremely</b> slow. It's use should be avoided
            	unless execution speed is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>L</b></td>
            
            	<td>Used to output the line number from where the logging request
            	was issued.
            
            	<para><b>WARNING</b> Generating caller location information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>W</b></td>
            
            	<td>Used to output the WindowsIdentity for the currently
            	active user.
            
            	<para><b>WARNING</b> Generating caller WindowsIdentity information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>m</b></td>
            	
            	<td>Used to output the application supplied message associated with 
            	the logging event.</td>   
            </tr>
            
            <tr>
            	<td align="center"><b>M</b></td>
            
            	<td>Used to output the method name where the logging request was
            	issued.
            
            	<para><b>WARNING</b> Generating caller location information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>n</b></td>
            
            	<td>Outputs the platform dependent line separator character or
            	characters. 
            
            	<para>This conversion character offers practically the same
            	performance as using non-portable line separator strings such as
            	"\n", or "\r\n". Thus, it is the preferred way of specifying a
            	line separator.</para> 
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>p</b></td>
            	
            	<td>Used to output the priority of the logging event.</td>
            </tr>
            
            <tr>
            	<td align="center"><b>r</b></td>
            
            	<td>Used to output the number of milliseconds elapsed since the start
            	of the application until the creation of the logging event.</td>
            </tr>  
            
            <tr>
            	<td align="center"><b>t</b></td>
            
            	<td>Used to output the name of the thread that generated the
            	logging event.  Uses the thread number if no name is available.</td>
            </tr>
            
            <tr>
            	<td align="center"><b>x</b></td>
            
            	<td>Used to output the NDC (nested diagnostic context) associated
            	with the thread that generated the logging event.
            	</td>     
            </tr>
            
            <tr>
            	<td align="center"><b>X</b></td>
            
            	<td>Used to output the MDC (mapped diagnostic context) associated
            	with the thread that generated the logging event. The key to lookup
            	must be specified within braces and directly following the
            	pattern specifier, e.g. <c>%X{user}</c> would include the value
            	from the MDC that is keyed by the string 'user'. Each MDC value
            	that is to be included in the log must be specified seperatly.
            	</td>     
            </tr>
            
            <tr>
            	<td align="center"><b>%</b></td>
            
            	<td>The sequence %% outputs a single percent sign.
            	</td>     
            </tr>
            
            </table>
            
            <para>By default the relevant information is output as is. However,
            with the aid of format modifiers it is possible to change the
            minimum field width, the maximum field width and justification.</para>
            
            <para>The optional format modifier is placed between the percent sign
            and the conversion character.</para>
            
            <para>The first optional format modifier is the <i>left justification
            flag</i> which is just the minus (-) character. Then comes the
            optional <i>minimum field width</i> modifier. This is a decimal
            constant that represents the minimum number of characters to
            output. If the data item requires fewer characters, it is padded on
            either the left or the right until the minimum width is
            reached. The default is to pad on the left (right justify) but you
            can specify right padding with the left justification flag. The
            padding character is space. If the data item is larger than the
            minimum field width, the field is expanded to accommodate the
            data. The value is never truncated.</para>
            
            <para>This behavior can be changed using the <i>maximum field
            width</i> modifier which is designated by a period followed by a
            decimal constant. If the data item is longer than the maximum
            field, then the extra characters are removed from the
            <i>beginning</i> of the data item and not from the end. For
            example, it the maximum field width is eight and the data item is
            ten characters long, then the first two characters of the data item
            are dropped. This behavior deviates from the printf function in C
            where truncation is done from the end.</para>
            
            <para>Below are various format modifier examples for the category
            conversion specifier.</para>
            
            <table border="1" cellpadding="8">
            <th>Format modifier</th>
            <th>left justify</th>
            <th>minimum width</th>
            <th>maximum width</th>
            <th>comment</th>
            
            <tr>
            <td align="center">%20c</td>
            <td align="center">false</td>
            <td align="center">20</td>
            <td align="center">none</td>
            
            <td>Left pad with spaces if the category name is less than 20
            characters long.</td>
            </tr>
            
            <tr> <td align="center">%-20c</td> <td align="center">true</td> <td align="center">20</td> <td align="center">none</td> <td>Right pad with
            spaces if the category name is less than 20 characters long.</td></tr>
            
            <tr>
            <td align="center">%.30c</td>
            <td align="center">NA</td>
            <td align="center">none</td>
            <td align="center">30</td>
            
            <td>Truncate from the beginning if the category name is longer than 30
            characters.</td>
            </tr>
            
            <tr>
            <td align="center">%20.30c</td>
            <td align="center">false</td>
            <td align="center">20</td>
            <td align="center">30</td>
            
            <td>Left pad with spaces if the category name is shorter than 20
            characters. However, if category name is longer than 30 characters,
            then truncate from the beginning.</td>
            </tr>
            
            <tr>
            <td align="center">%-20.30c</td>
            <td align="center">true</td>
            <td align="center">20</td>
            <td align="center">30</td>
            
            <td>Right pad with spaces if the category name is shorter than 20
            characters. However, if category name is longer than 30 characters,
            then truncate from the beginning.</td>
            </tr>
            
            </table>
            
            <para>Below are some examples of conversion patterns.</para>
            
            <dl>
            
            <para><dt><b>%r [%t] %-5p %c %x - %m\n</b></dt></para>
            <para><dd>This is essentially the TTCC layout.</dd></para>
            
            <para><dt><b>%-6r [%15.15t] %-5p %30.30c %x - %m\n</b></dt></para>
            
            <para><dd>Similar to the TTCC layout except that the relative time is
            right padded if less than 6 digits, thread name is right padded if
            less than 15 characters and truncated if longer and the category
            name is left padded if shorter than 30 characters and truncated if
            longer.</dd></para>
            
            </dl>
            </remarks>
        </member>
        <member name="T:log4net.Layout.LayoutSkeleton">
            <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
        </member>
        <member name="T:log4net.Layout.ILayout">
            <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
        </member>
        <member name="M:log4net.Layout.ILayout.Format(log4net.spi.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
        </member>
        <member name="P:log4net.Layout.ILayout.ContentType">
            <summary>
            Returns the content type output by this layout. The base class returns "text/plain".
            </summary>
            <returns>the content type</returns>
        </member>
        <member name="P:log4net.Layout.ILayout.Header">
            <summary>
            Returns the header for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.ILayout.Footer">
            <summary>
            Returns the footer for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.ILayout.IgnoresException">
            <summary>
            If the layout handles the exception object contained within
            <see cref="T:log4net.spi.LoggingEvent"/>, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores exception
            object, then the layout should return <c>true</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.LINE_SEP">
            <summary>
            Platform end of line seperator
            </summary>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.LINE_SEP_LEN">
            <summary>
            length of end of line seperator
            </summary>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to option setters.
            </summary>
            <remarks>
            This allows to defer activiation of the options until all
            options have been set. This is required for components which have
            related options that remain ambigous until all are set.
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.Format(log4net.spi.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.ContentType">
            <summary>
            Returns the content type output by this layout. The base class returns "text/plain".
            </summary>
            <returns>the content type</returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Header">
            <summary>
            Returns the header for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Footer">
            <summary>
            Returns the footer for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.IgnoresException">
            <summary>
            If the layout handles the exception object contained within
            <see cref="T:log4net.spi.LoggingEvent"/>, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores exception
            object, then the layout should return <c>true</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:log4net.Layout.PatternLayout.DEFAULT_CONVERSION_PATTERN">
            <summary>
            Default pattern string for log output. 
            Currently set to the string <b>"%m%n"</b> 
            which just prints the application supplied	message. 
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.TTCC_CONVERSION_PATTERN">
            <summary>
            A conversion pattern equivalent to the TTCCCLayout. Current value is <b>%r [%t] %p %c %x - %m%n</b>.
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.BUF_SIZE">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.MAX_CAPACITY">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_sbuf">
            <summary>
            output buffer appended to when Format() is invoked
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor">
            <summary>
            Constructs a PatternLayout using the DEFAULT_LAYOUT_PATTERN
            </summary>
            <remarks>
            The default pattern just produces the application supplied message.
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor(System.String)">
            <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
        </member>
        <member name="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)">
            <summary>
            Returns PatternParser used to parse the conversion string. Subclasses
            may override this to return a subclass of PatternParser which recognize
            custom conversion characters.
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns></returns>
        </member>
        <member name="M:log4net.Layout.PatternLayout.ActivateOptions">
            <summary>
            Does not do anything as options become effective immediately.
            </summary>
        </member>
        <member name="M:log4net.Layout.PatternLayout.Format(log4net.spi.LoggingEvent)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the formatted string</returns>
        </member>
        <member name="P:log4net.Layout.PatternLayout.ConversionPattern">
            <summary>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </summary>
        </member>
        <member name="P:log4net.Layout.PatternLayout.IgnoresException">
            <summary>
            The PatternLayout does not handle the exception contained within
            LoggingEvents. Thus, it returns <c>true</c>.
            </summary>
        </member>
        <member name="T:log4net.Filter.PriorityRangeFilter">
            <summary>
            This is a simple filter based on priority matching.
            </summary>
            <remarks>
            <para>The filter admits three options <b>PriorityMin</b> and <b>PriorityMax</b>
            that determine the range of priorites that are matched, and
            <b>AcceptOnMatch</b>. If there is a match between the range
            of priorities and the priority of the LoggingEvent, then the 
            Decide method returns ACCEPT in case the <b>AcceptOnMatch</b> 
            option value is set to <c>true</c>, if it is <c>false</c>
             then DENY is returned. If there is no match, DENY is returned.</para>
            </remarks>
        </member>
        <member name="F:log4net.Filter.PriorityRangeFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behaviour when matching a priority
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityRangeFilter.m_priorityMin">
            <summary>
            the minimum priority value to match
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityRangeFilter.m_priorityMax">
            <summary>
            the maximum priority value to match
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityRangeFilter.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityRangeFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Check if the event should be logged.
            </summary>
            <remarks>
            If the priority of the logging event is outside the range
            matched by this filter then <see cref="F:log4net.Filter.FilterSkeleton.DENY"/>
            is returned. If the priority is matched then the value of
            <see cref="P:log4net.Filter.PriorityRangeFilter.AcceptOnMatch"/> is checked. If it is true then
            <see cref="F:log4net.Filter.FilterSkeleton.ACCEPT"/> is returned, otherwise
            <see cref="F:log4net.Filter.FilterSkeleton.NEUTRAL"/> is returned.
            </remarks>
            <param name="loggingEvent">the logging event to check</param>
            <returns>see remarks</returns>
        </member>
        <member name="P:log4net.Filter.PriorityRangeFilter.AcceptOnMatch">
            <summary>
            The AcceptOnMatch property is a flag that determines
            the behaviour when a matching Priority is found. If the
            flag is set to true then the filter will ACCEPT the 
            logging event, otherwise it will NEUTRAL the event.
            </summary>
        </member>
        <member name="P:log4net.Filter.PriorityRangeFilter.PriorityMin">
            <summary>
            Set the minimum matched priority
            </summary>
        </member>
        <member name="P:log4net.Filter.PriorityRangeFilter.PriorityMax">
            <summary>
            Sets the maximum matched priority
            </summary>
        </member>
        <member name="T:log4net.Appender.EventLogAppender">
            <summary>
            EventLogAppender writes events to the system
            event log.
            
            This class uses a StringWriter to act at
            the Writer, delegates the call to the base
            class, which generates output in the
            StringWriter's StringBuffer.  This string is 
            then passed to the system event log.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.s_mapPriority2EventLogEntryType">
            <summary>
            Hold a mapping between Priority objects and
            EventLogEntryTypes
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#cctor">
            <summary>
            Initialise static variables when this class is 
            loaded.
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.ConvertPriority2EventLogEntryType(log4net.Priority)">
            <summary>
            Get the equivalent <see cref="T:System.Diagnostics.EventLogEntryType"/> for a <see cref="T:log4net.Priority"/> <paramref name="p"/>
            </summary>
            <param name="p">the Priority to convert to an EventLogEntryType</param>
            <returns>The eqivalent <see cref="T:System.Diagnostics.EventLogEntryType"/> for a <see cref="T:log4net.Priority"/> <paramref name="p"/></returns>
            <remarks>
            Because there are fewer applicable <see cref="T:System.Diagnostics.EventLogEntryType"/>
            values to use in logging levels than there are in the 
            <see cref="T:log4net.Priority"/> this is a one way mapping. There is
            a loss of information during the conversion.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_writer">
            <summary>
            This string buffers the message to be written to the event log
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_logName">
            <summary>
            The log name is the section in the event logs where the messages
            are stored.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_applicationName">
            <summary>
            Name of the application to use when logging.  This appears in the
            application column of the event log named by m_sourceName.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_eventLog">
            <summary>
            Object we use to write to the event log
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.CloseWriter">
            <summary>
            Override the parent method to close the default trace channel
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.LogName">
            <summary>
            The name of the log where messages will be stored.
            </summary>
            <value>
            The string name of the log where messages will be stored.
            </value>
            <remarks>
            <para>This is the name of the log as it appears in the Event Viewer
            tree. The default value is to log into the <c>Application</c>
            log, this is where most applications write their events. However
            if you need a seperate log for your application (or applications)
            then you should set the <c>LogName</c> appropriatly.</para>
            <para>This should not be used to distinguish your event log messages
            from those of other applications, the <see cref="P:log4net.Appender.EventLogAppender.ApplicationName"/>
            property should be used to distinguish events. This property should be 
            used to group together events into a single log.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.ApplicationName">
            <summary>
            Property used to set the Application name.  This appears in the
            event logs when logging.
            </summary>
            <value>
            The string used to distinguish events from different sources.
            </value>
            <remarks>
            Sets the event log source property.
            </remarks>
        </member>
        <member name="T:log4net.spi.ProvisionNode">
            <summary>
            Summary description for ProvisionNode.
            ProvisionNodes are used in the Hierarchy when
            there is no specified category for that node.
            </summary>
        </member>
        <member name="M:log4net.spi.ProvisionNode.#ctor(log4net.Category)">
            <summary>
            Construct new node with specified child category
            </summary>
            <param name="cat">a child category to add to this node</param>
        </member>
        <member name="T:log4net.Filter.StringMatchFilter">
            <summary>
            Simple filter to match a string in the rendered message
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behaviour when we have a match
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_stringToMatch">
            <summary>
            The string to substring match against the message
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <remarks>
            The rendered message is mached agains the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/>.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> occurs as a substring within
            the message then a match will have occured. If no match occures
            this function will return <see cref="F:log4net.Filter.FilterSkeleton.NEUTRAL"/>
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterSkeleton.ACCEPT"/> is returned otherwise
            <see cref="F:log4net.Filter.FilterSkeleton.DENY"/> is returned.
            </remarks>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.AcceptOnMatch">
            <summary>
            The AcceptOnMatch property is a flag that determines
            the behaviour when a matching Priority is found. If the
            flag is set to true then the filter will ACCEPT the 
            logging event, otherwise it will DENY the event.
            </summary>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.StringToMatch">
            <summary>
            The string that will be substring matched against
            the rendered message. If the message contains this
            string then the filter will match.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.ISO8601DateFormatter">
            <summary>
            Format the date specifed as a string: 'YYYY-MM-dd HH:mm:ss,SSS'
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.ISO8601DateFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.ISO8601DateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Format the date specifed as a string: 'YYYY-MM-dd HH:mm:ss'
            the base class will append the ',SSS' milliseconds section.
            We will only be called at most once per second.
            </summary>
            <param name="date">the date to format</param>
            <param name="sbuf">the string builder to write to</param>
        </member>
        <member name="T:log4net.Config.DOMConfigurator">
            <summary>
            Use this class to initialize the log4net environment using a DOM tree.
            </summary>
        </member>
        <member name="F:log4net.Config.DOMConfigurator.m_appenderBag">
            <summary>
            key: appenderName, value: appender
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.#ctor">
            <summary>
            No argument constructor.
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure">
            <summary>
            Automaticaly configure the log4net system based on the 
            application's configuration settings.
            </summary>
            <remarks>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            Replace but not override the Configure() method on 
            BasicConfigurator.
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configure log4net using a <c>log4net</c> element
            </summary>
            <remarks>
            Load the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </remarks>
            <param name="element">the element to parse</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            Configure log4net using the config file specified.
            </summary>
            <param name="configFile">the XML config file to load
            the configuration from</param>
            <remarks>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            <para>
            The logging file could be specified in the applications
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            To Load the configuration use code like:
            </para>
            <code>
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
            <para>In your <c>.config</c> file you must specify the config file to
            use like this:</para>
            <code>
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="log4net-config-file" value="log.config"/&gt;
            	&lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            <param>
            Of course you don't have to do it like that if you don't want to.
            </param>
            <param>
            If you need to monitor this file for changes and reload the
            configuration when the config file's contents changes then
            you should use the <see cref="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)"/> method
            instead.
            </param>
            </remarks>
            <seealso cref="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)"/>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            Configure log4net using the file specified, monitor the file for changes 
            and reload the configuration if a change is detected.
            </summary>
            <param name="configFile">the XML config file to load
            the configuration from</param>
            <remarks>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            <para>
            The config file will be monitored using a <see cref="T:System.IO.FileSystemWatcher"/>
            and is dependant on the behaviour of that class.
            </para>
            <para>
            For more information on how to configure log4net using
            a seperate config file see <see cref="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)"/>.
            </para>
            </remarks>
            <seealso cfer="Configure(FileInfo)"/>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Parse(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to configure the log4net framework by parsing a DOM tree of XML elements.
            </summary>
            <param name="element">the root element to parse</param>
            <param name="hierarchy">the hierarchy to build</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
            <summary>
            Used internally to parse appenders by IDREF.
            </summary>
            <param name="appenderRef">the appender ref element</param>
            <returns>the instance of the appender that the ref referes to</returns>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseAppender(System.Xml.XmlElement)">
            <summary>
            Used internally to parse an appender element.
            </summary>
            <param name="appenderElement">the appender element</param>
            <returns>the appender instance</returns>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseErrorHandler(System.Xml.XmlElement,log4net.Appender.IAppender)">
            <summary>
            Used internally to parse an error handler element.
            </summary>
            <param name="element">the error hander element</param>
            <param name="appender">the appender to set the error handler on</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseFilters(System.Xml.XmlElement,log4net.Appender.IAppender)">
            <summary>
            Used internally to parse a filter element.
            </summary>
            <param name="element">the filter element</param>
            <param name="appender">the appender to add the filter to</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseCategory(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse an category element.
            </summary>
            <param name="categoryElement">the category element</param>
            <param name="hierarchy">the hierarchy to add the category to</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseCategoryFactory(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse the category factory element.
            </summary>
            <param name="factoryElement">the factory element</param>
            <param name="hierarchy">the hierarchy to set the category factory on</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseRoot(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse the roor category element.
            </summary>
            <param name="rootElement">the root element</param>
            <param name="hierarchy">the hierarchy to set the root element on</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseChildrenOfCategoryElement(System.Xml.XmlElement,log4net.Category,System.Boolean)">
            <summary>
            Used internally to parse the children of a category element.
            </summary>
            <param name="catElement">the catefory element</param>
            <param name="cat">the category instance</param>
            <param name="isRoot">flag to indicate if the category is the root category</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseLayout(System.Xml.XmlElement)">
            <summary>
            Used internally to parse a layout element.
            </summary>
            <param name="layout_element">the layout element</param>
            <returns>the instance of the layout object</returns>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseRenderer(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse an object renderer
            </summary>
            <param name="element">the renderer element</param>
            <param name="hierarchy">the hierarchy to add the renderer to</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParsePriority(System.Xml.XmlElement,log4net.Category,System.Boolean)">
            <summary>
            Used internally to parse a priority element.
            </summary>
            <param name="element">the priority element</param>
            <param name="cat">the category object to set the priority on</param>
            <param name="isRoot">flag to indicate if the category is the root category</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
            <summary>
            Internal function to set a param on an object.
            </summary>
            <remarks>
            The param name must correspond to a writable property
            on the object. The value of the param is a string,
            therefore this function will attempt to set a string
            property first. If unable to set a string property it
            will inspect the property and its argument type. It will
            attempt to call a static method called 'Parse' on the
            type of the property. This method will take a single
            string argument and return a value that can be used to
            set the property.
            </remarks>
            <param name="elem">the param element</param>
            <param name="target">the object to set the param on</param>
        </member>
        <member name="T:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler">
            <summary>
            Internal class used to watch config files
            </summary>
        </member>
        <member name="F:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.m_configFile">
            <summary>
            Hold the FileInfo used to configure the DOMConfigurator
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.#ctor(System.IO.FileInfo)">
            <summary>
            Construct a new watch handler.
            </summary>
            <param name="configFile">the config file to watch</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">the <see cref="T:System.IO.FileSystemWatcher"/> firing the event</param>
            <param name="e">the argument indicates the file that caused the event to be fired</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">the <see cref="T:System.IO.FileSystemWatcher"/> firing the event</param>
            <param name="e">the argument indicates the file that caused the event to be fired</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="T:log4net.Appender.ConsoleAppender">
            <summary>
            ConsoleAppender appends log events to <see cref="P:System.Console.Out"/> 
            or <see cref="P:System.Console.Error"/>  using a layout specified by the 
            user. The default target is <see cref="P:System.Console.Out"/> .
            </summary>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.CONSOLE_OUT">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writting to the Console standard out
            </summary>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.CONSOLE_ERR">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writting to the Console standard error
            </summary>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.m_target">
            <summary>
            The target that is being used by the appender
            </summary>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Initialise the appender with a specified layout and 
            console output stream.
            The console output stream must be <c>"Console.Out"</c>
            or <c>"Console.Error"</c>
            </summary>
            <param name="layout">the layout object to use</param>
            <param name="target">the console output stream</param>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.TargetWarn(System.String)">
            <summary>
            Internal method called to indicate an error with
            the console stream name provided.
            </summary>
            <param name="val">the erroneous console stream name</param>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.CloseWriter">
            <summary>
            Override the parent method to do nothing.
            </summary>
        </member>
        <member name="P:log4net.Appender.ConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>Console.Out</c> or <c>Console.Error</c>.
            </summary>
        </member>
        <member name="T:log4net.spi.CategoryKey">
            <summary>
            CategoryKey is heavily used internally to accelerate hash table searches.
            </summary>
        </member>
        <member name="T:log4net.ObjectRenderer.RendererMap">
            <summary>
            Map class objects to an <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
            <summary>
            Find the appropriate renderer for the class type of the
            <paramref name="o"/> parameter. This is accomplished by calling the
            <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)"/> method. Once a renderer is found, it is
            applied on the object <paramref name="o"/> and the result is returned
            as a <see cref="T:System.String"/>.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)">
            <summary>
            Syntactic sugar method that calls <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)"/> with the class of the object parameter.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)">
            <summary>
            Gets the renderer for the specified type
            </summary>
            <param name="clazz"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.SearchInterfaces(System.Type)">
            <summary>
            Internal function to recusivly search interfaces
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Clear">
            <summary>
            Clear the map of renderers
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Register an <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> for <paramref name="clazz"/>. 
            </summary>
            <param name="clazz"></param>
            <param name="or"></param>
        </member>
        <member name="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer">
            <summary>
            Get the default renderer instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.DateFormatter.SimpleDateFormatter">
            <summary>
            Format the <c>DateTime</c> using the <see cref="T:System.DateTime"/>.<see cref="M:System.DateTime.ToString"/>
            method.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.SimpleDateFormatter.m_formatString">
            <summary>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:System.DateTime.ToString"/>.
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.#ctor(System.String)">
            <summary>
            Construct a simple date formatter with a format string
            </summary>
            <remarks>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:System.DateTime.ToString"/>.
            </remarks>
            <param name="formatString">the format string</param>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.FormatDate(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Format the date using <see cref="M:System.DateTime.ToString"/>
            </summary>
            <param name="date">the date to convert to a string</param>
            <param name="buf">the builder to write to</param>
            <returns>the builder passed</returns>
        </member>
        <member name="T:log4net.Config.Log4NetConfigurationSectionHandler">
            <summary>
            Class to register for the log4net section of the configuration file
            </summary>
            <remarks>
            The log4net section of the configuration file needs to have a section
            handler registered. This is the section handler used. It simply returns
            the XML element that is the root of the section.
            </remarks>
            <example>
            Example of registering the section handler
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;configSections&gt;
            		&lt;section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" /&gt;
            	&lt;/configSections&gt;
            	&lt;log4net&gt;
            		log4net configuration XML goes here
            	&lt;/log4net&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            method called to parse the configuration section
            </summary>
            <param name="parent">ignored</param>
            <param name="configContext">ignored</param>
            <param name="section">the XML node for the section</param>
            <returns>the XML node for the section</returns>
        </member>
        <member name="T:log4net.Appender.CountingAppender">
            <summary>
            Implements an Appender for test purposes that counts the
            number of output calls to Append
            </summary>
        </member>
        <member name="F:log4net.Appender.CountingAppender.m_counter">
            <summary>
            Counts the number of times DoAppend has been called
            </summary>
        </member>
        <member name="M:log4net.Appender.CountingAppender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.Appender.CountingAppender.Append(log4net.spi.LoggingEvent)">
            <summary>
            Registers how many times the method has been called
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:log4net.Appender.CountingAppender.RequiresLayout">
            <summary>
            This class doesn't have it's own layout object
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.CountingAppender.Close">
            <summary>
            Stubbed out - does nothing.  
            </summary>
        </member>
        <member name="P:log4net.Appender.CountingAppender.Counter">
            <summary>
            Returns the number of times DoAppend has been called
            </summary>
        </member>
        <member name="T:log4net.Priority">
            <summary>
            Defines the minimum set of priorities recognized by the system.
            </summary>
            <remarks>
            Defines the minimum set of priorities recognized by the system,	
            that is FATAL, ERROR, WARN, INFO and DEBUG.
            The <c>Priority</c> class may be subclassed to define a larger priority set.
            </remarks>
        </member>
        <member name="F:log4net.Priority.FATAL">
            <summary>
            The <c>FATAL</c> priority designates very severe error events that will presumably lead the application to abort.
            </summary>
        </member>
        <member name="F:log4net.Priority.ERROR">
            <summary>
            The <c>ERROR</c> priority designates error events that might still allow the application to continue running.
            </summary>
        </member>
        <member name="F:log4net.Priority.WARN">
            <summary>
            The <c>WARN</c> priority designates potentially harmful situations.
            </summary>
        </member>
        <member name="F:log4net.Priority.INFO">
            <summary>
            The <c>INFO</c> priority designates informational messages that highlight the progress of the application at coarse-grained level.
            </summary>
        </member>
        <member name="F:log4net.Priority.DEBUG">
            <summary>
            The <c>DEBUG</c> priority designates fine-grained informational events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Priority.OFF">
            <summary>
            The <c>OFF</c> priority designates a lower level priority than all the rest.
            </summary>
        </member>
        <member name="M:log4net.Priority.#ctor(System.Int32,System.String)">
            <summary>
            Instantiate a priority object.
            </summary>
            <param name="level"></param>
            <param name="levelStr"></param>
        </member>
        <member name="M:log4net.Priority.ToString">
            <summary>
            Returns the string representation of this priority.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Priority.Equals(System.Object)">
            <summary>
            Override Equals to compare the levels of
            Priority objects. Defers to base class if
            the target object is not a Priority.
            </summary>
            <param name="o">The object to compare against</param>
            <returns>true if the objects are equal</returns>
        </member>
        <member name="M:log4net.Priority.GetHashCode">
            <summary>
            Returns a hash code that is sutable for use in a hashtree etc
            </summary>
            <returns>the hash of this object</returns>
        </member>
        <member name="M:log4net.Priority.op_GreaterThan(log4net.Priority,log4net.Priority)">
            <summary>
            Operator greater than that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is greater than the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_LessThan(log4net.Priority,log4net.Priority)">
            <summary>
            Operator less than that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is less than the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_GreaterThanOrEqual(log4net.Priority,log4net.Priority)">
            <summary>
            Operator greater than or equal that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is greater than or equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_LessThanOrEqual(log4net.Priority,log4net.Priority)">
            <summary>
            Operator less than or equal that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is less than or equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_Equality(log4net.Priority,log4net.Priority)">
            <summary>
            Operator equals that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_Inequality(log4net.Priority,log4net.Priority)">
            <summary>
            Operator not equals that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is not equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.String)">
            <summary>
            Convert the string passed as argument to a priority. If the
            conversion fails, then this method returns <see cref="F:log4net.Priority.DEBUG"/>.
            </summary>
            <param name="sArg">The string to parse into a Priority</param>
            <returns>The Priority represented by the string argument</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.Int32)">
            <summary>
            Convert an integer passed as argument to a priority. If the
            conversion fails, then this method returns <see cref="F:log4net.Priority.DEBUG"/>.
            </summary>
            <param name="val">The int to convert to a Priority</param>
            <returns>The Priority represented by the argument</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.Int32,log4net.Priority)">
            <summary>
            Convert an integer passed as argument to a priority. If the
            conversion fails, then this method returns the specified default.
            </summary>
            <param name="val">The value to convert to a Prority</param>
            <param name="defaultPriority">The default Priority value to use</param>
            <returns>The Priority represented by the Argument</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.String,log4net.Priority)">
            <summary>
            Convert the string passed as argument to a priority. If the
            conversion fails, then this method returns the value of
            <c>defaultPriority</c>.
            </summary>
            <param name="sArg">The string to parse</param>
            <param name="defaultPriority">the default Priority to use</param>
            <returns>The Priority represented by the argument</returns>
        </member>
        <member name="P:log4net.Priority.AllPossiblePriorities">
            <summary>
            Return all possible priorities as an array of Priority objects in descending order.
            </summary>
            <returns>all possible priorities as an array of Priority objects in descending order</returns>
        </member>
        <member name="T:log4net.helpers.CountingQuietTextWriter">
            <summary>
            Subclass of QuietTextWriter that maintains a count of the number of chars written
            </summary>
        </member>
        <member name="F:log4net.helpers.CountingQuietTextWriter.m_count">
            <summary>
            member variable to hold the total count of chars written
            </summary>
        </member>
        <member name="M:log4net.helpers.CountingQuietTextWriter.#ctor(System.IO.TextWriter,log4net.spi.IErrorHandler)">
            <summary>
            Create a new CountingQuietTextWriter using a writer and error handler
            </summary>
            <param name="writer">the writer to actualy write to</param>
            <param name="errorHandler">the error handler to report error to</param>
        </member>
        <member name="M:log4net.helpers.CountingQuietTextWriter.Write(System.String)">
            <summary>
            Write a string to the output. Count the number of chars written.
            </summary>
            <param name="str">the string data to write to the output</param>
        </member>
        <member name="P:log4net.helpers.CountingQuietTextWriter.Count">
            <summary>
            The total number of characters written
            </summary>
        </member>
        <member name="T:log4net.Filter.DenyAllFilter">
            <summary>
            This filter drops all logging events. 
            </summary>
            <remarks>
            You can add this filter to the end of a filter chain to
            switch from the default "accept all unless instructed otherwise"
            filtering behaviour to a "deny all unless instructed otherwise"
            behaviour.	
            </remarks>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Always returns the integer constant <see cref="F:log4net.Filter.FilterSkeleton.DENY"/>
            </summary>
            <remarks>
            Ignores the event being logged and just returns
            DENY. This can be used to change the default filter
            chain behaviour from ACCEPT to DENY. This filter
            should only be used as the last filter in the chain
            as any further filters will be ignored!
            </remarks>
            <param name="loggingEvent">he LoggingEvent to filter</param>
            <returns>Always returns <see cref="F:log4net.Filter.FilterSkeleton.DENY"/></returns>
        </member>
    </members>
</doc>
=======
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>log4net</name>
    </assembly>
    <members>
        <member name="T:log4net.helpers.PatternConverter">
            <summary>
            PatternConverter is an abtract class that provides the
            formatting functionality that derived classes need.
            </summary>
            <remarks>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </remarks>
        </member>
        <member name="M:log4net.helpers.PatternConverter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternConverter.#ctor(log4net.helpers.FormattingInfo)">
            <summary>
            Construct the pattern converter using a formatting info object
            </summary>
            <param name="fi">the formatting info object to use</param>
        </member>
        <member name="M:log4net.helpers.PatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="loggingEvent"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.helpers.PatternConverter.Format(System.Text.StringBuilder,log4net.spi.LoggingEvent)">
            <summary>
            A template method for formatting in a converter specific way.
            </summary>
            <param name="sbuf"></param>
            <param name="e"></param>
        </member>
        <member name="M:log4net.helpers.PatternConverter.SpacePad(System.Text.StringBuilder,System.Int32)">
            <summary>
            Fast space padding method.
            </summary>
            <param name="sbuf"></param>
            <param name="length"></param>
        </member>
        <member name="P:log4net.helpers.PatternConverter.Next">
            <summary>
            the next patter converter in the chain
            </summary>
        </member>
        <member name="T:log4net.helpers.OnlyOnceErrorHandler">
            <summary>
            The <c>OnlyOnceErrorHandler</c> implements log4net's default
            error handling policy which consists of emitting a message for the
            first error in an appender and ignoring all following errors.
            </summary>
            <remarks>
            <para>The error message is printed on <see cref="P:System.Console.Error"/>. </para>
            
            <para>This policy aims at protecting an otherwise working application
            from being flooded with error messages when logging fails.</para>
            </remarks>
        </member>
        <member name="T:log4net.spi.IErrorHandler">
            <summary>
            Appenders may delegate their error handling to ErrorHandlers.
            </summary>
            <remarks>
            Error handling is a particularly tedious to get right because by
            definition errors are hard to predict and to reproduce. 
            </remarks>
        </member>
        <member name="M:log4net.spi.IErrorHandler.Error(System.String,System.Exception,log4net.spi.ErrorCodes)">
            <summary>
            This method should handle the error. Information about the error
            condition is passed a parameter.
            </summary>
            <param name="message">The message assoicated with the error</param>
            <param name="e">The Exption that was thrown when the error occured</param>
            <param name="errorCode">The error code associated with the error</param>
        </member>
        <member name="M:log4net.spi.IErrorHandler.Error(System.String)">
            <summary>
            This method prints the error message passed as a parameter.
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:log4net.helpers.OnlyOnceErrorHandler.m_firstTime">
            <summary>
            Flag to indicate if it is the first error
            </summary>
        </member>
        <member name="M:log4net.helpers.OnlyOnceErrorHandler.Error(System.String,System.Exception,log4net.spi.ErrorCodes)">
            <summary>
            Prints the message and the stack trace of the exception on <see cref="P:System.Console.Error"/>
            </summary>
            <param name="message">the error message</param>
            <param name="e">the exception</param>
            <param name="errorCode">the internal error code</param>
        </member>
        <member name="M:log4net.helpers.OnlyOnceErrorHandler.Error(System.String)">
            <summary>
            Print a the error message passed as parameter on <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="message">the error message</param>
        </member>
        <member name="T:log4net.Filter.IFilter">
            <summary>
            Users should implement this interface to implement customized logging
            event filtering.
            </summary>
            <remarks>
            <para>Users should implement this interface to implement customized logging
            event filtering. Note that <see cref="T:log4net.Category"/> and 
            <see cref="T:log4net.Appender.AppenderSkeleton"/>, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.</para>
            
            <para>This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.IFilter.Decide(log4net.spi.LoggingEvent)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.</para>
            
            <para>The <see cref="M:log4net.Filter.IFilter.Decide(log4net.spi.LoggingEvent)"/> method must return one
            of the integer constants <c>DENY</c>, <c>NEUTRAL</c> or <c>ACCEPT</c>.</para>
            
            <para>If the value <c>DENY</c> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters. </para>
            
            <para>If the value <c>NEUTRAL</c> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behaviour is to log all logging events.</para>
            
            <para>If the value <c>ACCEPT</c> is returned, then the log
            event is logged without consulting the remaining filters. </para>
            
            <para>The philosophy of log4net filters is largely inspired from the
            Linux ipchains. </para>
            </remarks>
        </member>
        <member name="T:log4net.spi.IOptionHandler">
            <summary>
            A string based interface to configure package components.
            </summary>
        </member>
        <member name="M:log4net.spi.IOptionHandler.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to option setters.
            </summary>
            <remarks>
            This allows to defer activiation of the options until all
            options have been set. This is required for components which have
            related options that remain ambigous until all are set.
            </remarks>
        </member>
        <member name="M:log4net.Filter.IFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
            <remarks>
            <para>If the decision is <c>DENY</c>, then the event will be
            dropped. If the decision is <c>NEUTRAL</c>, then the next
            filter, if any, will be invoked. If the decision is <c>ACCEPT</c> then
            the event will be logged without consulting with other filters in
            the chain.</para>
            </remarks>
            <param name="loggingEvent">The LoggingEvent to decide upon</param>
            <returns>The decision of the filter</returns>
        </member>
        <member name="P:log4net.Filter.IFilter.Next">
            <summary>
            Property to get and set the next filter in the filter
            chain of responsability.
            </summary>
        </member>
        <member name="T:log4net.spi.LoggingEvent">
            <summary>
            The internal representation of logging events. 
            </summary>
            <remarks>
            <para>When an affirmative
            decision is made to log then a <c>LoggingEvent</c> instance
            is created. This instance is passed around to the different log4net
            components.</para>
            <para>This class is of concern to those wishing to extend log4net.</para>
            </remarks>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_fqnOfCategoryClass">
            <summary>
            Fully qualified name of the calling category class.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_category">
            <summary>
            The category of the logging event. The category field is not
            serialized for performance reasons.
            It is set by the LoggingEvent constructor or set by a remote
            entity after deserialization.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_categoryName">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_priority">
            <summary>
            Priority of logging event. Priority cannot be serializable
            because it is a flyweight.  Due to its special seralization it
            cannot be declared final either.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_ndc">
            <summary>
            The nested diagnostic context (NDC) of logging event.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_ndcLookupRequired">
            <summary>
            Have we tried to do an NDC lookup? If we did, there is no need
            to do it again.  Note that its value is always false when
            serialized. Thus, a receiving SocketNode will never use it's own
            (incorrect) NDC. See also writeObject method.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_message">
            <summary>
            The application supplied message of logging event.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_renderedMessage">
            <summary>
            The application supplied message rendered through 
            the log4net object rendering mechanism.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_threadName">
            <summary>
            The name of thread in which this logging event was generated
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_stackTraceInfo">
            <summary>
            This variable contains information about this event's throwable 
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_timeStamp">
            <summary>
            The number of milliseconds elapsed from 1/1/1970 until logging event was created.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_locationInfo">
            <summary>
            Location information for the caller.
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_WindowsIdentityName">
            <summary>
            String representation of the user's windows name,
            like DOMAIN\username
            </summary>
        </member>
        <member name="F:log4net.spi.LoggingEvent.m_thrownException">
            <summary>
            Hold the exception thown if nessasary
            </summary>
        </member>
        <member name="M:log4net.spi.LoggingEvent.#ctor(System.String,log4net.Category,log4net.Priority,System.Object,System.Exception)">
            <summary>
            Instantiate a LoggingEvent from the supplied parameters.
            </summary>
            <remarks>
            Except <see cref="F:log4net.spi.LoggingEvent.m_timeStamp"/> all the other fields of
            <c>LoggingEvent</c> are filled when actually needed.
            </remarks>
            <param name="fqnOfCategoryClass"></param>
            <param name="category">The category of this event</param>
            <param name="priority">The priority of this event</param>
            <param name="message">The message of this event</param>
            <param name="throwable">The throwable of this event</param>
        </member>
        <member name="M:log4net.spi.LoggingEvent.LookupMappedContext(System.String)">
            <summary>
            Lookup the kep specified in the MDC
            </summary>
            <param name="key">the key to lookup</param>
            <returns>the value associated with the key, or null if the key was not found</returns>
        </member>
        <member name="M:log4net.spi.LoggingEvent.GetExceptionStrRep">
            <summary>
            Return this event's exception's string[] representaion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.spi.LoggingEvent.ExceptionToString(System.Exception)">
            <summary>
            Convert an Exception to a string
            </summary>
            <param name="ex">the exception to convert to a string</param>
            <returns>the string representation of the exception</returns>
            <remarks>
            Similar to the Exception.ToString() method, but recursivly 
            inspects the inner exceptions
            </remarks>
        </member>
        <member name="P:log4net.spi.LoggingEvent.Priority">
            <summary>
            The Priority of the logging event
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.TimeStamp">
            <summary>
            The time of the event
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.CategoryName">
            <summary>
            The name of the category that logged the event
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.LocationInformation">
            <summary>
            Set the location information for this logging event. The collected
            information is cached for future use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.Message">
            <summary>
            Return the message for this logging event.
            </summary>
            <remarks>
            Before serialization, the returned object is the message
            passed by the user to generate the logging event. After
            serialization, the returned value equals the String form of the
            message possibly after object rendering. 
            </remarks>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.NestedContext">
            <summary>
            Get the NDC
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.RenderedMessage">
            <summary>
            Get the message (rendered through the Layouts)
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.StartTime">
            <summary>
            Returns the time when the application started, in milliseconds elapsed since 01.01.1970.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.ThreadName">
            <summary>
            Get the name of the current thread.  Returns the thread ID
            when the name is not available
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LoggingEvent.WindowsIdentityName">
            <summary>
            Returns the identity of the current user.
            
            To improve performance, we could 
            cache the string representation of the name, and reuse that
            as long as the identity stayed constant.  Once the identity changed,
            we would need to re-assign and re-render the string.
            
            However, the GetCurrent call seems to return different objects
            every time...so the current implementation doesn't do this type
            of caching.
            
            Timing for these operations:
            
            00:00:00.2031250 sec, 10000 loops, WindowsIdentity.GetCurrent()
            00:00:08.0468750 sec, 10000 loops, WindowsIdentity.GetCurrent().Name.ToString()
            
            So we could speed things up almost 40 times by caching the ToString 
            operation, since the .Name.ToString() takes (8.04-0.20)=7.84375 sec
            </summary>
        </member>
        <member name="P:log4net.spi.LoggingEvent.ThrowableInformation">
            <summary>
            Returns the throwable information contained within this
            event. May be <c>null</c> if there is no such information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.CategoryCreationEventHandler">
            <summary>
            Delegate used to handle category creation event notifications
            </summary>
            <param name="h">The Hierarchy in which the event handler is registered</param>
            <param name="cat">The category that has been created</param>
            <remarks>
            Delegate used to handle category creation event notifications
            </remarks>
        </member>
        <member name="T:log4net.Hierarchy">
            <summary>
            This class is specialized in retrieving categories by name and
            also maintaining the category hierarchy.
            </summary>
            <remarks>
            <para><i>The casual user should not have to deal with this class
            directly.</i> In fact, up until version 0.9.0, this class had
            default package access. However, if you are in an environment where
            multiple applications run in the same VM, then read on.</para>
            
            <para>The structure of the category hierarchy is maintained by the
            <see cref="M:log4net.Hierarchy.GetInstance(System.String)"/> method. The hierarchy is such that children
            link to their parent but parents do not have any pointers to their
            children. Moreover, categories can be instantiated in any order, in
            particular descendant before ancestor.</para>
            
            <para>In case a descendant is created before a particular ancestor,
            then it creates a provision node for the ancestor and adds itself
            to the provision node. Other descendants of the same ancestor add
            themselves to the previously created provision node.</para>
            </remarks>
        </member>
        <member name="M:log4net.Hierarchy.#ctor(log4net.Category)">
            <summary>
            Create a new Category hierarchy.
            </summary>
            <param name="root">The root of the new hierarchy</param>
        </member>
        <member name="M:log4net.Hierarchy.AddRenderer(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Add an object renderer for a specific class. 
            </summary>
            <param name="classToRender">The type that will be rendered by the renderer supplied</param>
            <param name="or">The object renderer used to render the object</param>
        </member>
        <member name="M:log4net.Hierarchy.Clear">
            <summary>
            Clear all category definitions from the internal hashtable
            </summary>
            <remarks>
            This call will clear all category definitions from the internal
            hashtable. Invoking this method will irrevocably mess up the
            category hierarchy.
            
            <para>You should <b>really</b> know what you are doing before
            invoking this method.</para>
            </remarks>
        </member>
        <member name="M:log4net.Hierarchy.Exists(System.String)">
            <summary>
            Check if the named category exists in the hierarchy. If so return
            its reference, otherwise returns <c>null</c>.
            </summary>
            <param name="name">The name of the category to lookup</param>
            <returns>The Category object with the name specified</returns>
        </member>
        <member name="M:log4net.Hierarchy.Disable(System.String)">
            <summary>
            Similar to <see cref="M:log4net.Hierarchy.Disable(log4net.Priority)"/> except that the priority
            argument is given as a String.
            </summary>
            <param name="priorityStr">The priority to disable, as a string</param>
        </member>
        <member name="M:log4net.Hierarchy.Disable(log4net.Priority)">
            <summary>
            Disable all logging requests of priority <i>equal to or
            below</i> the priority parameter <paramref name="p"/>, for
            <i>all</i> categories in this hierarchy. Logging requests of
            higher priority then <paramref name="p"/> remain unaffected.
            
            <para>The "disable" family of methods are there for speed. They
            allow printing methods such as debug, info, etc. to return
            immediately after an integer comparison without walking the
            category hierarchy. In most modern computers an integer
            comparison is measured in nanoseconds where as a category walk is
            measured in units of microseconds.</para>
            
            <para>Configurators define alternate ways of overriding the
            disable override flag.</para>
            </summary>
            <param name="p">Disable all logging requests of priority <i>equal to or below</i> the priority parameter</param>
        </member>
        <member name="M:log4net.Hierarchy.DisableAll">
            <summary>
            Disable all logging requests regardless of category and priority.
            This method is equivalent to calling <see cref="M:log4net.Hierarchy.Disable(System.String)"/> with the
            argument <see cref="F:log4net.Priority.FATAL"/>, the highest possible priority.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.DisableDebug">
            <summary>
            Disable all logging requests of priority DEBUG regardless of category.  
            This method is equivalent to calling <see cref="M:log4net.Hierarchy.Disable(System.String)"/> with the
            argument <see cref="F:log4net.Priority.DEBUG"/>, the highest possible priority.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.DisableInfo">
            <summary>
            Disable all logging requests of priority DEBUG and INFO regardless of category.  
            This method is equivalent to calling <see cref="M:log4net.Hierarchy.Disable(System.String)"/> with the
            argument <see cref="F:log4net.Priority.INFO"/>, the highest possible priority.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.EnableAll">
            <summary>
            Undoes the effect of calling any of <see cref="M:log4net.Hierarchy.Disable(System.String)"/>, <see cref="M:log4net.Hierarchy.DisableAll"/>
            <see cref="M:log4net.Hierarchy.DisableDebug"/> and <see cref="M:log4net.Hierarchy.DisableInfo"/>
            methods. More precisely, invoking this method sets the Category
            class internal variable called <c>disable</c> to its
            default "off" value.
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.FireCategoryCreationEvent(log4net.Category)">
            <summary>
            Sends a category creation event to all registered listeners
            </summary>
            <param name="category">The newly created category</param>
        </member>
        <member name="M:log4net.Hierarchy.GetInstance(System.String)">
            <summary>
            Return a new category instance named as the first parameter using
            the default factory.
            
            <para>If a category of that name already exists, then it will be
            returned.  Otherwise, a new category will be instantiated and
            then linked with its existing ancestors as well as children.</para>
            </summary>
            <param name="name">The name of the category to retrieve</param>
            <returns>The category object with the name specified</returns>
        </member>
        <member name="M:log4net.Hierarchy.GetInstance(System.String,log4net.spi.ICategoryFactory)">
            <summary>
            Return a new category instance named as the first parameter using
            <paramref name="factory"/>.
            </summary>
            <remarks>
            If a category of that name already exists, then it will be
            returned. Otherwise, a new category will be instantiated by the
            <paramref name="factory"/> parameter and linked with its existing
            ancestors as well as children.
            </remarks>
            <param name="name">The name of the category to retrieve</param>
            <param name="factory">The factory that will make the new category instance</param>
            <returns>The category object with the name specified</returns>
        </member>
        <member name="M:log4net.Hierarchy.GetCurrentCategories">
            <summary>
            Returns all the currently defined categories in the default
            hierarchy as an <see cref="T:System.Collections.IEnumerator"/>.
            The root category is <b>not</b> included in the returned
            enumeration.
            </summary>
            <returns>All the defined categories</returns>
        </member>
        <member name="M:log4net.Hierarchy.OverrideAsNeeded(System.String)">
            <summary>
            Override the shipped code flag if the <paramref name="overrideStr"/>
            parameter is not null.
            </summary>
            <remarks>
            This method is intended to be used by configurators.
            <para>If the <paramref name="overrideStr"/> paramter is <c>null</c>
            then there is nothing to do. Otherwise, set
            <c>Hiearchy.disable</c> to <c>false</c> if override
            has a value other than <c>false</c>.</para>
            </remarks>
            <param name="overrideStr">String that is either <c>true</c> or <c>false</c></param>
        </member>
        <member name="M:log4net.Hierarchy.ResetConfiguration">
            <summary>
            Reset all values contained in this hierarchy instance to their
            default.  This removes all appenders from all categories, sets
            the priority of all non-root categories to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the priority
            of the root category to <see cref="F:log4net.Priority.DEBUG"/>. Moreover,
            message disabling is set its default "off" value.
            
            <para>Existing categories are not removed. They are just reset.</para>
            
            <para>This method should be used sparingly and with care as it will
            block all logging until it is completed.</para>
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.SetDisableOverride(System.String)">
            <summary>
            Set the disable override value given a string.
            </summary>
            <param name="overrideStr">String that is either 'true' or 'false'</param>
        </member>
        <member name="M:log4net.Hierarchy.Shutdown">
            <summary>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all categories including the root category.
            
            <para>Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.</para>
            
            <para>The <c>Shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a category
            and again to a nested appender.</para>
            </summary>
        </member>
        <member name="M:log4net.Hierarchy.UpdateParents(log4net.Category)">
            <summary>
            Updates all the parents of the specified category
            </summary>
            <remarks>
            This method loops through all the <i>potential</i> parents of
            'cat'. There 3 possible cases:
            <list type="number">
            	<item>
            		<term>No entry for the potential parent of 'cat' exists</term>
            		<description>We create a ProvisionNode for this potential 
            		parent and insert 'cat' in that provision node.</description>
            	</item>
            	<item>
            		<term>There entry is of type Category for the potential parent.</term>
            		<description>The entry is 'cat's nearest existing parent. We 
            		update cat's parent field with this entry. We also break from 
            		he loop because updating our parent's parent is our parent's 
            		responsibility.</description>
            	</item>
            	<item>
            		<term>There entry is of type ProvisionNode for this potential parent.</term>
            		<description>We add 'cat' to the list of children for this 
            		potential parent.</description>
            	</item>
            </list>
            </remarks>
            <param name="cat">The category to update the parents for</param>
        </member>
        <member name="M:log4net.Hierarchy.UpdateChildren(log4net.spi.ProvisionNode,log4net.Category)">
            <summary>
            We update the links for all the children that placed themselves
            in the provision node 'pn'. The second argument 'cat' is a
            reference for the newly created Category, parent of all the
            children in 'pn'
            
            <para>We loop on all the children 'c' in 'pn':</para>
            
            	<para>If the child 'c' has been already linked to a child of
            	'cat' then there is no need to update 'c'.</para>
            
            <para>Otherwise, we set cat's parent field to c's parent and set
            c's parent field to cat.</para>
            </summary>
            <param name="pn"></param>
            <param name="cat"></param>
        </member>
        <member name="P:log4net.Hierarchy.EmittedNoAppenderWarning">
            <summary>
            Flag to indicate if we have already issued a warning
            about not having an appender warning.
            </summary>
        </member>
        <member name="P:log4net.Hierarchy.DisablePriority">
            <summary>
            Get the diable level
            </summary>
        </member>
        <member name="E:log4net.Hierarchy.CategoryCreated">
            <summary>
            Event used to notify that a category has been created.
            </summary>
        </member>
        <member name="P:log4net.Hierarchy.RendererMap">
            <value>
            RendererMap accesses the object renderer map for this hierarchy.
            </value>
        </member>
        <member name="P:log4net.Hierarchy.Root">
            <summary>
            Get the root of this hierarchy.
            </summary>
        </member>
        <member name="P:log4net.Hierarchy.CategoryFactory">
            <summary>
            Set the default CategoryFactory instance.
            </summary>
        </member>
        <member name="T:log4net.Appender.OutputDebugStringAppender">
            <summary>
            OutputDebugStringAppender appends log events to the
            OutputDebugString system.  The web.config file can be used
            to control what listeners are actually used.
            
            This class uses a StringWriter to act at
            the Writer, delegates the call to the base
            class, which generates output in the
            StringWriter's StringBuffer.  This string is 
            then passed to the Trace.Write method.
            </summary>
        </member>
        <member name="T:log4net.Appender.TextWriterAppender">
            <summary>
            An Appender that writes to a <c>TextWriter</c>.
            </summary>
        </member>
        <member name="T:log4net.Appender.AppenderSkeleton">
            <summary>
            Abstract superclass of the other appenders in the package. 
            This class provides the code for common functionality, such 
            as support for threshold filtering and support for general filters.
            </summary>
        </member>
        <member name="T:log4net.Appender.IAppender">
            <summary>
            Implement this interface for your own strategies for printing log statements.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.AddFilter(log4net.Filter.IFilter)">
            <summary>
            Add a filter to the end of the filter list.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.ClearFilters">
            <summary>
            Clear the list of filters by removing all the filters in it.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.Close">
            <summary>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc. 
            It is a programming error to append to a closed appender.
            </summary>
        </member>
        <member name="M:log4net.Appender.IAppender.DoAppend(log4net.spi.LoggingEvent)">
            <summary>
            Log in Appender specific way
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.IAppender.RequiresLayout">
            <summary>
            Configurators call this method to determine if the appender 
            requires a layout. If this method returns <c>true</c>, 
            meaning that layout is required, then the configurator will 
            configure an layout using the configuration information at 
            its disposal.  If this method returns <c>false</c>, 
            meaning that a layout is not required, then layout configuration 
            will be	skipped even if there is available layout configuration 
            information at the disposal of the configurator..
            
            <para>In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, 
            then the appender should return <c>true</c>.</para>
            </summary>
            <returns>test if the appender requires layout</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.Filter">
            <summary>
            Returns the head Filter. The Filters are organized in a linked list
            and so all Filters on this Appender are available through the result.
            </summary>
            <returns>the head Filter or null, if no Filters are present</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.Name">
            <summary>
            Get the name of this appender. The name uniquely identifies the	appender.
            </summary>
            <returns>the name of the appender</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.ErrorHandler">
            <summary>
            Returns the <see cref="P:log4net.Appender.IAppender.ErrorHandler"/> for this appender.
            </summary>
            <returns>The error handler used</returns>
        </member>
        <member name="P:log4net.Appender.IAppender.Layout">
            <summary>
            Returns this appenders layout.
            </summary>
            <returns>Gets the layout to use with the appender</returns>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_layout">
            <summary>
            The layout variable does not need to be set if the appender implementation has its own layout.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_name">
            <summary>
            Appenders are named.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_threshold">
            <summary>
            There is no priority threshold filtering by default.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_errorHandler">
            <summary>
            It is assumed and enforced that errorHandler is never null.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_headFilter">
            <summary>
            The first filter in the filter chain. Set to <c>null</c> initially.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_tailFilter">
            <summary>
            The last filter in the filter chain.
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_closed">
            <summary>
            Is this appender closed? 
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.spi.LoggingEvent)">
            <summary>
            Subclasses of <see cref="T:log4net.Appender.AppenderSkeleton"/> should implement this method 
            to perform actual logging. See also <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.spi.LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">the event to append</param>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Finalize">
            <summary>
            Finalize this appender by calling the imlenentation's <see cref="M:log4net.Appender.AppenderSkeleton.Close"/> method.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.GetFirstFilter">
            <summary>
            Return the first filter in the filter chain for this Appender. 
            The return value may be <c>null</c> if no is filter is set.
            </summary>
            <returns>The head filter</returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Priority)">
            <summary>
            Check whether the message priority is below the appender's 
            threshold. If there is no threshold set, then the return 
            value is always <c>true</c>.
            </summary>
            <param name="priority">Priority to test against</param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
            <summary>
            Derived appenders should override this method if option structure requires it.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
            <summary>
            Add a filter to end of the filter list.
            </summary>
            <param name="newFilter">The filter to add</param>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Close">
            <summary>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc. 
            It is a programming error to append to a closed appender.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.RequiresLayout">
            <summary>
            Tests if this appender requires an <see cref="T:log4net.Layout.ILayout">ILayout</see>
            object.
            </summary>
            <remarks>
            Configurators call this method to determine if the appender 
            requires a layout. If this method returns <c>true</c>, 
            meaning that layout is required, then the configurator will 
            configure an layout using the configuration information at 
            its disposal.  If this method returns <c>false</c>, 
            meaning that a layout is not required, then layout configuration 
            will be	skipped even if there is available layout configuration 
            information at the disposal of the configurator..
            
            <para>In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, then 
            the appender should return <c>true</c>.</para>
            </remarks>
            <returns>test if the appender requires layout</returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ClearFilters">
            <summary>
            Clear the filters chain
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.spi.LoggingEvent)">
            <summary>
            This method performs threshold checks and invokes filters 
            before delegating actual logging to the subclasses specific 
            <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.spi.LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Threshold">
            <summary>
            Set the threshold priority. All log events with lower priority
            than the threshold priority are ignored by the appender.
            </summary>
            <remarks>
            <para>In configuration files this option is specified by setting the
            value of the <b>Threshold</b> option to a priority
            string, such as "DEBUG", "INFO" and so on.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.ErrorHandler">
            <summary>
            Return the currently set <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler"/> for this Appender.  
            </summary>
            <returns>the error hanlder used by this appender</returns>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Filter">
            <summary>
            Returns the head Filter.
            </summary>
            <returns>the filter (chain) used by this appender</returns>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Layout">
            <summary>
            Returns the layout of this appender. The value may be null.
            </summary>
            <returns>the layout used by this appender</returns>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Name">
            <summary>
            Returns the name of this Appender.
            </summary>
            <returns>the unique name of the appender</returns>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
            Immediate
            flush is slower but ensures that each append request is actually
            written. If <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush"/> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            
            <para>The <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush"/> variable is set to
            <c>true</c> by default.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_qtw">
            <summary>
            This is the <see cref="T:log4net.helpers.QuietTextWriter"/> where we will write to. 
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor">
            <summary>
            This default constructor does nothing
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.Stream)">
            <summary>
            Instantiate a TextWriterAppender and set the output destination 
            to a new <see cref="T:System.IO.StreamWriter"/> initialized with <paramref name="os"/>
            as its <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="layout">The layout to use with this appender</param>
            <param name="os">The Stream to output to</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.TextWriter)">
            <summary>
            Instantiate a TextWriterAppender and set the output 
            destination to <paramref name="writer"/>.
            <para>The <paramref name="writer"/> must have been previously opened by the user.</para>
            </summary>
            <param name="layout">The layout to use with this appender</param>
            <param name="writer">The TextWriter to output to</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.ActivateOptions">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.spi.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.spi.LoggingEvent)"/>
            method. 
            
            <para>If the output stream exists and is writable then write a log
            statement to the output stream. Otherwise, write a single warning
            message to <see cref="P:System.Console.Error"/>.</para>
            
            <para>The format of the output will depend on this appender's
            layout.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Close">
            <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            <para>Closed appenders cannot be reused</para>
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.RequiresLayout">
            <summary>
            The WriterAppender requires a layout. Hence, this method returns <c>true</c>.
            </summary>
            <returns>true because this appender requires a layout</returns>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.CheckEntryConditions">
            <summary>
            This method determines if there is a sense in attempting to append.
            
            <para>It checks whether there is a set output target and also if
            there is a set layout. If these checks fail, then the boolean
            value <c>false</c> is returned. </para>
            </summary>
            <returns>returns false if any of the preconditiond fail</returns>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.CloseWriter">
            <summary>
            Close the underlying <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Reset">
            <summary>
            Clear internal references to the writer and other variables.
            Subclasses can override this method for an alternate closing behavior.
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteFooter">
            <summary>
            Write a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> method.
            </summary>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteHeader">
            <summary>
            Write a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> method.
            </summary>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ErrorHandler">
            <summary>
            The <see cref="T:log4net.spi.IErrorHandler"/> for this Appender and also the underlying <see cref="T:log4net.helpers.QuietTextWriter"/> if any. 
            </summary>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ImmediateFlush">
            <summary>
            If the <b>ImmediateFlush</b> option is set to
            <c>true</c>, the appender will flush at the end of each
            write.
            </summary>
            <remarks>
            This is the default behavior. If the option is set to
            <c>false</c>, then the underlying stream can defer writing
            to physical medium to a later time. 
            
            <para>Avoiding the flush operation at the end of each append results in
            a performance gain of 10 to 20 percent. However, there is safety
            tradeoff involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.Writer">
            <summary>
            <para>Sets the Writer where the log output will go. The
            specified Writer must be opened by the user and be
            writable.</para>
            
            <para>The <see cref="T:System.IO.TextWriter"/> will be closed when the
            appender instance is closed.</para>
            
            <para><b>WARNING:</b> Logging to an unopened Writer will fail.</para>
            </summary>
        </member>
        <member name="F:log4net.Appender.OutputDebugStringAppender.m_writer">
            <summary>
            Buffer used to build up the outlup message
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.CloseWriter">
            <summary>
            Override the parent method to close the default trace channel
            </summary>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.OutputDebugString(System.String)">
            <summary>
            Stub for OutputDebugString native mathod
            </summary>
            <param name="lpOutputString">the string to output</param>
        </member>
        <member name="T:log4net.ObjectRenderer.IObjectRenderer">
            <summary>
            Implement this interface in order to render objects as strings
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.IObjectRenderer.DoRender(System.Object)">
            <summary>
            Render the object passed as parameter as a String
            </summary>
            <param name="obj">Object to render</param>
            <returns>the object rendered as a string</returns>
        </member>
        <member name="T:log4net.LogManager">
            <summary>
            This is the class used by client applications to bind to logger
            instances.
            </summary>
            <remarks>
            See the <see cref="T:log4net.ILog"/> interface for more details.
            </remarks>
            <example>Simple example of logging messages
            <code>
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <seealso cref="T:log4net.ILog"/>
        </member>
        <member name="F:log4net.LogManager.s_defaultHierarchy">
            <summary>
            The hierarchy where loggers are attached to by default.
            </summary>
            <remarks>
            The hierarchy where loggers are attached to by default.
            </remarks>
        </member>
        <member name="M:log4net.LogManager.#ctor">
            <summary>
            Private constructor to prevent instances. Only static methods should be used.
            </summary>
        </member>
        <member name="M:log4net.LogManager.Exists(System.String)">
            <summary>
            If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </summary>
            <remarks>
            If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </remarks>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String)">
            <summary>
            Retrieve or create a named logger.
            </summary>
            <remarks>
            Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be reutrned. Otherwise, a new instance is
            created.
            <para>By default, loggers do not have a set priority but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            </remarks>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualifed name of the type specified.
            </remarks>
            <param name="clazz">The full name of <c>clazz</c> will 
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String,log4net.spi.ICategoryFactory)">
            <summary>
            Like <see cref="M:log4net.LogManager.GetLogger(System.String)"/> except that the type of logger
            instantiated depends on the type returned by the 
            <see cref="M:log4net.spi.ICategoryFactory.MakeNewCategoryInstance(System.String)"/>
            method of the <paramref name="factory"/> parameter.
            </summary>
            <remarks>
            This method is intended to be used by sub-classes.
            </remarks>
            <param name="name">The name of the logger to retrieve</param>
            <param name="factory">A <see cref="T:log4net.spi.ICategoryFactory"/> implementation 
            that will actually create a new Instance.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:log4net.LogManager.Shutdown">
            <summary>
            Shutdown the log4net system.
            </summary>
            <remarks>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            default hierachy.
            
            <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.</para>
            
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.</para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration">
            <summary>
            Reset all values contained in this hierarchy instance to their defaults.
            </summary>
            <remarks>
            Reset all values contained in this hierarchy instance to their
            defaults.  This removes all appenders from all categories, sets
            the priority of all non-root categories to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the priority
            of the root logger to <see cref="F:log4net.Priority.DEBUG"/>. Moreover,
            message disabling is set its default "off" value.		
            </remarks>
        </member>
        <member name="P:log4net.LogManager.CurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the default
            hierarchy as an <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <value>
            An enumeration of the loggers defined.
            </value>
            <remarks>
            The root logger is <b>not</b> included in the returned
            enumeration.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="P:log4net.LogManager.LoggerRepository">
            <summary>
            Return the default Hierarchy instance.
            </summary>
            <value>
            the default Hierarchy instance
            </value>
            <remarks>
            the default Hierarchy instance
            </remarks>
        </member>
        <member name="P:log4net.LogManager.Root">
            <summary>
            Return the root of the default logger hierrachy.
            </summary>
            <value>
            the root of the default logger hierrachy
            </value>
            <remarks>
            The root logger is always instantiated and available. It's
            name is "root".
            
            <para>Nevertheless, calling <c>LogManager.GetLogger("root")</c>
            does not retrieve the root logger but a logger just under root 
            named "root".</para>
            </remarks>
        </member>
        <member name="T:log4net.DateFormatter.IDateFormatter">
            <summary>
            Interface to abstract the rendering of a <see cref="T:System.DateTime"/>
            instance into a string.
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Format the date specifed as a string
            </summary>
            <param name="date">the date to format</param>
            <param name="buf">the string builder to write to</param>
            <returns>the string builder passed</returns>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender">
            <summary>
            Appender that rolls log files based on size or date or both
            </summary>
            <remarks>
            <para>RollingFileAppender can function as either or and do both
            at the same time (making size based rolling files until a data/time 
            boundary is crossed at which time it rolls all of those files
            based on the setting for <see cref="F:log4net.Appender.RollingFileAppender.m_rollingStyle"/>.</para>
            
            <para>
            A of few additional optional features have been added:
            -- Attach date pattern for current log file <see cref="F:log4net.Appender.RollingFileAppender.m_staticLogFileName"/>
            -- Backup number increments for newer files <see cref="F:log4net.Appender.RollingFileAppender.m_countDirection"/>
            -- Infinite number of backups by file size <see cref="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups"/>
            </para>
            <para>A few notes and warnings:  For large or infinite number of backups
            countDirection &gt; 0 is highly recommended, with staticLogFileName = false if
            time based rolling is also used -- this will reduce the number of file renamings
            to few or none.  Changing staticLogFileName or countDirection without clearing
            the directory could have nasty side effects.  If Date/Time based rolling
            is enabled, CompositeRollingAppender will attempt to roll existing files
            in the directory without a date/time tag based on the last modified date
            of the base log files last modification.</para>
            <para>A maximum number of backups based on date/time boundries would be nice
            but is not yet implemented.</para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.FileAppender">
            <summary>
            FileAppender appends log events to a file. 
            </summary>
            <remarks>
            Logging events are sent to the file specified.
            The file can be opened in either append or
            overwite modes.
            </remarks>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_appendToFile">
            <summary>
            Flag to indicate if we should append to the file
            or overwite the file. The default is to append
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_fileName">
            <summary>
            The name of the log file.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <param name="append">flag to indicate if the file should be appended to</param>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
        </member>
        <member name="M:log4net.Appender.FileAppender.ActivateOptions">
            <summary>
            Activate the options on the file appender. This will
            case the file to be opened.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.Reset">
            <summary>
            Close any previously opened file and call the parent's <c>Reset</c>
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.CloseFile">
            <summary>
            Closes the previously opened file.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will
            go. The specified file must be writable.
            </summary>
            <remarks>
            If there was already an opened file, then the previous file
            is closed first.
            </remarks>
            <param name="fileName">The path to the log file</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
        </member>
        <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overriden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="P:log4net.Appender.FileAppender.File">
            <summary>
            File is the full path to the file that logging will be written to
            </summary>
        </member>
        <member name="P:log4net.Appender.FileAppender.AppendToFile">
            <summary>
            AppendToFile is a flag that indicates weather the file should be
            appended to or overwitten. If the value is set to false then the
            file will be overwitten. If it is set to true then the file will
            be appended to. The default value is true.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_datePattern">
            <summary>
            The date pattern. By default, the pattern is set to ".yyyy-MM-dd" meaning daily rollover.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_scheduledFilename">
            <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_nextCheck">
            <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_now">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollPoint">
            <summary>
            The type of rolling done
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups">
            <summary>
            There is zero backup files by default
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_curSizeRollBackups">
            <summary>
            How many sized based backups have been made so far
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxTimeRollBackups">
            <summary>
            not yet implemented
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_curTimeRollBackups">
            <summary>
            not yet implemented
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_countDirection">
            <summary>
            By default newer files have lower numbers
            </summary>
            <remarks>
            By default newer files have lower numbers. (countDirection &lt; 0)
            ie. log.1 is most recent, log.5 is the 5th backup, etc...
            countDirection &gt; 0 does the opposite ie.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use countDirection &gt; 0 to reduce rollOver costs.
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollingStyle">
            <summary>
            The rolling mode used in this appender
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollDate">
            <summary>
            Cache flag set if we are rolling by date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollSize">
            <summary>
            Cache flag set if we are rolling by size
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_staticLogFileName">
            <summary>
            Flag to indicate if we always log to the same file
            </summary>
            <remarks>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formated datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup) This will make time based roll
            overs with a large number of backups much faster -- it won't have to
            rename all the backups!
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_baseFileName">
            <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor">
            <summary>
            The default constructor does nothing
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String,System.String)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the
            file designated by <paramref name="filename"/>. The opened filename will
            become the ouput destination for this appender.
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
            <param name="datePattern"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the file designated by
            <paramref name="filename"/>. The opened filename will become the ouput
            destination for this appender.
            
            <para>If the <paramref name="append"/> parameter is true, the file will be
            appended to. Otherwise, the file desginated by
            <paramref name="filename"/> will be truncated before being opened.</para>
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
            <param name="append"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String,System.String,System.Boolean)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the file designated by
            <paramref name="filename"/>. The opened filename will become the ouput
            destination for this appender.
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
            <param name="datePattern"></param>
            <param name="append"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Instantiate a <c>RollingFileAppender</c> and open the file designated by
            <paramref name="filename"/>. The opened filename will become the output
            destination for this appender.
            
            <para>The file will be appended to.  DatePattern is default.</para>
            </summary>
            <param name="layout"></param>
            <param name="filename"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overriden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Handles append time behavior for CompositeRollingAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Creates and opens the file for logging.  If <see cref="F:log4net.Appender.RollingFileAppender.m_staticLogFileName"/>
            is false then the fully qualified name is determined and used.
            </summary>
            <param name="fileName">the name of the file to open</param>
            <param name="append">true to append to existing file</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ExistingInit">
            <summary>
            <para>Initializes based on exisiting conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/>.
            The following is done:</para>
            	A) determine curSizeRollBackups (only within the current rollpoint)
            	B) determine curTimeRollBackups (not implemented)
            	C) initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
            <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0 ) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
            <param name="sBaseFile"></param>
            <param name="curFileName"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
            <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
            <param name="sBaseFile"></param>
            <param name="arrFiles"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ComputeCheckPeriod">
            <summary>
            Calculates the RollPoint for the m_datePattern supplied.
            </summary>
            <returns>The RollPoint that is most acurate for the date pattern supplied</returns>
            <remarks>
            Essentially the date pattern is examined to determine what the
            most sutable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected whould be
            and hourly roll point as minutes could not be detected.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ActivateOptions">
            <summary>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:log4net.Appender.RollingFileAppender.ExistingInit"/> to initialize
            the current number of backups.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverTime">
            <summary>
            Rollover the file(s) to date/time tagged file(s).
            Opens the new file (through setFile) and resets curSizeRollBackups.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollFile(System.String,System.String)">
            <summary>
            Renames file <paramref name="from"/> to file <paramref name="to"/>.  It
            also checks for existence of target file and deletes if it does.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.DeleteFile(System.String)">
            <summary>
            Delete's the specified file if it exists
            </summary>
            <param name="fileName">the file name to delete</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverSize">
            <summary>
            Implements roll overs base on file size.
            </summary>
            <remarks>
            <para>If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- it's index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}.	 Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.</para>
            
            A new file is created to receive further log output.
            
            <para>If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.</para>
            
            <para>If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime)">
            <summary>
            Roll on to the next interval after the date passed
            </summary>
            <param name="currentDateTime">the current date</param>
            <returns>the next roll point an interval after the currentDateTime date</returns>
            <remarks>
            Advances the date to the next roll point after the 
            currentDateTime date passed to the method.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime,log4net.Appender.RollingFileAppender.RollPoint)">
            <summary>
            Roll on to the next interval after the date passed
            </summary>
            <param name="currentDateTime">the current date</param>
            <param name="rollPoint">the type of roll point we are working with</param>
            <returns>the next roll point an interval after the currentDateTime date</returns>
            <remarks>
            Advances the date to the next roll point after the 
            currentDateTime date passed to the method.
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.DatePattern">
            <summary>
            The <b>DatePattern</b> takes a string in the same format as
            expected by <see cref="T:log4net.DateFormatter.SimpleDateFormatter"/>. This options determines the
            rollover schedule.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Returns the value of the <b>maxSizeRollBackups</b> option.
            </summary>
            <remarks>
            <para>The <b>MaxSizeRollBackups</b> option determines how many backup
            files are kept before the oldest is erased. This option takes
            an integer value. If set to zero, then there will be no
            backup files and the log file will be truncated when it reaches
            <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize"/>.  If a negative number is supplied then
            no deletions will be made.  Note that this could result in
            very slow performance as a large number of files are rolled over unless
            <see cref="P:log4net.Appender.RollingFileAppender.CountDirection"/> up is used.</para>
            
            <para>The maximum applys to <b>each</b> time based group of files and <b>not</b> the total.
            Using a daily roll the maximum total files would be <c>(#days run) * (maxSizeRollBackups)</c>
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxFileSize">
            <summary>
            Get the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            <para>This method is equivalent to <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize"/> except
            that it is required for differentiating the setter taking a
            <c>long</c> argument from the setter taking a
            <c>String</c> argument.</para>
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaximumFileSize">
            <summary>
            Set the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            
            <para>In configuration files, the <b>MaxFileSize</b> option takes an
            long integer in the range 0 - 2^63. You can specify the value
            with the suffixes "KB", "MB" or "GB" so that the integer is
            interpreted being expressed respectively in kilobytes, megabytes
            or gigabytes. For example, the value "10KB" will be interpreted
            as 10240.</para>
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.File">
            <summary>
            Set the file name to use as the log file
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.CountDirection">
            <summary>
            Number rolling file count direction. Either positive or negative.
            Indicates if the current file is the lowest numberd file or the
            highest numbered file.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.RollingStyle">
            <summary>
            Set the rolling style
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.StaticLogFileName">
            <summary>
            Set the m_staticLogFileName flag
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollPoint">
            <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_TROUBLE">
            <summary>
            Roll the log not based on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_MINUTE">
            <summary>
            Roll the log for each minute
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_HOUR">
            <summary>
            Roll the log for each hour
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.HALF_DAY">
            <summary>
            Roll the log twice a day (midday and midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_DAY">
            <summary>
            Roll the log each day (midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_WEEK">
            <summary>
            Roll the log each week
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TOP_OF_MONTH">
            <summary>
            Roll the log each month
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollingMode">
            <summary>
            Style of rolling to use
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Size">
            <summary>
            Roll files based only on the size of the file
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Date">
            <summary>
            Roll files based only on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Composite">
            <summary>
            Roll files based on both the size and date of the file
            </summary>
        </member>
        <member name="T:log4net.spi.ITriggeringEventEvaluator">
            <summary>
            Implementions of this interface allow certain appenders to decide
            when to perform an appender specific action.
            </summary>
        </member>
        <member name="M:log4net.spi.ITriggeringEventEvaluator.IsTriggeringEvent(log4net.spi.LoggingEvent)">
            <summary>
            Is this the triggering event?
            </summary>
            <param name="loggingEvent">The event to chech</param>
            <returns>true if this event triggers the action</returns>
        </member>
        <member name="T:log4net.spi.IAppenderAttachable">
            <summary>
            Interface for attaching appenders to objects.
            </summary>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Add an appender.
            </summary>
            <param name="newAppender"></param>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.GetAllAppenders">
            <summary>
            Get all previously added appenders as an Enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.GetAppender(System.String)">
            <summary>
            Get an appender by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.RemoveAllAppenders">
            <summary>
            Remove all previously added appenders.
            </summary>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter from the list of appenders.
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:log4net.spi.IAppenderAttachable.RemoveAppender(System.String)">
            <summary>
            Remove the appender with the name passed as parameter from the list of appenders.  
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:log4net.spi.ErrorCodes">
            <summary>
            Defined error codes that can be passed to the <see cref="M:log4net.spi.IErrorHandler.Error(System.String,System.Exception,log4net.spi.ErrorCodes)"/> method.
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.GENERIC_FAILURE">
            <summary>
            A general error
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.WRITE_FAILURE">
            <summary>
            Error while writing output
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.FLUSH_FAILURE">
            <summary>
            Failed to flush file
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.CLOSE_FAILURE">
            <summary>
            Failed to close file
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.FILE_OPEN_FAILURE">
            <summary>
            Unable to open output file
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.MISSING_LAYOUT">
            <summary>
            No layout specified
            </summary>
        </member>
        <member name="F:log4net.spi.ErrorCodes.ADDRESS_PARSE_FAILURE">
            <summary>
            Failed to parse address
            </summary>
        </member>
        <member name="T:log4net.spi.LocationInfo">
            <summary>
            The internal representation of caller location information.
            </summary>
        </member>
        <member name="F:log4net.spi.LocationInfo.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="M:log4net.spi.LocationInfo.#ctor(System.String)">
            <summary>
            Instantiate location information based on the current thread
            </summary>
            <param name="fqnOfCallingClass"></param>
        </member>
        <member name="P:log4net.spi.LocationInfo.ClassName">
            <summary>
            Return the fully qualified class name of the caller making the logging request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.FileName">
            <summary>
            Return the file name of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.LineNumber">
            <summary>
            Returns the line number of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.MethodName">
            <summary>
            Returns the method name of the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.LocationInfo.FullInfo">
            <summary>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.helpers.AppenderAttachedImpl">
            <summary>
            A straightforward implementation of the <see cref="T:log4net.spi.IAppenderAttachable"/> interface.
            </summary>
        </member>
        <member name="F:log4net.helpers.AppenderAttachedImpl.m_appenderList">
            <summary>
            Array of appenders
            </summary>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.spi.LoggingEvent)">
            <summary>
            Call the <c>DoAppend</c> method on all attached appenders.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the number of appenders called</returns>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Attach an appender. If the appender is already in the list in won't be added again.
            </summary>
            <param name="newAppender">the appender to add</param>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.GetAllAppenders">
            <summary>
            Get all attached appenders as an Enumeration. If there are 
            no attached appenders <c>null</c> is returned.
            </summary>
            <returns>An enumeration of attached appenders</returns>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.GetAppender(System.String)">
            <summary>
            Look for an attached appender named as <paramref name="name"/>.
            </summary>
            <remarks>
            Return the appender with that name if in the list. Return <c>null</c> otherwise.
            </remarks>
            <param name="name">name of the appender to get</param>
            <returns>the appender with the name specified, or null</returns>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.RemoveAllAppenders">
            <summary>
            Remove all previously attached appenders
            </summary>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter form the list of attached appenders
            </summary>
            <param name="appender">the appender object to remove</param>
        </member>
        <member name="M:log4net.helpers.AppenderAttachedImpl.RemoveAppender(System.String)">
            <summary>
            Remove the appender with the name passed as parameter form the list of appenders
            </summary>
            <param name="name">the name of the appender to remove</param>
        </member>
        <member name="T:log4net.Appender.TraceAppender">
            <summary>
            TraceAppender appends log events to the
            Trace system.  The web.config file can be used
            to control what listeners are actually used.
            
            This class uses a StringWriter to act at
            the Writer, delegates the call to the base
            class, which generates output in the
            StringWriter's StringBuffer.  This string is 
            then passed to the Trace.Write method.
            </summary>
        </member>
        <member name="F:log4net.Appender.TraceAppender.m_writer">
            <summary>
            Buffer used to build up the outlup message
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.TraceAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.CloseWriter">
            <summary>
            Override the parent method to close the default trace channel
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="T:log4net.helpers.LogLog">
            <summary>
            This class used to output log statements from within the log4net package.
            </summary>
            <remarks>
            <para>Log4net components cannot make log4net logging calls. However, it is
            sometimes useful for the user to learn about what log4net is
            doing. You can enable log4net internal logging by setting the debug
            flag in the configurator.</para>
            
            <para>All log4net internal debug calls go to <see cref="P:System.Console.Out"/>
            where as internal error messages are sent to <see cref="P:System.Console.Error"/>. 
            All internal messages are prepended with the string "log4net: ".</para>
            </remarks>
        </member>
        <member name="F:log4net.helpers.LogLog.s_debugEnabled">
            <summary>
             Default debug level
            </summary>
        </member>
        <member name="F:log4net.helpers.LogLog.s_quietMode">
            <summary>
            In quietMode not even errors generate any output.
            </summary>
        </member>
        <member name="M:log4net.helpers.LogLog.#ctor">
            <summary>
            Prevent instance objects
            </summary>
        </member>
        <member name="M:log4net.helpers.LogLog.SetInternalDebugging(System.Boolean)">
            <summary>
            Allows to enable/disable log4net internal logging.
            </summary>
            <param name="enabled">set to true to enable internal debugging</param>
        </member>
        <member name="M:log4net.helpers.LogLog.SetQuietMode(System.Boolean)">
            <summary>
            In quite mode no LogLog generates strictly no output, not even
            for errors. 
            </summary>
            <param name="quietMode">A true for not</param>
        </member>
        <member name="M:log4net.helpers.LogLog.EmitOutLine(System.String)">
            <summary>
            Single method that writes output the the standard
            output stream.  Use Console.Out for console output,
            and Trace for OutputDebugString output.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.EmitErrorLine(System.String)">
            <summary>
            Single method that writes output the the standard
            error stream.  Use Console.Error for console output,
            and Trace for OutputDebugString output.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Debug(System.String)">
            <summary>
            This method is used to output log4net internal debug
            statements. Output goes to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Debug(System.String,System.Exception)">
            <summary>
            This method is used to output log4net internal debug
            statements. Output goes to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="msg">the message to log</param>
            <param name="t">an exception to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Error(System.String)">
            <summary>
            This method is used to output log4net internal error
            statements. There is no way to disable error statements.
            Output goes to <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Error(System.String,System.Exception)">
            <summary>
            This method is used to output log4net internal error
            statements. There is no way to disable error statements.
            Output goes to <see cref="P:System.Console.Error"/>.  
            </summary>
            <param name="msg">the message to log</param>
            <param name="t">an exception to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Warn(System.String)">
            <summary>
            This method is used to output log4net internal warning
            statements. There is no way to disable warning statements.
            Output goes to <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="msg">the message to log</param>
        </member>
        <member name="M:log4net.helpers.LogLog.Warn(System.String,System.Exception)">
            <summary>
            This method is used to output log4net internal warnings. There is
            no way to disable warning statements.  Output goes to 
            <see cref="P:System.Console.Error"/>.
            </summary>
            <param name="msg">the message to log</param>
            <param name="t">an exception to log</param>
        </member>
        <member name="T:log4net.DateFormatter.DateTimeDateFormatter">
            <summary>
            Formats a DateTime in the format "dd MMM YYYY HH:mm:ss,SSS" for example, "06 Nov 1994 15:49:37,459".
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.AbsoluteTimeDateFormatter">
            <summary>
            Formats a <see cref="T:System.DateTime"/> in the format "HH:mm:ss,SSS" for example, "15:49:37,459".
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.ABS_TIME_DATE_FORMAT">
            <summary>
            String constant used to specify AbsoluteTimeDateFormat in layouts. Current value is <b>ABSOLUTE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.DATE_AND_TIME_DATE_FORMAT">
            <summary>
            String constant used to specify DateTimeDateFormat in layouts.  Current value is <b>DATE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.ISO8601_DATE_FORMAT">
            <summary>
            String constant used to specify ISO8601DateFormat in layouts. Current value is <b>ISO8601</b>.
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Render the date into a string. Format is "HH:mm:ss"
            </summary>
            <remarks>
            Sub classes should override this method to render the date
            into a string using a precision up to the sencond. This method
            will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </remarks>
            <param name="date">the date to render into a string</param>
            <param name="sbuf">a string builder to write to</param>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Render the date into a string. Format is "HH:mm:ss,SSS"
            </summary>
            <remarks>
            <para>Uses the FormatDateWithoutMillis() method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from FormatDateWithoutMillis() are
            cached and FormatDateWithoutMillis() is called at most once
            per second.</para>
            <para>Sub classes should override FormatDateWithoutMillis()
            rather than FormatDate().</para>
            </remarks>
            <param name="date">the date to render into a string</param>
            <param name="sbuf">a string builder to write to</param>
            <returns>the string builder passed</returns>
        </member>
        <member name="F:log4net.DateFormatter.DateTimeDateFormatter.m_shortMonths">
            <summary>
            Cache the list of month names
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Formats the date as: "dd MMM YYYY HH:mm:ss"
            the base class will append the ',SSS' milliseconds section.
            We will only be called at most once per second.
            </summary>
            <remarks>
            Formats a DateTime in the format "dd MMM YYYY HH:mm:ss" for example, "06 Nov 1994 15:49:37".
            </remarks>
            <param name="date">the date to format</param>
            <param name="sbuf">the string builder to write to</param>
        </member>
        <member name="T:log4net.Config.BasicConfigurator">
            <summary>
            Use this class to quickly configure the package.
            </summary>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.AddRenderer(log4net.Hierarchy,System.String,System.String)">
            <summary>
            Used by subclasses to add a renderer to the hierarchy passed as parameter.
            </summary>
            <remarks>
            The <paramref name="renderingClassName"/> must specify a type that implements the <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> interface/
            </remarks>
            <param name="hierarchy">the Hierarchy to add the renderer to</param>
            <param name="renderedClassName">the type that will be rendered by the renderer</param>
            <param name="renderingClassName">the type of the renderer</param>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure">
            <summary>
            Initialise the log4net system with a default configuration.
            </summary>
            <remarks>
            Initialises the log4net logging system using a <see cref="T:log4net.Appender.ConsoleAppender"/>
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout"/> layout object
            using the <see cref="F:log4net.Layout.PatternLayout.TTCC_CONVERSION_PATTERN"/>
            layout style.
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender)">
            <summary>
            Initialise the log4net system using the specified appender
            </summary>
            <param name="appender">the appender to use to log all logging events</param>
        </member>
        <member name="T:log4net.helpers.NullEnumerator">
            <summary>
            An allways empty Enumerator.
            </summary>
        </member>
        <member name="F:log4net.helpers.NullEnumerator.s_instance">
            <summary>
            The singleton instance of the null enumerator
            </summary>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.#ctor">
            <summary>
            Private constructor to enforce the singleton pattern
            </summary>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.GetInstance">
            <summary>
            Get the singleton instance of the null enumerator
            </summary>
            <returns>get the instance of the null enumerator</returns>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.MoveNext">
            <summary>
            Test if the enumerator can advance, if so advance
            </summary>
            <remarks>
            Always returns false as the NullEnumerator cannot advance
            </remarks>
            <returns>always false</returns>
        </member>
        <member name="M:log4net.helpers.NullEnumerator.Reset">
            <summary>
            Reset the enumerator back to the start
            </summary>
        </member>
        <member name="P:log4net.helpers.NullEnumerator.Current">
            <summary>
            Gets the current object from the enumerator
            </summary>
            <remarks>
            This throws an exception because the NullEnumerator
            never has a current value.
            </remarks>
        </member>
        <member name="T:log4net.Filter.PriorityMatchFilter">
            <summary>
            This is a very simple filter based on priority matching.
            </summary>
            <remarks>
            <para>The filter admits two options <b>PriorityToMatch</b> and
            <b>AcceptOnMatch</b>. If there is an exact match between the value
            of the PriorityToMatch option and the priority of the 
            LoggingEvent, then the Decide method returns ACCEPT} in 
            case the <b>AcceptOnMatch</b> option value is set
            to <c>true</c>, if it is <c>false</c> then 
            DENY is returned.</para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.FilterSkeleton">
            <summary>
            Users should extend this class to implement customized logging
            event filtering. 
            </summary>
            <remarks>
            <para>Users should extend this class to implement customized logging
            event filtering. Note that <see cref="T:log4net.Category"/> and 
            <see cref="T:log4net.Appender.AppenderSkeleton"/>, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.</para>
            
            <para>This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.spi.LoggingEvent)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.</para>
            
            <para>The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.spi.LoggingEvent)"/> method must return one
            of the integer constants DENY, NEUTRAL or ACCEPT.</para>
            
            <para>If the value DENY is returned, then the log event is dropped 
            immediately without consulting with the remaining filters. </para>
            
            <para>If the value NEUTRAL is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behaviour is to log all logging events.</para>
            
            <para>If the value ACCEPT is returned, then the log
            event is logged without consulting the remaining filters. </para>
            
            <para>The philosophy of log4net filters is largely inspired from the
            Linux ipchains. </para>
            </remarks>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.DENY">
            <summary>
            The log event must be dropped immediately without consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.NEUTRAL">
            <summary>
            This filter is neutral with respect to the log event. The remaining filters, if any, should be consulted for a final decision.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.ACCEPT">
            <summary>
            The log event must be logged immediately without consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.m_next">
            <summary>
            Points to the next filter in the filter chain.
            </summary>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.ActivateOptions">
            <summary>
            Usually filters options become active when set. We provide a default do-nothing implementation for convenience.
            </summary>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
            <remarks>
            <para>If the decision is <c>DENY</c>, then the event will be
            dropped. If the decision is <c>NEUTRAL</c>, then the next
            filter, if any, will be invoked. If the decision is ACCEPT then
            the event will be logged without consulting with other filters in
            the chain.</para>
            </remarks>
            <param name="loggingEvent">The LoggingEvent to decide upon</param>
            <returns>The decision of the filter</returns>
        </member>
        <member name="P:log4net.Filter.FilterSkeleton.Next">
            <summary>
            Property to get and set the next filter in the filter
            chain of responsability.
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityMatchFilter.m_acceptOnMatch">
            <summary>
            flag to indicate if the filter should ACCEPT on a match
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityMatchFilter.m_priorityToMatch">
            <summary>
            the Priority to match agains
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityMatchFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Tests if the priority of the logging event matches that of the filter
            </summary>
            <remarks>
            If the priority of the event matches the priority of the
            filter then the result of the function depends on the
            value of <see cref="P:log4net.Filter.PriorityMatchFilter.AcceptOnMatch"/>. If it is true then
            the function will return ACCEPT, it it is false then it
            will return DENY. If the priority does not match then
            the result will be the opposite of when it does match.
            </remarks>
            <param name="loggingEvent">the event to filter</param>
            <returns>see remarks</returns>
        </member>
        <member name="P:log4net.Filter.PriorityMatchFilter.AcceptOnMatch">
            <summary>
            The AcceptOnMatch property is a flag that determines
            the behaviour when a matching Priority is found. If the
            flag is set to true then the filter will ACCEPT the 
            logging event, otherwise it will DENY the event.
            </summary>
        </member>
        <member name="P:log4net.Filter.PriorityMatchFilter.PriorityToMatch">
            <summary>
            The priority that the filter will match
            </summary>
        </member>
        <member name="T:log4net.Category">
            <summary>
            Internal class used to provide implmentation of <see cref="T:log4net.ILog"/>
            interface. Applications should use <see cref="T:log4net.LogManager"/> to get
            logger instances.
            </summary>
            <remarks>
            This is one of the central class' in the log4net implementation. One of the
            distintive features of log4net are hierarchical categories and their
            evaluation.
            </remarks>
        </member>
        <member name="T:log4net.ILog">
            <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
            <remarks>
            Use the <see cref="T:log4net.LogManager"/> to obtain logger instances
            that implement this interface. The <see cref="M:log4net.LogManager.GetLogger(System.String)"/>
            static method is used to get logger instances.
            <para>Contains methods for logging at different priority levels. Also
            has properties for determining if those logging priorities are
            enabled in the current configuration.</para>
            </remarks>
            <example>Simple example of logging messages
            <code>
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <seealso cref="T:log4net.LogManager"/>
            <seealso cref="M:log4net.LogManager.GetLogger(System.String)"/>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.DEBUG"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.DEBUG"/> priority. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Debug(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>DEBUG</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Debug(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.INFO"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>INFO</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.INFO"/> priority. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Info(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Info(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>INFO</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Info(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.WARN"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>WARN</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.WARN"/> priority. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Warn(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Warn(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>WARN</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Warn(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.ERROR"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.ERROR"/> priority. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Error(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Error(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>ERROR</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="t"/> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Error(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:log4net.Priority.FATAL"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the priority of this logger with the 
            <see cref="F:log4net.Priority.FATAL"/> priority. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this logger and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Fatal(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
            <seealso cref="M:log4net.ILog.Fatal(System.Object,System.Exception)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>FATAL</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <remarks>
            See the <see cref="M:log4net.ILog.Fatal(System.Object)"/> form for more detailed information.
            </remarks>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsDebugEnabled">
            <summary>
            Check whether this logger is enabled for the DEBUG <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>DEBUG</c> events.
            </value>
            <remarks>
            <para>This function is intended to lessen the computational cost of
            disabled log debug statements.</para>
            
            <para> For some <c>log</c> ILog interface, when you write:</para>
            <code>
            log.Debug("This is entry number: " + i );
            </code>
            
            <para>You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.</para>
            
            <para>If you are worried about speed, then you should write:</para>
            <code>
            if(log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            
            <para>This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log.</para>
            
            <para>If your logger is available staticaly then the is debug
            enabled state can be stored in a static variable like this:</para>
            <code>
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
            
            <para>Then when you come to log you can write:</para>
            <code>
            if(isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            
            <para>This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimised by the JIT compiler.</para>
            
            <para>Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.</para>
            </remarks>
            <returns><c>true</c> if this logger is debug enabled, <c>false</c> otherwise</returns>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
        </member>
        <member name="P:log4net.ILog.IsInfoEnabled">
            <summary>
            Check whether this logger is enabled for the INFO <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>INFO</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>INFO</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsWarnEnabled">
            <summary>
            Check whether this logger is enabled for the WARN <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>WARN</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>WARN</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsErrorEnabled">
            <summary>
            Check whether this logger is enabled for the ERROR <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>ERROR</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>ERROR</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsFatalEnabled">
            <summary>
            Check whether this logger is enabled for the FATAL <see cref="T:log4net.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>FATAL</c> events.
            </value>
            <remarks>
            For more infomation see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <returns>boolean True if this logger is enabled for the <c>FATAL</c> priority.</returns>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="F:log4net.Category.FQCN">
            <summary>
            The fully qualified name of the Category class.
            </summary>
        </member>
        <member name="F:log4net.Category.m_name">
            <summary>
            The name of this category.
            </summary>
        </member>
        <member name="F:log4net.Category.m_priority">
            <summary>
            The assigned priority of this category. 
            </summary>
            <remarks>
            The <c>priority</c> variable need not be 
            assined a value in which case it is inherited 
            form the hierarchy.
            </remarks>
        </member>
        <member name="F:log4net.Category.m_parent">
            <summary>
            The parent of this category.
            </summary>
            <remarks>
            The parent of this category. All categories have at least one ancestor which is the root category.
            </remarks>
        </member>
        <member name="F:log4net.Category.m_hierarchy">
            <summary>
            Categories need to know what Hierarchy they are in.
            </summary>
            <remarks>
            Categories need to know what Hierarchy they are in.
            The hierarchy that this category is a member of is stored
            here.
            </remarks>
        </member>
        <member name="F:log4net.Category.m_aai">
            <summary>
            Helper implementation of the <see cref="T:log4net.spi.IAppenderAttachable"/> interface
            </summary>
        </member>
        <member name="F:log4net.Category.m_additive">
            <summary>
            Flag indicating if child categories inherit their parents appenders
            </summary>
            <remarks>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this category are not used. However, the children
            of this category will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </remarks>
        </member>
        <member name="M:log4net.Category.#ctor(System.String)">
            <summary>
            This constructor created a new <c>Category</c> instance and
            sets its name.
            </summary>
            <remarks>
            This constructor created a new <c>Category</c> instance and
            sets its name.
            
            <para>It is intended to be used by sub-classes only. You can't
            create categories directly.</para>
            
            <para>Categories are constructed by <see cref="T:log4net.spi.ICategoryFactory"/>
            objects. See <see cref="T:log4net.spi.DefaultCategoryFactory"/> for the default
            category creator</para>
            </remarks>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:log4net.Category.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Add <paramref name="newAppender"/> to the list of appenders of this
            Category instance.
            </summary>
            <param name="newAppender">An appender to add to this category</param>
            <remarks>
            Add <paramref name="newAppender"/> to the list of appenders of this
            Category instance.
            <para>If <paramref name="newAppender"/> is already in the list of
            appenders, then it won't be added again.</para>
            </remarks>
        </member>
        <member name="M:log4net.Category.GetAllAppenders">
            <summary>
            Get the appenders contained in this category as an 
            <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <remarks>
            Get the appenders contained in this category as an 
            <see cref="T:System.Collections.IEnumerator"/>. If no appenders 
            can be found, then a <see cref="T:log4net.helpers.NullEnumerator"/> is returned.
            </remarks>
            <returns>An enumeration of the appenders in this category</returns>
        </member>
        <member name="M:log4net.Category.GetAppender(System.String)">
            <summary>
            Look for the appender named as <c>name</c>
            </summary>
            <param name="name">The name of the appender to lookup</param>
            <returns>The appender with the name specified, or <c>null</c>.</returns>
            <remarks>
            Returns the named appender, or null if the appender is not found.
            </remarks>
        </member>
        <member name="M:log4net.Category.RemoveAllAppenders">
            <summary>
            Remove all previously added appenders from this Category instance.
            </summary>
            <remarks>
            Remove all previously added appenders from this Category instance.
            <para>This is useful when re-reading configuration information.</para>
            </remarks>
        </member>
        <member name="M:log4net.Category.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="appender">The appender to remove</param>
            <remarks>
            Remove the appender passed as parameter form the list of appenders.
            </remarks>
        </member>
        <member name="M:log4net.Category.RemoveAppender(System.String)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove</param>
            <remarks>
            Remove the named appender passed as parameter form the list of appenders.
            </remarks>
        </member>
        <member name="M:log4net.Category.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.DEBUG"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>DEBUG</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.DEBUG"/> priority. If this category is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Debug(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>DEBUG</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">he exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Debug(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Debug(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.INFO"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>INFO</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.INFO"/> priority. If this category is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Info(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>INFO</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Info(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Info(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.WARN"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>WARN</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.WARN"/> priority. If this category is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Warn(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>WARN</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Warn(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Warn(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.ERROR"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>ERROR</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.ERROR"/> priority. If this category is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Error(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>ERROR</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Error(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Error(System.Object)"/>
        </member>
        <member name="M:log4net.Category.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="!:Priority.FATAL"/> priority.
            </summary>
            <remarks>
            <para>This method first checks if this category is <c>FATAL</c>
            enabled by comparing the priority of this category with the 
            <see cref="!:Priority.FATAL"/> priority. If this category is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then proceeds to call all the
            registered appenders in this category and also higher in the
            hierarchy depending on the value of the additivity flag.</para>
            
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <c>Exception</c> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Category.Fatal(System.Object,System.Exception)"/> form instead.</para>
            </remarks>
            <param name="message">the message object to log</param>
        </member>
        <member name="M:log4net.Category.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <c>FATAL</c> priority including
            the stack trace of the <see cref="T:System.Exception"/> <c>t</c> passes
            as a parameter.
            </summary>
            <param name="message">the message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            See the <see cref="M:log4net.Category.Fatal(System.Object)"/> form for more detailed information.
            </remarks>
            <seealso cref="M:log4net.Category.Fatal(System.Object)"/>
        </member>
        <member name="M:log4net.Category.CallAppenders(log4net.spi.LoggingEvent)">
            <summary>
            Call the appenders in the hierrachy starting at
            <c>this</c>.  If no appenders could be found, emit a
            warning.
            </summary>
            <remarks>
            This method calls all the appenders inherited from the
            hierarchy circumventing any evaluation of whether to log or not
            to log the particular log request.
            </remarks>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="M:log4net.Category.CloseNestedAppenders">
            <summary>
            Close all attached appenders implementing the IAppenderAttachable interface.
            </summary>
            <remarks>
            Used to ensure that the appenders are correctly shutdown.
            </remarks>
        </member>
        <member name="M:log4net.Category.Exists(System.String)">
            <summary>
            Check if the named category exists.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Exists(System.String)"/> instead.</b></para>
            </summary>
            <param name="name">The fully qualified category name to look for</param>
            <remarks>
            If the named category exists (in the default hierarchy) then it
            returns a reference to the category, otherwise it returns
            <c>null</c>.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Exists(System.String)"/> instead.</b></para>
            </remarks>
            <returns>The category found, or null</returns>
        </member>
        <member name="M:log4net.Category.Log(log4net.Priority,System.Object,System.Exception)">
            <summary>
            This generic form is intended to be used by wrappers
            </summary>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            Generate a logging event for the specified <paramref name="priority"/> using
            the <paramref name="message"/> and <paramref name="t"/>.
            </remarks>
        </member>
        <member name="M:log4net.Category.Log(log4net.Priority,System.Object)">
            <summary>
            This generic form is intended to be used by wrappers
            </summary>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <remarks>
            Generate a logging event for the specified <paramref name="priority"/> using
            the <paramref name="message"/>.
            </remarks>
        </member>
        <member name="M:log4net.Category.Log(System.String,log4net.Priority,System.Object,System.Exception)">
            <summary>
            This is the most generic printing method. This generic form is intended to be used by wrappers
            </summary>
            <param name="callerFQCN">The wrapper class' fully qualified class name</param>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            Generate a logging event for the specified <paramref name="priority"/> using
            the <paramref name="message"/>.
            </remarks>
        </member>
        <member name="M:log4net.Category.ForcedLog(System.String,log4net.Priority,System.Object,System.Exception)">
            <summary>
            This method creates a new logging event and logs the event without further checks.
            </summary>
            <param name="fqcn">The wrapper class' fully qualified class name</param>
            <param name="priority">The priority of the message to be logged</param>
            <param name="message">The message object to log</param>
            <param name="t">the exception to log, including its stack trace</param>
            <remarks>
            This method generates a logging event and delivers it to the attached
            appenders.
            </remarks>
        </member>
        <member name="M:log4net.Category.GetChainedPriority">
            <summary>
            Get the applied priority for this category.
            </summary>
            <remarks>
            Starting from this category, search the category hierarchy for a
            non-null priority and return it. Otherwise, return the priority of the
            root category.
            <para>The Category class is designed so that this method executes as
            quickly as possible.</para>
            </remarks>
            <returns>the nearest priority in the category hierarchy</returns>
        </member>
        <member name="M:log4net.Category.GetCurrentCategories">
            <summary>
            Returns all the currently defined categories in the default
            hierarchy as an <see cref="T:System.Collections.IEnumerator"/>.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.CurrentLoggers"/> instead.</b></para>
            </summary>
            <remarks>
            The root category is <b>not</b> included in the returned
            enumeration.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.CurrentLoggers"/> instead.</b></para>
            </remarks>
            <returns>All the defined categories</returns>
        </member>
        <member name="M:log4net.Category.GetInstance(System.String)">
            <summary>
            Get or create the named category.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String)"/> instead.</b></para>
            </summary>
            <remarks>
            Retrieve a category with named as the <c>name</c>
            parameter. If the named category already exists, then the
            existing instance will be reutrned. Otherwise, a new instance is
            created.
            <para>By default, categories do not have a set priority but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String)"/> instead.</b></para>
            </remarks>
            <param name="name">The name of the category to retrieve.</param>
            <returns>the category with the name specified</returns>
        </member>
        <member name="M:log4net.Category.GetInstance(System.Type)">
            <summary>
            Shorthand for <c>getInstance(clazz.FullName)</c>.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.Type)"/> instead.</b></para>
            </summary>
            <param name="clazz">The name of <c>clazz</c> will 
            be used as the name of the category to retrieve.</param>
            <remarks>
            Get a log category using the fully qualified class name 
            for the Type specified.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.Type)"/> instead.</b></para>
            </remarks>
            <returns>the category with the name specified</returns>
        </member>
        <member name="M:log4net.Category.GetInstance(System.String,log4net.spi.ICategoryFactory)">
            <summary>
            Like <see cref="M:log4net.Category.GetInstance(System.String)"/> except that the type of category
            instantiated depends on the type returned by the 
            <see cref="M:log4net.spi.ICategoryFactory.MakeNewCategoryInstance(System.String)"/>
            method of the <c>factory</c> parameter.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String,log4net.spi.ICategoryFactory)"/> instead.</b></para>
            </summary>
            <remarks>
            This method is intended to be used by sub-classes.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.GetLogger(System.String,log4net.spi.ICategoryFactory)"/> instead.</b></para>
            </remarks>
            <param name="name">The name of the category to retrieve</param>
            <param name="factory">A <see cref="T:log4net.spi.ICategoryFactory"/> implementation 
            that will actually create a new Instance.</param>
            <returns>the category with the name specified</returns>
        </member>
        <member name="M:log4net.Category.IsEnabledFor(log4net.Priority)">
            <summary>
            Check whether this category is enabled for a given <see cref="P:log4net.Category.Priority"/> passed as parameter.
            </summary>
            <param name="priority">The priority to check</param>
            <returns>boolean True if this category is enabled for <c>priority</c>.</returns>
            <remarks>
            Check whether this category is enabled for a given <see cref="P:log4net.Category.Priority"/> passed as parameter.
            </remarks>
            <seealso cref="P:log4net.Category.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Category.Shutdown">
            <summary>
            Shutdown this hierarchy.
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Shutdown"/> instead.</b></para>
            </summary>
            <remarks>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the categories including root contained in the
            default hierachy.
            
            <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.</para>
            
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a category
            and again to a nested appender.</para>
            <para><b>Deprecated, call <see cref="M:log4net.LogManager.Shutdown"/> instead.</b></para>
            </remarks>
        </member>
        <member name="P:log4net.Category.IsDebugEnabled">
            <summary>
            Check whether this category is enabled for the <c>DEBUG</c>
            priority.
            </summary>
            <value>
            True if this category is enabled for <c>DEBUG</c> events.
            </value>
            <remarks>
            <para>This function is intended to lessen the computational cost of
            disabled log debug statements.</para>
            
            <para> For some <c>cat</c> Category object, when you write:</para>
            <code>
            cat.Debug("This is entry number: " + i );
            </code>
            
            <para>You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.</para>
            
            <para>If you are worried about speed, then you should write:</para>
            <code>
            if(cat.IsDebugEnabled())
            { 
                cat.Debug("This is entry number: " + i );
            }
            </code>
            
            <para>This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>cat</c>. On
            the other hand, if the <c>cat</c> is debug enabled, you
            will incur the cost of evaluating whether the category is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a category takes about 1% of the time it
            takes to actually log.</para>
            </remarks>
            <returns><c>true</c> if this category is debug enabled, <c>false</c> otherwise</returns>
        </member>
        <member name="P:log4net.Category.IsInfoEnabled">
            <summary>
            Check whether this category is enabled for the INFO <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>INFO</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>INFO</c> priority.</returns>
            <seealso cref="P:log4net.Category.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.IsWarnEnabled">
            <summary>
            Check whether this category is enabled for the WARN <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>WARN</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>WARN</c> priority.</returns>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.IsErrorEnabled">
            <summary>
            Check whether this category is enabled for the ERROR <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>ERROR</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>ERROR</c> priority.</returns>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.IsFatalEnabled">
            <summary>
            Check whether this category is enabled for the FATAL <see cref="P:log4net.Category.Priority"/>.
            </summary>
            <value>
            True if this category is enabled for <c>FATAL</c> events.
            </value>
            <remarks>
            See <see cref="P:log4net.Category.IsDebugEnabled"/> for more information and examples of using this method.
            </remarks>
            <returns>boolean True if this category is enabled for the <c>FATAL</c> priority.</returns>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Category.Parent">
            <summary>
            The parent category in the hierarchy
            </summary>
            <value>
            The parent category in the hierarchy
            </value>
            <remarks>
            Part of the Composite pattern that makes the hierarchy.
            </remarks>
        </member>
        <member name="P:log4net.Category.Additivity">
            <summary>
            Flag indicating if child categories inherit their parent's appenders
            </summary>
            <value>
            true if child categories inherit their parent's appenders
            </value>
            <remarks>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this category are not used. However, the children
            of this category will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </remarks>
        </member>
        <member name="P:log4net.Category.DefaultHierarchy">
            <summary>
            Return the default Hierarchy instance.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.LoggerRepository"/> instead.</b></para>
            </summary>
            <value>The default hierarchy</value>
            <remarks>
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.LoggerRepository"/> instead.</b></para>
            </remarks>
        </member>
        <member name="P:log4net.Category.Hierarchy">
            <summary>
            Get / Set the <see cref="P:log4net.Category.Hierarchy"/> where this 
            <c>Category</c> instance is attached.
            </summary>
            <value>The hierarchy that this category belongs to</value>
            <remarks>
            Get / Set the <see cref="P:log4net.Category.Hierarchy"/> where this 
            <c>Category</c> instance is attached.
            </remarks>
        </member>
        <member name="P:log4net.Category.Name">
            <summary>
            Return the category name.
            </summary>
            <value>
            The name of the category
            </value>
            <remarks>
            The name of the category
            </remarks>
        </member>
        <member name="P:log4net.Category.Priority">
            <summary>
            Returns the assigned <see cref="T:log4net.Priority"/>, if any, for this Category.  
            The assigned Priority, can be <c>null</c>
            </summary>
            <value>
            The <see cref="T:log4net.Priority"/> of this category.
            </value>
            <remarks>
            Categories have assigned <see cref="T:log4net.Priority"/> levels.
            </remarks>
        </member>
        <member name="P:log4net.Category.Root">
            <summary>
            Return the root of the default category hierarchy.
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.Root"/> instead.</b></para>
            </summary>
            <value>
            The Category that is the root of the hierarchy.
            </value>
            <remarks>
            The root category is always instantiated and available. It's
            name is "root".
            
            <para>Nevertheless, calling <c>Category.GetInstance("root")</c>
            does not retrieve the root category but a category just under root 
            named "root".</para>
            <para><b>Deprecated, call <see cref="P:log4net.LogManager.Root"/> instead.</b></para>
            </remarks>
        </member>
        <member name="T:log4net.NDC">
            <summary>
            Implementation of NDC the nested diagnostic context.
            </summary>
            <remarks>
            <para>A Nested Diagnostic Context, or NDC in short, is an instrument
            to distinguish interleaved log output from different sources. Log
            output is typically interleaved when a server handles multiple
            clients near-simultaneously.</para>
            <para>Interleaved log output can still be meaningful if each log entry
            from different contexts had a distinctive stamp. This is where NDCs
            come into play.</para>
            <para>Note that NDCs are managed on a per thread basis. The NDC class
            is made up of static methods that operate on the context of the
            calling thread.</para>
            </remarks>
            <example>How to push a message into the context
            <code>
            using(NDC.Push("my context message"))
            {
            	... all log calls will have my message included ...
            
            } // at the end of the using block the message is automatically removed 
            </code>
            </example>
        </member>
        <member name="F:log4net.NDC.s_slot">
            <summary>
            The thread local data slot to use for context information
            </summary>
        </member>
        <member name="M:log4net.NDC.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.NDC.Clear">
            <summary>
            Clears all the contextual information held on the 
            current thread.
            </summary>
            <remarks>
            Clears all the contextual information held on the 
            current thread. After calling this method the
            <see cref="P:log4net.NDC.Depth"/> will be <c>0</c>.
            </remarks>
        </member>
        <member name="M:log4net.NDC.CloneStack">
            <summary>
            Creates a clone of the stack of context information.
            </summary>
            <remarks>
            Creates a clone of the stack of context information. This
            can be passed to the <see cref="M:log4net.NDC.Inherit(System.Collections.Stack)"/> method to allow
            child threads to inherit the context of their parent thread.
            </remarks>
            <returns>a clone of the context info for this thread</returns>
        </member>
        <member name="M:log4net.NDC.Inherit(System.Collections.Stack)">
            <summary>
            Inherit the contextual information from another thread.
            </summary>
            <remarks>
            This thread will use the context information from the stack
            supplied. This can be used to initialise child threads with
            the same contextual information as their parent theads. These
            contexts will <b>NOT</b> be shared. Any further contexts that
            are pushed onto the stack will not be visisble to the other.
            Call <see cref="M:log4net.NDC.CloneStack"/> to obtain a stack to pass to
            this method.
            </remarks>
            <param name="stack">The context stack to inherit</param>
        </member>
        <member name="M:log4net.NDC.Get">
            <summary>
            Get the current context information.
            </summary>
            <remarks>
            Get the current context information. That is all the messages that
            have been pushed on to the context stack.
            </remarks>
            <returns>The current context information</returns>
        </member>
        <member name="M:log4net.NDC.Pop">
            <summary>
            Remove the top context from the stack
            </summary>
            <remarks>
            Remove the top context from the stack, and return
            it to the caller. If the stack is empty then an
            empty string (not null) is returned.
            </remarks>
            <returns>the message in the context that was removed from the top of the stack</returns>
        </member>
        <member name="M:log4net.NDC.Peek">
            <summary>
            Peek at the message on the top of the context stack
            </summary>
            <returns>The message on the top of the stack</returns>
        </member>
        <member name="M:log4net.NDC.Push(System.String)">
            <summary>
            Push a new context message
            </summary>
            <param name="message">The new context message</param>
            <returns>An <see cref="T:System.IDisposable"/> is returned that 
            can be used to clean up the context stack</returns>
            <remarks>
            Push a new context onto the context stack. An <see cref="T:System.IDisposable"/>
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            conext.
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code>
            using(log4net.NDC.Push("NDC_Message"))
            {
            	log.Warn("This should have an NDC message");
            }
            </code>
            </example>
        </member>
        <member name="M:log4net.NDC.Remove">
            <summary>
            Remove the context information for this thread. It is
            not required to call this method.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:log4net.NDC.SetMaxDepth(System.Int32)">
            <summary>
            Forces the stack depth to be at most <paramref name="maxDepth"/>.
            </summary>
            <remarks>
            Forces the stack depth to be at most <paramref name="maxDepth"/>.
            This may truncate the head of the stack. This only affects the 
            stack in the current thread. Also it does not prevent it from
            growing, it only sets the maximum depth at the time of the
            call. This can be used to return to a known context depth.
            </remarks>
            <param name="maxDepth">The maximum depth of the stack</param>
        </member>
        <member name="M:log4net.NDC.GetStack">
            <summary>
            Get the stack of context objects on this thread
            </summary>
            <returns>the stack of context objects</returns>
        </member>
        <member name="P:log4net.NDC.Depth">
            <summary>
            Get the current context depth
            </summary>
            <value>the current context depth</value>
            <remarks>
            Get the current context depth
            </remarks>
        </member>
        <member name="T:log4net.NDC.DiagnosticContext">
            <summary>
            Inner class used to represent a single context in the stack
            </summary>
        </member>
        <member name="M:log4net.NDC.DiagnosticContext.#ctor(System.String,log4net.NDC.DiagnosticContext)">
            <summary>
            Construct a new context
            </summary>
            <param name="message">The nessage for this context</param>
            <param name="parent">The parent context in the chain</param>
        </member>
        <member name="P:log4net.NDC.DiagnosticContext.Message">
            <summary>
            Get the message
            </summary>
        </member>
        <member name="P:log4net.NDC.DiagnosticContext.FullMessage">
            <summary>
            Get the full text of the context down to the root level
            </summary>
        </member>
        <member name="T:log4net.NDC.NDCAutoDisposeFrame">
            <summary>
            Inner class that is returned from <see cref="M:log4net.NDC.Push(System.String)"/>
            </summary>
            <remarks>
            Inner class that is returned from <see cref="M:log4net.NDC.Push(System.String)"/>.
            This class is disposable and when it is disoposed it automatically
            returns the NDC to the corect depth.
            </remarks>
        </member>
        <member name="F:log4net.NDC.NDCAutoDisposeFrame.m_frameStack">
            <summary>
            The NDC internal stack
            </summary>
        </member>
        <member name="F:log4net.NDC.NDCAutoDisposeFrame.m_frameDepth">
            <summary>
            The depth to rethr the stack to when this instance is disposed
            </summary>
        </member>
        <member name="M:log4net.NDC.NDCAutoDisposeFrame.#ctor(System.Collections.Stack,System.Int32)">
            <summary>
            Construct a new instance with the stack and return depth specified
            </summary>
            <param name="frameStack">the internal stack used by the NDC</param>
            <param name="frameDepth">the depth to return the stack to when this object is disposed</param>
        </member>
        <member name="M:log4net.NDC.NDCAutoDisposeFrame.Dispose">
            <summary>
            Return the NDC stack to the correct depth
            </summary>
        </member>
        <member name="T:log4net.MDC">
            <summary>
            Implementation of MDC the mapped diagnostic context.
            </summary>
            <remarks>
            <para>The MDC class is similar to the <see cref="T:log4net.NDC"/> class except that it is
            based on a map instead of a stack. It provides <i>mapped
            diagnostic contexts</i>. A <i>Mapped Diagnostic Context</i>, or
            MDC in short, is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.</para>
            <para>The MDC is managed on a per thread basis</para>
            </remarks>
        </member>
        <member name="F:log4net.MDC.s_slot">
            <summary>
            The thread local data slot to use for context information
            </summary>
        </member>
        <member name="M:log4net.MDC.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.MDC.Get(System.String)">
            <summary>
            Get the context identified by the <paramref name='key'/> parameter
            </summary>
            <remarks>
            Get the context identified by the <paramref name='key'/> parameter.
            If the <paramref name='key'/> parameter does not look up to a
            previously defined context then <c>null</c> will be retutrned.
            </remarks>
            <param name="key">the key to lookup in the MDC</param>
            <returns>the string value held for the key, or null</returns>
        </member>
        <member name="M:log4net.MDC.Set(System.String,System.String)">
            <summary>
            Put a context value (the <paramref name='val'/> parameter) as identified
            with the <paramref name='key'/> parameter into the current thread's
            context map.
            </summary>
            <remarks>
            If a value is already defined for the <paramref name='key'/>
            specified then the value will be replaced.
            If the <paramref name='val'/> is specified as <c>null</c> then
            the key value mapping will be removed.
            </remarks>
            <param name="key">the key to store the value under</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:log4net.MDC.Remove(System.String)">
            <summary>
            Removes the key value mapping for the key specified.
            </summary>
            <param name="key">the key to remove</param>
            <remarks>
            Removes the <paramref name="key"/> value mapping for the key specified.
            </remarks>
        </member>
        <member name="M:log4net.MDC.GetMap">
            <summary>
            Get the map on this thread
            </summary>
            <returns>the map</returns>
        </member>
        <member name="T:log4net.spi.RootCategory">
            <summary>
            RootCategory sits at the top of the category hierachy. It is a
            regular category except that it provides several guarantees.
            </summary>
            <remarks>
            First, it cannot be assigned a <c>null</c>
            priority. Second, since root category cannot have a parent, the
            <see cref="M:log4net.spi.RootCategory.GetChainedPriority"/> method always returns the value of the
            priority field without walking the hierarchy.
            </remarks>
        </member>
        <member name="M:log4net.spi.RootCategory.#ctor(log4net.Priority)">
            <summary>
            The root category names itself as "root". However, the root
            category cannot be retrieved by name.
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:log4net.spi.RootCategory.GetChainedPriority">
            <summary>
            Return the assigned priority value without walking the category hierarchy
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.spi.RootCategory.Priority">
            <summary>
            Setting a null value to the priority of the root category
            may have catastrophic results. We prevent this here.
            </summary>
        </member>
        <member name="T:log4net.helpers.QuietTextWriter">
            <summary>
            QuietTextWriter does not throw exceptions when things go wrong. 
            Instead, it delegates error handling to its <see cref="T:log4net.spi.IErrorHandler"/>.
            </summary>
        </member>
        <member name="F:log4net.helpers.QuietTextWriter.m_errorHandler">
            <summary>
            The error handler instance to pass all errors to
            </summary>
        </member>
        <member name="F:log4net.helpers.QuietTextWriter.m_writer">
            <summary>
            The instance of the underlying TextWriter used for output
            </summary>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.#ctor(System.IO.TextWriter,log4net.spi.IErrorHandler)">
            <summary>
            Create a new QuietTextWriter using a writer and error handler
            </summary>
            <param name="writer">the writer to actualy write to</param>
            <param name="errorHandler">the error handler to report error to</param>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.Write(System.String)">
            <summary>
            Write a string to the output
            </summary>
            <param name="str">the string data to write to the output</param>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.Flush">
            <summary>
            Flush any buffered output
            </summary>
        </member>
        <member name="M:log4net.helpers.QuietTextWriter.Close">
            <summary>
            Close the underlying output writer
            </summary>
        </member>
        <member name="P:log4net.helpers.QuietTextWriter.ErrorHandler">
            <summary>
            The error handler that all errors are passed to
            </summary>
        </member>
        <member name="T:log4net.Appender.SMTPAppender">
            <summary>
            Send an e-mail when a specific logging event occurs, typically on errors or fatal errors.
            </summary>
            <remarks>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.SMTPAppender.BufferSize"/> option. The
            <c>SMTPAppender</c> keeps only the last
            <see cref="P:log4net.Appender.SMTPAppender.BufferSize"/> logging events in its cyclic buffer. This
            keeps memory requirements at a reasonable level while still
            delivering useful application context.
            </remarks>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.#ctor">
            <summary>
            The default constructor will instantiate the appender with a
            <see cref="T:log4net.spi.ITriggeringEventEvaluator"/> that will trigger on events with
            priority ERROR or higher.
            </summary>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.#ctor(log4net.spi.ITriggeringEventEvaluator)">
            <summary>
            Use <paramref name="evaluator"/> passed as parameter as the 
            <see cref="T:log4net.spi.ITriggeringEventEvaluator"/> for this SMTPAppender.  
            </summary>
            <param name="evaluator">the trigger to deliver the mail message</param>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.ActivateOptions">
            <summary>
            Activate the specified options
            </summary>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.Append(log4net.spi.LoggingEvent)">
            <summary>
            Perform SMTPAppender specific appending actions, mainly adding
            the event to a cyclic buffer and checking if the event triggers
            an e-mail to be sent.
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.RequiresLayout">
            <summary>
            The <c>SMTPAppender</c> requires a <see cref="T:log4net.Layout.ILayout"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.CheckEntryConditions">
            <summary>
            This method determines if there is a sense in attempting to append.
            </summary>
            <remarks>
            It checks whether there is a set output target and also if
            there is a set layout. If these checks fail, then the boolean
            value <c>false</c> is returned. 
            </remarks>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.SMTPAppender.SendBuffer">
            <summary>
            Send the contents of the cyclic buffer as an e-mail message.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.EvaluatorClass">
            <summary>
            Returns value of the <b>EvaluatorClass</b> option
            The <b>EvaluatorClass</b> option takes a string value
            representing the name of the class implementing the <see cref="T:log4net.spi.ITriggeringEventEvaluator"/>
            interface. A corresponding object will
            be instantiated and assigned as the triggering event evaluator
            for the SMTPAppender.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.To">
            <summary>
            Returns value of the <b>To</b> option.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.From">
            <summary>
            Returns value of the <b>From</b> option.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.Subject">
            <summary>
            Returns value of the <b>Subject</b> option.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.BufferSize">
            <summary>
            The <b>BufferSize</b> option takes a positive integer
            representing the maximum number of logging events to collect in a
            cyclic buffer. When the <c>BufferSize</c> is reached,
            oldest events are deleted as new events are added to the
            buffer. By default the size of the cyclic buffer is 512 events.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.SMTPHost">
            <summary>
            The <b>SMTPHost</b> option takes a string value which should be a
            the host name of the SMTP server that will send the e-mail message.
            </summary>
        </member>
        <member name="P:log4net.Appender.SMTPAppender.LocationInfo">
            <summary>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no effort
            to extract the location information related to the event. As a
            result, the layout that formats the events as they are sent out
            in an e-mail is likely to place the wrong location information
            (if present in the format).
            
            <para>Location information extraction is comparatively very slow and
            should be avoided unless performance is not a concern.</para>
            </summary>
        </member>
        <member name="M:log4net.Appender.DefaultEvaluator.IsTriggeringEvent(log4net.spi.LoggingEvent)">
            <summary>
            Is this <paramref name="logginEvent"/> the e-mail triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the event priority
            has ERROR priority or higher. Otherwise it returns <c>false</c></returns>
        </member>
        <member name="T:log4net.spi.DefaultCategoryFactory">
            <summary>
            Implementation of DefaultCategoryFactory.
            </summary>
        </member>
        <member name="T:log4net.spi.ICategoryFactory">
            <summary>
            Implement this interface to create new instances of Category or a sub-class of Category.
            </summary>
        </member>
        <member name="M:log4net.spi.ICategoryFactory.MakeNewCategoryInstance(System.String)">
            <summary>
            Construct a new Category instance with the name specified
            </summary>
            <param name="name">the name of the category</param>
            <returns>the instance for the name specified</returns>
        </member>
        <member name="M:log4net.spi.DefaultCategoryFactory.MakeNewCategoryInstance(System.String)">
            <summary>
            Construct a new Category object
            </summary>
            <param name="name">The name of the Category</param>
            <returns>a new Category instance</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser">
            <summary>
            Most of the work of the <see cref="T:log4net.Layout.PatternLayout"/> class
            is delegated to the PatternParser class.
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_currentLiteral">
            <summary>
            the literal being parsed
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_patternLength">
            <summary>
            the total length of the pattern
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_index">
            <summary>
            the current index into the pattern
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_head">
            <summary>
            The first pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_tail">
            <summary>
             the last pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_formattingInfo">
            <summary>
            the formatting info object
            </summary>
        </member>
        <member name="F:log4net.helpers.PatternParser.m_pattern">
            <summary>
            The pattern
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.#ctor(System.String)">
            <summary>
            Create a pattern parse for a specific pattern string
            </summary>
            <param name="pattern">the parrern to parse</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.AddToList(log4net.helpers.PatternConverter)">
            <summary>
            Internal method to add a pattern converter to the chain
            </summary>
            <param name="pc">the converter to add</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.ExtractOption">
            <summary>
            Internal method to extract the option from the pattern at the current index
            </summary>
            <remarks>
            The option is the section of the pattern between '{' and '}'.
            This function returns the option if the current index of the
            parse is at the start of the option, otherwise null is returned.
            </remarks>
            <returns>returns the option or null</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.ExtractPrecisionOption">
            <summary>
            The option is expected to be in decimal and positive. In case of error, zero is returned.
            </summary>
            <returns>the option as a number</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.Parse">
            <summary>
            Parse the pattern into a chain of pattern converters
            </summary>
            <returns>the head of a chain of pattern converters</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.FinalizeConverter(System.Char)">
            <summary>
            Internal method that works on a single option in the
            pattern
            </summary>
            <param name="c">the option specifier</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.AddConverter(log4net.helpers.PatternConverter)">
            <summary>
            Internal method to add a pattern converter
            </summary>
            <remarks>
            Resets the internal state of the parser as well as adding the pattern converter to the chain
            </remarks>
            <param name="pc">the pattern converter to add</param>
        </member>
        <member name="T:log4net.helpers.PatternParser.BasicPatternConverter">
            <summary>
            Basic pattern converter
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.BasicPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Construct the pattern converter with formatting info and type
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="type">the type of pattern</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.BasicPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            To the conversion
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the result of converting the pattern</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.BasicPatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
            <summary>
            Internal method to get the time difference between two DateTime objects
            </summary>
            <param name="start">start time</param>
            <param name="end">end time</param>
            <returns>the time difference in milliseconds</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.LiteralPatternConverter">
            <summary>
            Pattern converter for literal instances in the pattern
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.LiteralPatternConverter.#ctor(System.String)">
            <summary>
            Constructor, takes the literal string
            </summary>
            <param name="strValue"></param>
        </member>
        <member name="M:log4net.helpers.PatternParser.LiteralPatternConverter.Format(System.Text.StringBuilder,log4net.spi.LoggingEvent)">
            <summary>
            Override the formatting behaviour to ignore the FormattingInfo
            because we have a literal instead.
            </summary>
            <param name="sbuf">the builder to write to</param>
            <param name="loggingEvent">the event being logged</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.LiteralPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert this pattern into the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the literal</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.MDCPatternConverter">
            <summary>
            Mapped Diagnostic pattern converter
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.MDCPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.String)">
            <summary>
            Construct the pattern converter with formatting info and MDC key
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="key">the MDC key to emmit</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.MDCPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            To the conversion
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the result of converting the pattern</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.DatePatternConverter">
            <summary>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format the date
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.DatePatternConverter.#ctor(log4net.helpers.FormattingInfo,log4net.DateFormatter.IDateFormatter)">
            <summary>
            Construct the converter with formatting info and a
            <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format the date
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="df">the date formatter</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.DatePatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert the pattern into the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns></returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.LocationPatternConverter">
            <summary>
            Converter to include event location information
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.LocationPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Construct the converter with formatting information and
            the type of location information required.
            </summary>
            <param name="formattingInfo"></param>
            <param name="type"></param>
        </member>
        <member name="M:log4net.helpers.PatternParser.LocationPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the relevent location information</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.NamedPatternConverter">
            <summary>
            Converter to deal with '.' separated strings
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.NamedPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Construct a converter with formatting info and a precision
            argument. The precision is the number of '.' separated sections
            to return, starting from the end of the string and working 
            towards to the start.
            </summary>
            <param name="formattingInfo">the formatting info</param>
            <param name="precision">the precision</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.NamedPatternConverter.GetFullyQualifiedName(log4net.spi.LoggingEvent)">
            <summary>
            Overriden by subclasses to get the fully qualified name before the
            precision is applied to it.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the fully qualified name</returns>
        </member>
        <member name="M:log4net.helpers.PatternParser.NamedPatternConverter.Convert(log4net.spi.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the precision of the fully qualified name specified</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.ClassNamePatternConverter">
            <summary>
            Pattern converter for the class name
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.ClassNamePatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="formattingInfo">formatting info</param>
            <param name="precision">namespace depth precision</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.ClassNamePatternConverter.GetFullyQualifiedName(log4net.spi.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the class
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the class name</returns>
        </member>
        <member name="T:log4net.helpers.PatternParser.CategoryPatternConverter">
            <summary>
            Converter for category name
            </summary>
        </member>
        <member name="M:log4net.helpers.PatternParser.CategoryPatternConverter.#ctor(log4net.helpers.FormattingInfo,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="formattingInfo">formatting info</param>
            <param name="precision">category hierarchy depth precision</param>
        </member>
        <member name="M:log4net.helpers.PatternParser.CategoryPatternConverter.GetFullyQualifiedName(log4net.spi.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the category
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the category name</returns>
        </member>
        <member name="T:log4net.ObjectRenderer.DefaultRenderer">
            <summary>
            The default Renderer renders objects by calling their <see cref="M:System.Object.ToString"/> method.
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.DoRender(System.Object)">
            <summary>
            Render the object passed as parameter by calling its <see cref="M:System.Object.ToString"/> method.
            </summary>
            <param name="obj">the object to render</param>
            <returns>the object rendered as a string</returns>
        </member>
        <member name="T:log4net.helpers.OptionConverter">
            <summary>
            A convenience class to convert property values to specific types.
            </summary>
        </member>
        <member name="M:log4net.helpers.OptionConverter.#ctor">
            <summary>
            Private constructor to prevent instances
            </summary>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ConcatanateArrays(System.String[],System.String[])">
            <summary>
            Concatenates two string arrays
            </summary>
            <param name="l">left array</param>
            <param name="r">right array</param>
            <returns>array containg left and right arrays</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ConcatanateArrays(System.Array,System.Array)">
            <summary>
            Concatenates two arrays
            </summary>
            <param name="l">left array</param>
            <param name="r">right array</param>
            <returns>array containg left and right arrays</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ConvertSpecialChars(System.String)">
            <summary>
            Converts string escape chars back to their correct values
            </summary>
            <param name="s">string to convert</param>
            <returns>converted result</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToBoolean(System.String,System.Boolean)">
            <summary>
            Convert a string to a bool value
            </summary>
            <remarks>
            If <paramref name="argValue"/> is "true", then <c>true</c> is returned. 
            If <paramref name="argValue"/> is "false", then <c>true</c> is returned. 
            Otherwise, <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="argValue">string to convert</param>
            <param name="defaultValue">the default value</param>
            <returns>true or false</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToInt(System.String,System.Int32)">
            <summary>
            Convert a string to an integer
            </summary>
            <param name="argValue">string to convert</param>
            <param name="defaultValue">default value</param>
            <returns>the int value of the string parsed</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToPriority(System.String,log4net.Priority)">
            <summary>
            Converts a standard or custom priority level to a Priority object.  
            </summary>
            <remarks>
            If <paramref name="argValue"/> is of form
            "priority#classname", then the specified class' toPriority method
            is called to process the specified priority string; if no '#'
            character is present, then the default <see cref="T:log4net.Priority"/>
            class is used to process the priority value.  
            
            <para>If any error occurs while converting the value to a priority,
            the dflt value (which may be null) is returned.</para>
            
            <para>Case of value is unimportant for the priority level, but is significant
            for any class name part present.</para>
            </remarks>
            <param name="argValue"></param>
            <param name="defaultValue"></param>
            <returns>The Priority object</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.ToFileSize(System.String,System.Int64)">
            <summary>
            Parse a file size into a number
            </summary>
            <remarks>
            Parses a file size of the form: number[KB|MB|GB] into a
            long value. It is scaled with the appropriate multiplier.
            </remarks>
            <param name="argValue">string to parse</param>
            <param name="defaultValue">default value</param>
            <returns>the value of the string parsed to a long</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.FindAndSubst(System.String,System.Collections.IDictionary)">
            <summary>
            Find the value corresponding to <paramref name="key"/> in 
            <paramref name="props"/>. Then perform variable substitution 
            on the found value.
            </summary>
            <param name="key">the key to lookup</param>
            <param name="props">the association to use for lookups</param>
            <returns>the substituted result</returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
            <summary>
            Instantiate an object given a class name
            </summary>
            <remarks>
            Instantiate an object given a class name. Check that the
            <paramref name="className"/> is a subclass of
            <paramref name="superClass"/>. If that test fails or the object could
            not be instantiated, then <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="className">The fully qualified class name of the object to instantiate</param>
            <param name="superClass">The class to which the new object should belong</param>
            <param name="defaultValue">The object to return in case of non-fulfillment</param>
            <returns></returns>
        </member>
        <member name="M:log4net.helpers.OptionConverter.SubstVars(System.String,System.Collections.IDictionary)">
            <summary>
            Perform variable substitution in string <paramref name="val"/> from the values of keys found in <paramref name="props"/>.
            </summary>
            <remarks>
            <para>The variable substitution delimeters are <b>${</b> and <b>}</b>.</para>
            
            <para>For example, if props contains "key=value", then the call</para>
            <code>
            String s = OptionConverter.substituteVars("Value of key is ${key}.");
            </code>
            
            will set the variable <c>s</c> to "Value of key is value.".
            
            <para>If no value could be found for the specified key,
            then substitution defaults to the empty string.</para>
            
            <para>For example, if system propeties contains no value for the key
            "inexistentKey", then the call</para>
            
            <code>
            String s = OptionConverter.subsVars("Value of inexistentKey is [${inexistentKey}]");
            </code>
            will set <s>s</s> to "Value of inexistentKey is []"     
            
            <para>An Exception is thrown if
            <paramref name="val"/> contains a start delimeter "${" which is not
            balanced by a stop delimeter "}". </para>
            </remarks>
            <param name="val">The string on which variable substitution is performed</param>
            <param name="props">the dictionary to use to lookup variables</param>
            <returns>the result of the substitutions</returns>
        </member>
        <member name="T:log4net.helpers.FormattingInfo">
            <summary>
            FormattingInfo instances contain the information obtained when parsing 
            formatting modifiers in conversion modifiers.
            </summary>
        </member>
        <member name="M:log4net.helpers.FormattingInfo.Reset">
            <summary>
            Set back to default values
            </summary>
        </member>
        <member name="M:log4net.helpers.FormattingInfo.Dump">
            <summary>
            Dump debug info
            </summary>
        </member>
        <member name="P:log4net.helpers.FormattingInfo.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:log4net.helpers.FormattingInfo.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:log4net.helpers.FormattingInfo.LeftAlign">
            <summary>
            Flag indicating left align
            </summary>
        </member>
        <member name="T:log4net.helpers.CyclicBuffer">
            <summary>
            A fixed size rolling buffer of logging events.
            </summary>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.#ctor(System.Int32)">
            <summary>
            Instantiate a new CyclicBuffer of at most <paramref name="maxSize"/> events.
            </summary>
            <remarks>The <paramref name="maxSize"/> argument must a positive integer.</remarks>
            <param name="maxSize">The maximum number of elements in the buffer</param>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.Append(log4net.spi.LoggingEvent)">
            <summary>
            Add an <paramref name="loggingEvent"/> as the last event in the buffer
            </summary>
            <param name="loggingEvent">The event to append to the buffer</param>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.PopOldest">
            <summary>
            Get the oldest (first) element in the buffer. The oldest element is removed from the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.helpers.CyclicBuffer.Resize(System.Int32)">
            <summary>
            Resize the cyclic buffer to <paramref name="newSize"/>.
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="P:log4net.helpers.CyclicBuffer.Item(System.Int32)">
            <summary>
            Get the <paramref name="i"/>th oldest event currently in the buffer
            </summary>
            <remarks>
            Get the <paramref name="i"/>th oldest event currently in the buffer. If
            <paramref name="i"/> is outside the range 0 to the number of elements
            currently in the buffer, then <c>null</c> is returned.
            </remarks>
        </member>
        <member name="P:log4net.helpers.CyclicBuffer.MaxSize">
            <summary>
            Get the maximum size of the buffer
            </summary>
        </member>
        <member name="P:log4net.helpers.CyclicBuffer.Length">
            <summary>
            Get the number of elements in the buffer. This number is
            guaranteed to be in the range 0 to <see cref="P:log4net.helpers.CyclicBuffer.MaxSize"/>
            (inclusive).
            </summary>
        </member>
        <member name="T:log4net.Layout.PatternLayout">
            <summary>
            A flexible layout configurable with pattern string.
            </summary>
            <remarks>
            <para>The goal of this class is to <see cref="M:log4net.Layout.PatternLayout.Format(log4net.spi.LoggingEvent)"/> a 
            <see cref="T:log4net.spi.LoggingEvent"/> and return the results as a String. The results
            depend on the <i>conversion pattern</i>.</para>
            
            <para>The conversion pattern is closely related to the conversion
            pattern of the printf function in C. A conversion pattern is
            composed of literal text and format control expressions called
            <i>conversion specifiers</i>.</para>
            
            <para><i>You are free to insert any literal text within the conversion
            pattern.</i></para>
            
            <para>Each conversion specifier starts with a percent sign (%) and is
            followed by optional <i>format modifiers</i> and a <i>conversion
            character</i>. The conversion character specifies the type of
            data, e.g. category, priority, date, thread name. The format
            modifiers control such things as field width, padding, left and
            right justification. The following is a simple example.</para>
            
            <para>Let the conversion pattern be <b>"%-5p [%t]: %m%n"</b> and assume
            that the log4net environment was set to use a PatternLayout. Then the
            statements</para>
            <code>
            Category root = Category.getRoot();
            root.debug("Message 1");
            root.warn("Message 2");   
            </code>
            would yield the output
            <code>
            DEBUG [main]: Message 1
            WARN  [main]: Message 2  
            </code>
            
            <para>Note that there is no explicit separator between text and
            conversion specifiers. The pattern parser knows when it has reached
            the end of a conversion specifier when it reads a conversion
            character. In the example above the conversion specifier
            <b>%-5p</b> means the priority of the logging event should be left
            justified to a width of five characters.</para>
            
            The recognized conversion characters are
            
            <table border="1" CELLPADDING="8">
            <th>Conversion Character</th>
            <th>Effect</th>
            
            <tr>
            	<td align="center"><b>c</b></td>
            
            	<td>Used to output the category of the logging event. The
            	category conversion specifier can be optionally followed by
            	<i>precision specifier</i>, that is a decimal constant in
            	brackets.
            
            	<para>If a precision specifier is given, then only the corresponding
            	number of right most components of the category name will be
            	printed. By default the category name is printed in full.</para>
            
            	<para>For example, for the category name "a.b.c" the pattern
            	<b>%c{2}</b> will output "b.c".</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>C</b></td>
            
            	<td>Used to output the fully qualified class name of the caller
            	issuing the logging request. This conversion specifier
            	can be optionally followed by <i>precision specifier</i>, that
            	is a decimal constant in brackets.
            
            	<para>If a precision specifier is given, then only the corresponding
            	number of right most components of the class name will be
            	printed. By default the class name is output in fully qualified form.</para>
            
            	<para>For example, for the class name "org.apache.xyz.SomeClass", the
            	pattern <b>%C{1}</b> will output "SomeClass".</para>
            
            	<para><b>WARNING</b> Generating the caller class information is
            	slow. Thus, it's use should be avoided unless execution speed is
            	not an issue.</para>
            	</td>
            </tr>
            
            <tr> 
            	<td align="center"><b>d</b></td> 
            
            	<td>Used to output the date of
            	the logging event. The date conversion specifier may be
            	followed by a <i>date format specifier</i> enclosed between
            	braces. For example, <b>%d{HH:mm:ss,SSS}</b> or
            	<b>%d{dd&amp;nbsp;MMM&amp;nbsp;yyyy&amp;nbsp;HH:mm:ss,SSS}</b>.  If no
            	date format specifier is given then ISO8601 format is
            	assumed.
            
            	<para>The date format specifier admits the same syntax as the
            	time pattern string of the <see cref="M:System.DateTime.ToString"/>.</para>
            
            	<para>For better results it is recommended to use the log4net date
            	formatters. These can be specified using one of the strings
            	"ABSOLUTE", "DATE" and "ISO8601" for specifying <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/>
            	<see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> and respectively 
            	<see cref="T:log4net.DateFormatter.ISO8601DateFormatter"/>. For example, 
            	<b>%d{ISO8601}</b> or <b>%d{ABSOLUTE}</b>.</para>
            
            	<para>These dedicated date formatters perform significantly
            	better than java.text.SimpleDateFormat.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>F</b></td>
            
            	<td>Used to output the file name where the logging request was
            	issued.
            
            	<para><b>WARNING</b> Generating caller location information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>l</b></td>
            
            	<td>Used to output location information of the caller which generated
            	the logging event. 
            
            	<para>The location information depends on the JVM implementation but
            	usually consists of the fully qualified name of the calling
            	method followed by the callers source the file name and line
            	number between parentheses.</para>
            
            	<para>The location information can be very useful. However, it's
            	generation is <b>extremely</b> slow. It's use should be avoided
            	unless execution speed is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>L</b></td>
            
            	<td>Used to output the line number from where the logging request
            	was issued.
            
            	<para><b>WARNING</b> Generating caller location information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>W</b></td>
            
            	<td>Used to output the WindowsIdentity for the currently
            	active user.
            
            	<para><b>WARNING</b> Generating caller WindowsIdentity information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>m</b></td>
            	
            	<td>Used to output the application supplied message associated with 
            	the logging event.</td>   
            </tr>
            
            <tr>
            	<td align="center"><b>M</b></td>
            
            	<td>Used to output the method name where the logging request was
            	issued.
            
            	<para><b>WARNING</b> Generating caller location information is
            	extremely slow. It's use should be avoided unless execution speed
            	is not an issue.</para>
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>n</b></td>
            
            	<td>Outputs the platform dependent line separator character or
            	characters. 
            
            	<para>This conversion character offers practically the same
            	performance as using non-portable line separator strings such as
            	"\n", or "\r\n". Thus, it is the preferred way of specifying a
            	line separator.</para> 
            	</td>
            </tr>
            
            <tr>
            	<td align="center"><b>p</b></td>
            	
            	<td>Used to output the priority of the logging event.</td>
            </tr>
            
            <tr>
            	<td align="center"><b>r</b></td>
            
            	<td>Used to output the number of milliseconds elapsed since the start
            	of the application until the creation of the logging event.</td>
            </tr>  
            
            <tr>
            	<td align="center"><b>t</b></td>
            
            	<td>Used to output the name of the thread that generated the
            	logging event.  Uses the thread number if no name is available.</td>
            </tr>
            
            <tr>
            	<td align="center"><b>x</b></td>
            
            	<td>Used to output the NDC (nested diagnostic context) associated
            	with the thread that generated the logging event.
            	</td>     
            </tr>
            
            <tr>
            	<td align="center"><b>X</b></td>
            
            	<td>Used to output the MDC (mapped diagnostic context) associated
            	with the thread that generated the logging event. The key to lookup
            	must be specified within braces and directly following the
            	pattern specifier, e.g. <c>%X{user}</c> would include the value
            	from the MDC that is keyed by the string 'user'. Each MDC value
            	that is to be included in the log must be specified seperatly.
            	</td>     
            </tr>
            
            <tr>
            	<td align="center"><b>%</b></td>
            
            	<td>The sequence %% outputs a single percent sign.
            	</td>     
            </tr>
            
            </table>
            
            <para>By default the relevant information is output as is. However,
            with the aid of format modifiers it is possible to change the
            minimum field width, the maximum field width and justification.</para>
            
            <para>The optional format modifier is placed between the percent sign
            and the conversion character.</para>
            
            <para>The first optional format modifier is the <i>left justification
            flag</i> which is just the minus (-) character. Then comes the
            optional <i>minimum field width</i> modifier. This is a decimal
            constant that represents the minimum number of characters to
            output. If the data item requires fewer characters, it is padded on
            either the left or the right until the minimum width is
            reached. The default is to pad on the left (right justify) but you
            can specify right padding with the left justification flag. The
            padding character is space. If the data item is larger than the
            minimum field width, the field is expanded to accommodate the
            data. The value is never truncated.</para>
            
            <para>This behavior can be changed using the <i>maximum field
            width</i> modifier which is designated by a period followed by a
            decimal constant. If the data item is longer than the maximum
            field, then the extra characters are removed from the
            <i>beginning</i> of the data item and not from the end. For
            example, it the maximum field width is eight and the data item is
            ten characters long, then the first two characters of the data item
            are dropped. This behavior deviates from the printf function in C
            where truncation is done from the end.</para>
            
            <para>Below are various format modifier examples for the category
            conversion specifier.</para>
            
            <table border="1" cellpadding="8">
            <th>Format modifier</th>
            <th>left justify</th>
            <th>minimum width</th>
            <th>maximum width</th>
            <th>comment</th>
            
            <tr>
            <td align="center">%20c</td>
            <td align="center">false</td>
            <td align="center">20</td>
            <td align="center">none</td>
            
            <td>Left pad with spaces if the category name is less than 20
            characters long.</td>
            </tr>
            
            <tr> <td align="center">%-20c</td> <td align="center">true</td> <td align="center">20</td> <td align="center">none</td> <td>Right pad with
            spaces if the category name is less than 20 characters long.</td></tr>
            
            <tr>
            <td align="center">%.30c</td>
            <td align="center">NA</td>
            <td align="center">none</td>
            <td align="center">30</td>
            
            <td>Truncate from the beginning if the category name is longer than 30
            characters.</td>
            </tr>
            
            <tr>
            <td align="center">%20.30c</td>
            <td align="center">false</td>
            <td align="center">20</td>
            <td align="center">30</td>
            
            <td>Left pad with spaces if the category name is shorter than 20
            characters. However, if category name is longer than 30 characters,
            then truncate from the beginning.</td>
            </tr>
            
            <tr>
            <td align="center">%-20.30c</td>
            <td align="center">true</td>
            <td align="center">20</td>
            <td align="center">30</td>
            
            <td>Right pad with spaces if the category name is shorter than 20
            characters. However, if category name is longer than 30 characters,
            then truncate from the beginning.</td>
            </tr>
            
            </table>
            
            <para>Below are some examples of conversion patterns.</para>
            
            <dl>
            
            <para><dt><b>%r [%t] %-5p %c %x - %m\n</b></dt></para>
            <para><dd>This is essentially the TTCC layout.</dd></para>
            
            <para><dt><b>%-6r [%15.15t] %-5p %30.30c %x - %m\n</b></dt></para>
            
            <para><dd>Similar to the TTCC layout except that the relative time is
            right padded if less than 6 digits, thread name is right padded if
            less than 15 characters and truncated if longer and the category
            name is left padded if shorter than 30 characters and truncated if
            longer.</dd></para>
            
            </dl>
            </remarks>
        </member>
        <member name="T:log4net.Layout.LayoutSkeleton">
            <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
        </member>
        <member name="T:log4net.Layout.ILayout">
            <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
        </member>
        <member name="M:log4net.Layout.ILayout.Format(log4net.spi.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
        </member>
        <member name="P:log4net.Layout.ILayout.ContentType">
            <summary>
            Returns the content type output by this layout. The base class returns "text/plain".
            </summary>
            <returns>the content type</returns>
        </member>
        <member name="P:log4net.Layout.ILayout.Header">
            <summary>
            Returns the header for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.ILayout.Footer">
            <summary>
            Returns the footer for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.ILayout.IgnoresException">
            <summary>
            If the layout handles the exception object contained within
            <see cref="T:log4net.spi.LoggingEvent"/>, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores exception
            object, then the layout should return <c>true</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.LINE_SEP">
            <summary>
            Platform end of line seperator
            </summary>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.LINE_SEP_LEN">
            <summary>
            length of end of line seperator
            </summary>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to option setters.
            </summary>
            <remarks>
            This allows to defer activiation of the options until all
            options have been set. This is required for components which have
            related options that remain ambigous until all are set.
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.Format(log4net.spi.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.ContentType">
            <summary>
            Returns the content type output by this layout. The base class returns "text/plain".
            </summary>
            <returns>the content type</returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Header">
            <summary>
            Returns the header for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Footer">
            <summary>
            Returns the footer for the layout format. The base class returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.IgnoresException">
            <summary>
            If the layout handles the exception object contained within
            <see cref="T:log4net.spi.LoggingEvent"/>, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores exception
            object, then the layout should return <c>true</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:log4net.Layout.PatternLayout.DEFAULT_CONVERSION_PATTERN">
            <summary>
            Default pattern string for log output. 
            Currently set to the string <b>"%m%n"</b> 
            which just prints the application supplied	message. 
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.TTCC_CONVERSION_PATTERN">
            <summary>
            A conversion pattern equivalent to the TTCCCLayout. Current value is <b>%r [%t] %p %c %x - %m%n</b>.
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.BUF_SIZE">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.MAX_CAPACITY">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_sbuf">
            <summary>
            output buffer appended to when Format() is invoked
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor">
            <summary>
            Constructs a PatternLayout using the DEFAULT_LAYOUT_PATTERN
            </summary>
            <remarks>
            The default pattern just produces the application supplied message.
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor(System.String)">
            <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
        </member>
        <member name="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)">
            <summary>
            Returns PatternParser used to parse the conversion string. Subclasses
            may override this to return a subclass of PatternParser which recognize
            custom conversion characters.
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns></returns>
        </member>
        <member name="M:log4net.Layout.PatternLayout.ActivateOptions">
            <summary>
            Does not do anything as options become effective immediately.
            </summary>
        </member>
        <member name="M:log4net.Layout.PatternLayout.Format(log4net.spi.LoggingEvent)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the formatted string</returns>
        </member>
        <member name="P:log4net.Layout.PatternLayout.ConversionPattern">
            <summary>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </summary>
        </member>
        <member name="P:log4net.Layout.PatternLayout.IgnoresException">
            <summary>
            The PatternLayout does not handle the exception contained within
            LoggingEvents. Thus, it returns <c>true</c>.
            </summary>
        </member>
        <member name="T:log4net.Filter.PriorityRangeFilter">
            <summary>
            This is a simple filter based on priority matching.
            </summary>
            <remarks>
            <para>The filter admits three options <b>PriorityMin</b> and <b>PriorityMax</b>
            that determine the range of priorites that are matched, and
            <b>AcceptOnMatch</b>. If there is a match between the range
            of priorities and the priority of the LoggingEvent, then the 
            Decide method returns ACCEPT in case the <b>AcceptOnMatch</b> 
            option value is set to <c>true</c>, if it is <c>false</c>
             then DENY is returned. If there is no match, DENY is returned.</para>
            </remarks>
        </member>
        <member name="F:log4net.Filter.PriorityRangeFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behaviour when matching a priority
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityRangeFilter.m_priorityMin">
            <summary>
            the minimum priority value to match
            </summary>
        </member>
        <member name="F:log4net.Filter.PriorityRangeFilter.m_priorityMax">
            <summary>
            the maximum priority value to match
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityRangeFilter.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:log4net.Filter.PriorityRangeFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Check if the event should be logged.
            </summary>
            <remarks>
            If the priority of the logging event is outside the range
            matched by this filter then <see cref="F:log4net.Filter.FilterSkeleton.DENY"/>
            is returned. If the priority is matched then the value of
            <see cref="P:log4net.Filter.PriorityRangeFilter.AcceptOnMatch"/> is checked. If it is true then
            <see cref="F:log4net.Filter.FilterSkeleton.ACCEPT"/> is returned, otherwise
            <see cref="F:log4net.Filter.FilterSkeleton.NEUTRAL"/> is returned.
            </remarks>
            <param name="loggingEvent">the logging event to check</param>
            <returns>see remarks</returns>
        </member>
        <member name="P:log4net.Filter.PriorityRangeFilter.AcceptOnMatch">
            <summary>
            The AcceptOnMatch property is a flag that determines
            the behaviour when a matching Priority is found. If the
            flag is set to true then the filter will ACCEPT the 
            logging event, otherwise it will NEUTRAL the event.
            </summary>
        </member>
        <member name="P:log4net.Filter.PriorityRangeFilter.PriorityMin">
            <summary>
            Set the minimum matched priority
            </summary>
        </member>
        <member name="P:log4net.Filter.PriorityRangeFilter.PriorityMax">
            <summary>
            Sets the maximum matched priority
            </summary>
        </member>
        <member name="T:log4net.Appender.EventLogAppender">
            <summary>
            EventLogAppender writes events to the system
            event log.
            
            This class uses a StringWriter to act at
            the Writer, delegates the call to the base
            class, which generates output in the
            StringWriter's StringBuffer.  This string is 
            then passed to the system event log.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.s_mapPriority2EventLogEntryType">
            <summary>
            Hold a mapping between Priority objects and
            EventLogEntryTypes
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#cctor">
            <summary>
            Initialise static variables when this class is 
            loaded.
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.ConvertPriority2EventLogEntryType(log4net.Priority)">
            <summary>
            Get the equivalent <see cref="T:System.Diagnostics.EventLogEntryType"/> for a <see cref="T:log4net.Priority"/> <paramref name="p"/>
            </summary>
            <param name="p">the Priority to convert to an EventLogEntryType</param>
            <returns>The eqivalent <see cref="T:System.Diagnostics.EventLogEntryType"/> for a <see cref="T:log4net.Priority"/> <paramref name="p"/></returns>
            <remarks>
            Because there are fewer applicable <see cref="T:System.Diagnostics.EventLogEntryType"/>
            values to use in logging levels than there are in the 
            <see cref="T:log4net.Priority"/> this is a one way mapping. There is
            a loss of information during the conversion.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_writer">
            <summary>
            This string buffers the message to be written to the event log
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_logName">
            <summary>
            The log name is the section in the event logs where the messages
            are stored.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_applicationName">
            <summary>
            Name of the application to use when logging.  This appears in the
            application column of the event log named by m_sourceName.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_eventLog">
            <summary>
            Object we use to write to the event log
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.CloseWriter">
            <summary>
            Override the parent method to close the default trace channel
            </summary>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.SubAppend(log4net.spi.LoggingEvent)">
            <summary>
            Actual writing occurs here.
            <para>Most subclasses of <see cref="T:log4net.Appender.TextWriterAppender"/> will need to 
            override this method.</para>
            </summary>
            <param name="loggingEvent">the event to log</param>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.LogName">
            <summary>
            The name of the log where messages will be stored.
            </summary>
            <value>
            The string name of the log where messages will be stored.
            </value>
            <remarks>
            <para>This is the name of the log as it appears in the Event Viewer
            tree. The default value is to log into the <c>Application</c>
            log, this is where most applications write their events. However
            if you need a seperate log for your application (or applications)
            then you should set the <c>LogName</c> appropriatly.</para>
            <para>This should not be used to distinguish your event log messages
            from those of other applications, the <see cref="P:log4net.Appender.EventLogAppender.ApplicationName"/>
            property should be used to distinguish events. This property should be 
            used to group together events into a single log.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.ApplicationName">
            <summary>
            Property used to set the Application name.  This appears in the
            event logs when logging.
            </summary>
            <value>
            The string used to distinguish events from different sources.
            </value>
            <remarks>
            Sets the event log source property.
            </remarks>
        </member>
        <member name="T:log4net.spi.ProvisionNode">
            <summary>
            Summary description for ProvisionNode.
            ProvisionNodes are used in the Hierarchy when
            there is no specified category for that node.
            </summary>
        </member>
        <member name="M:log4net.spi.ProvisionNode.#ctor(log4net.Category)">
            <summary>
            Construct new node with specified child category
            </summary>
            <param name="cat">a child category to add to this node</param>
        </member>
        <member name="T:log4net.Filter.StringMatchFilter">
            <summary>
            Simple filter to match a string in the rendered message
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behaviour when we have a match
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_stringToMatch">
            <summary>
            The string to substring match against the message
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <remarks>
            The rendered message is mached agains the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/>.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> occurs as a substring within
            the message then a match will have occured. If no match occures
            this function will return <see cref="F:log4net.Filter.FilterSkeleton.NEUTRAL"/>
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterSkeleton.ACCEPT"/> is returned otherwise
            <see cref="F:log4net.Filter.FilterSkeleton.DENY"/> is returned.
            </remarks>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.AcceptOnMatch">
            <summary>
            The AcceptOnMatch property is a flag that determines
            the behaviour when a matching Priority is found. If the
            flag is set to true then the filter will ACCEPT the 
            logging event, otherwise it will DENY the event.
            </summary>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.StringToMatch">
            <summary>
            The string that will be substring matched against
            the rendered message. If the message contains this
            string then the filter will match.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.ISO8601DateFormatter">
            <summary>
            Format the date specifed as a string: 'YYYY-MM-dd HH:mm:ss,SSS'
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.ISO8601DateFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.ISO8601DateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Format the date specifed as a string: 'YYYY-MM-dd HH:mm:ss'
            the base class will append the ',SSS' milliseconds section.
            We will only be called at most once per second.
            </summary>
            <param name="date">the date to format</param>
            <param name="sbuf">the string builder to write to</param>
        </member>
        <member name="T:log4net.Config.DOMConfigurator">
            <summary>
            Use this class to initialize the log4net environment using a DOM tree.
            </summary>
        </member>
        <member name="F:log4net.Config.DOMConfigurator.m_appenderBag">
            <summary>
            key: appenderName, value: appender
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.#ctor">
            <summary>
            No argument constructor.
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure">
            <summary>
            Automaticaly configure the log4net system based on the 
            application's configuration settings.
            </summary>
            <remarks>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            Replace but not override the Configure() method on 
            BasicConfigurator.
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configure log4net using a <c>log4net</c> element
            </summary>
            <remarks>
            Load the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </remarks>
            <param name="element">the element to parse</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            Configure log4net using the config file specified.
            </summary>
            <param name="configFile">the XML config file to load
            the configuration from</param>
            <remarks>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            <para>
            The logging file could be specified in the applications
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            To Load the configuration use code like:
            </para>
            <code>
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
            <para>In your <c>.config</c> file you must specify the config file to
            use like this:</para>
            <code>
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="log4net-config-file" value="log.config"/&gt;
            	&lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            <param>
            Of course you don't have to do it like that if you don't want to.
            </param>
            <param>
            If you need to monitor this file for changes and reload the
            configuration when the config file's contents changes then
            you should use the <see cref="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)"/> method
            instead.
            </param>
            </remarks>
            <seealso cref="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)"/>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            Configure log4net using the file specified, monitor the file for changes 
            and reload the configuration if a change is detected.
            </summary>
            <param name="configFile">the XML config file to load
            the configuration from</param>
            <remarks>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            <para>
            The config file will be monitored using a <see cref="T:System.IO.FileSystemWatcher"/>
            and is dependant on the behaviour of that class.
            </para>
            <para>
            For more information on how to configure log4net using
            a seperate config file see <see cref="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)"/>.
            </para>
            </remarks>
            <seealso cfer="Configure(FileInfo)"/>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Parse(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to configure the log4net framework by parsing a DOM tree of XML elements.
            </summary>
            <param name="element">the root element to parse</param>
            <param name="hierarchy">the hierarchy to build</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
            <summary>
            Used internally to parse appenders by IDREF.
            </summary>
            <param name="appenderRef">the appender ref element</param>
            <returns>the instance of the appender that the ref referes to</returns>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseAppender(System.Xml.XmlElement)">
            <summary>
            Used internally to parse an appender element.
            </summary>
            <param name="appenderElement">the appender element</param>
            <returns>the appender instance</returns>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseErrorHandler(System.Xml.XmlElement,log4net.Appender.IAppender)">
            <summary>
            Used internally to parse an error handler element.
            </summary>
            <param name="element">the error hander element</param>
            <param name="appender">the appender to set the error handler on</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseFilters(System.Xml.XmlElement,log4net.Appender.IAppender)">
            <summary>
            Used internally to parse a filter element.
            </summary>
            <param name="element">the filter element</param>
            <param name="appender">the appender to add the filter to</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseCategory(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse an category element.
            </summary>
            <param name="categoryElement">the category element</param>
            <param name="hierarchy">the hierarchy to add the category to</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseCategoryFactory(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse the category factory element.
            </summary>
            <param name="factoryElement">the factory element</param>
            <param name="hierarchy">the hierarchy to set the category factory on</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseRoot(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse the roor category element.
            </summary>
            <param name="rootElement">the root element</param>
            <param name="hierarchy">the hierarchy to set the root element on</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseChildrenOfCategoryElement(System.Xml.XmlElement,log4net.Category,System.Boolean)">
            <summary>
            Used internally to parse the children of a category element.
            </summary>
            <param name="catElement">the catefory element</param>
            <param name="cat">the category instance</param>
            <param name="isRoot">flag to indicate if the category is the root category</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseLayout(System.Xml.XmlElement)">
            <summary>
            Used internally to parse a layout element.
            </summary>
            <param name="layout_element">the layout element</param>
            <returns>the instance of the layout object</returns>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParseRenderer(System.Xml.XmlElement,log4net.Hierarchy)">
            <summary>
            Used internally to parse an object renderer
            </summary>
            <param name="element">the renderer element</param>
            <param name="hierarchy">the hierarchy to add the renderer to</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ParsePriority(System.Xml.XmlElement,log4net.Category,System.Boolean)">
            <summary>
            Used internally to parse a priority element.
            </summary>
            <param name="element">the priority element</param>
            <param name="cat">the category object to set the priority on</param>
            <param name="isRoot">flag to indicate if the category is the root category</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
            <summary>
            Internal function to set a param on an object.
            </summary>
            <remarks>
            The param name must correspond to a writable property
            on the object. The value of the param is a string,
            therefore this function will attempt to set a string
            property first. If unable to set a string property it
            will inspect the property and its argument type. It will
            attempt to call a static method called 'Parse' on the
            type of the property. This method will take a single
            string argument and return a value that can be used to
            set the property.
            </remarks>
            <param name="elem">the param element</param>
            <param name="target">the object to set the param on</param>
        </member>
        <member name="T:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler">
            <summary>
            Internal class used to watch config files
            </summary>
        </member>
        <member name="F:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.m_configFile">
            <summary>
            Hold the FileInfo used to configure the DOMConfigurator
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.#ctor(System.IO.FileInfo)">
            <summary>
            Construct a new watch handler.
            </summary>
            <param name="configFile">the config file to watch</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">the <see cref="T:System.IO.FileSystemWatcher"/> firing the event</param>
            <param name="e">the argument indicates the file that caused the event to be fired</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.DOMConfigurator.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">the <see cref="T:System.IO.FileSystemWatcher"/> firing the event</param>
            <param name="e">the argument indicates the file that caused the event to be fired</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="T:log4net.Appender.ConsoleAppender">
            <summary>
            ConsoleAppender appends log events to <see cref="P:System.Console.Out"/> 
            or <see cref="P:System.Console.Error"/>  using a layout specified by the 
            user. The default target is <see cref="P:System.Console.Out"/> .
            </summary>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.CONSOLE_OUT">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writting to the Console standard out
            </summary>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.CONSOLE_ERR">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writting to the Console standard error
            </summary>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.m_target">
            <summary>
            The target that is being used by the appender
            </summary>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor">
            <summary>
            The default constructor does nothing.
            </summary>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initialise the appender with a specified layout
            </summary>
            <param name="layout">the layout to use with this appender</param>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Initialise the appender with a specified layout and 
            console output stream.
            The console output stream must be <c>"Console.Out"</c>
            or <c>"Console.Error"</c>
            </summary>
            <param name="layout">the layout object to use</param>
            <param name="target">the console output stream</param>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.TargetWarn(System.String)">
            <summary>
            Internal method called to indicate an error with
            the console stream name provided.
            </summary>
            <param name="val">the erroneous console stream name</param>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.ActivateOptions">
            <summary>
            Initialise the appender based on the options set
            </summary>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.CloseWriter">
            <summary>
            Override the parent method to do nothing.
            </summary>
        </member>
        <member name="P:log4net.Appender.ConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>Console.Out</c> or <c>Console.Error</c>.
            </summary>
        </member>
        <member name="T:log4net.spi.CategoryKey">
            <summary>
            CategoryKey is heavily used internally to accelerate hash table searches.
            </summary>
        </member>
        <member name="T:log4net.ObjectRenderer.RendererMap">
            <summary>
            Map class objects to an <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
            <summary>
            Find the appropriate renderer for the class type of the
            <paramref name="o"/> parameter. This is accomplished by calling the
            <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)"/> method. Once a renderer is found, it is
            applied on the object <paramref name="o"/> and the result is returned
            as a <see cref="T:System.String"/>.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)">
            <summary>
            Syntactic sugar method that calls <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)"/> with the class of the object parameter.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)">
            <summary>
            Gets the renderer for the specified type
            </summary>
            <param name="clazz"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.SearchInterfaces(System.Type)">
            <summary>
            Internal function to recusivly search interfaces
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Clear">
            <summary>
            Clear the map of renderers
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Register an <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> for <paramref name="clazz"/>. 
            </summary>
            <param name="clazz"></param>
            <param name="or"></param>
        </member>
        <member name="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer">
            <summary>
            Get the default renderer instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.DateFormatter.SimpleDateFormatter">
            <summary>
            Format the <c>DateTime</c> using the <see cref="T:System.DateTime"/>.<see cref="M:System.DateTime.ToString"/>
            method.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.SimpleDateFormatter.m_formatString">
            <summary>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:System.DateTime.ToString"/>.
            </summary>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.#ctor(System.String)">
            <summary>
            Construct a simple date formatter with a format string
            </summary>
            <remarks>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:System.DateTime.ToString"/>.
            </remarks>
            <param name="formatString">the format string</param>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.FormatDate(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Format the date using <see cref="M:System.DateTime.ToString"/>
            </summary>
            <param name="date">the date to convert to a string</param>
            <param name="buf">the builder to write to</param>
            <returns>the builder passed</returns>
        </member>
        <member name="T:log4net.Config.Log4NetConfigurationSectionHandler">
            <summary>
            Class to register for the log4net section of the configuration file
            </summary>
            <remarks>
            The log4net section of the configuration file needs to have a section
            handler registered. This is the section handler used. It simply returns
            the XML element that is the root of the section.
            </remarks>
            <example>
            Example of registering the section handler
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;configSections&gt;
            		&lt;section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" /&gt;
            	&lt;/configSections&gt;
            	&lt;log4net&gt;
            		log4net configuration XML goes here
            	&lt;/log4net&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            method called to parse the configuration section
            </summary>
            <param name="parent">ignored</param>
            <param name="configContext">ignored</param>
            <param name="section">the XML node for the section</param>
            <returns>the XML node for the section</returns>
        </member>
        <member name="T:log4net.Appender.CountingAppender">
            <summary>
            Implements an Appender for test purposes that counts the
            number of output calls to Append
            </summary>
        </member>
        <member name="F:log4net.Appender.CountingAppender.m_counter">
            <summary>
            Counts the number of times DoAppend has been called
            </summary>
        </member>
        <member name="M:log4net.Appender.CountingAppender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:log4net.Appender.CountingAppender.Append(log4net.spi.LoggingEvent)">
            <summary>
            Registers how many times the method has been called
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:log4net.Appender.CountingAppender.RequiresLayout">
            <summary>
            This class doesn't have it's own layout object
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.CountingAppender.Close">
            <summary>
            Stubbed out - does nothing.  
            </summary>
        </member>
        <member name="P:log4net.Appender.CountingAppender.Counter">
            <summary>
            Returns the number of times DoAppend has been called
            </summary>
        </member>
        <member name="T:log4net.Priority">
            <summary>
            Defines the minimum set of priorities recognized by the system.
            </summary>
            <remarks>
            Defines the minimum set of priorities recognized by the system,	
            that is FATAL, ERROR, WARN, INFO and DEBUG.
            The <c>Priority</c> class may be subclassed to define a larger priority set.
            </remarks>
        </member>
        <member name="F:log4net.Priority.FATAL">
            <summary>
            The <c>FATAL</c> priority designates very severe error events that will presumably lead the application to abort.
            </summary>
        </member>
        <member name="F:log4net.Priority.ERROR">
            <summary>
            The <c>ERROR</c> priority designates error events that might still allow the application to continue running.
            </summary>
        </member>
        <member name="F:log4net.Priority.WARN">
            <summary>
            The <c>WARN</c> priority designates potentially harmful situations.
            </summary>
        </member>
        <member name="F:log4net.Priority.INFO">
            <summary>
            The <c>INFO</c> priority designates informational messages that highlight the progress of the application at coarse-grained level.
            </summary>
        </member>
        <member name="F:log4net.Priority.DEBUG">
            <summary>
            The <c>DEBUG</c> priority designates fine-grained informational events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Priority.OFF">
            <summary>
            The <c>OFF</c> priority designates a lower level priority than all the rest.
            </summary>
        </member>
        <member name="M:log4net.Priority.#ctor(System.Int32,System.String)">
            <summary>
            Instantiate a priority object.
            </summary>
            <param name="level"></param>
            <param name="levelStr"></param>
        </member>
        <member name="M:log4net.Priority.ToString">
            <summary>
            Returns the string representation of this priority.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Priority.Equals(System.Object)">
            <summary>
            Override Equals to compare the levels of
            Priority objects. Defers to base class if
            the target object is not a Priority.
            </summary>
            <param name="o">The object to compare against</param>
            <returns>true if the objects are equal</returns>
        </member>
        <member name="M:log4net.Priority.GetHashCode">
            <summary>
            Returns a hash code that is sutable for use in a hashtree etc
            </summary>
            <returns>the hash of this object</returns>
        </member>
        <member name="M:log4net.Priority.op_GreaterThan(log4net.Priority,log4net.Priority)">
            <summary>
            Operator greater than that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is greater than the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_LessThan(log4net.Priority,log4net.Priority)">
            <summary>
            Operator less than that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is less than the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_GreaterThanOrEqual(log4net.Priority,log4net.Priority)">
            <summary>
            Operator greater than or equal that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is greater than or equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_LessThanOrEqual(log4net.Priority,log4net.Priority)">
            <summary>
            Operator less than or equal that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is less than or equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_Equality(log4net.Priority,log4net.Priority)">
            <summary>
            Operator equals that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.op_Inequality(log4net.Priority,log4net.Priority)">
            <summary>
            Operator not equals that compares Priorities
            </summary>
            <param name="l">left hand side</param>
            <param name="r">right hand side</param>
            <returns>true if left hand side is not equal to the right hand side</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.String)">
            <summary>
            Convert the string passed as argument to a priority. If the
            conversion fails, then this method returns <see cref="F:log4net.Priority.DEBUG"/>.
            </summary>
            <param name="sArg">The string to parse into a Priority</param>
            <returns>The Priority represented by the string argument</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.Int32)">
            <summary>
            Convert an integer passed as argument to a priority. If the
            conversion fails, then this method returns <see cref="F:log4net.Priority.DEBUG"/>.
            </summary>
            <param name="val">The int to convert to a Priority</param>
            <returns>The Priority represented by the argument</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.Int32,log4net.Priority)">
            <summary>
            Convert an integer passed as argument to a priority. If the
            conversion fails, then this method returns the specified default.
            </summary>
            <param name="val">The value to convert to a Prority</param>
            <param name="defaultPriority">The default Priority value to use</param>
            <returns>The Priority represented by the Argument</returns>
        </member>
        <member name="M:log4net.Priority.Parse(System.String,log4net.Priority)">
            <summary>
            Convert the string passed as argument to a priority. If the
            conversion fails, then this method returns the value of
            <c>defaultPriority</c>.
            </summary>
            <param name="sArg">The string to parse</param>
            <param name="defaultPriority">the default Priority to use</param>
            <returns>The Priority represented by the argument</returns>
        </member>
        <member name="P:log4net.Priority.AllPossiblePriorities">
            <summary>
            Return all possible priorities as an array of Priority objects in descending order.
            </summary>
            <returns>all possible priorities as an array of Priority objects in descending order</returns>
        </member>
        <member name="T:log4net.helpers.CountingQuietTextWriter">
            <summary>
            Subclass of QuietTextWriter that maintains a count of the number of chars written
            </summary>
        </member>
        <member name="F:log4net.helpers.CountingQuietTextWriter.m_count">
            <summary>
            member variable to hold the total count of chars written
            </summary>
        </member>
        <member name="M:log4net.helpers.CountingQuietTextWriter.#ctor(System.IO.TextWriter,log4net.spi.IErrorHandler)">
            <summary>
            Create a new CountingQuietTextWriter using a writer and error handler
            </summary>
            <param name="writer">the writer to actualy write to</param>
            <param name="errorHandler">the error handler to report error to</param>
        </member>
        <member name="M:log4net.helpers.CountingQuietTextWriter.Write(System.String)">
            <summary>
            Write a string to the output. Count the number of chars written.
            </summary>
            <param name="str">the string data to write to the output</param>
        </member>
        <member name="P:log4net.helpers.CountingQuietTextWriter.Count">
            <summary>
            The total number of characters written
            </summary>
        </member>
        <member name="T:log4net.Filter.DenyAllFilter">
            <summary>
            This filter drops all logging events. 
            </summary>
            <remarks>
            You can add this filter to the end of a filter chain to
            switch from the default "accept all unless instructed otherwise"
            filtering behaviour to a "deny all unless instructed otherwise"
            behaviour.	
            </remarks>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.Decide(log4net.spi.LoggingEvent)">
            <summary>
            Always returns the integer constant <see cref="F:log4net.Filter.FilterSkeleton.DENY"/>
            </summary>
            <remarks>
            Ignores the event being logged and just returns
            DENY. This can be used to change the default filter
            chain behaviour from ACCEPT to DENY. This filter
            should only be used as the last filter in the chain
            as any further filters will be ignored!
            </remarks>
            <param name="loggingEvent">he LoggingEvent to filter</param>
            <returns>Always returns <see cref="F:log4net.Filter.FilterSkeleton.DENY"/></returns>
        </member>
    </members>
</doc>