Imports System.Data.SqlClient
Imports GrowthWare.Framework.DataAccessLayer.SqlServer.Base
Imports GrowthWare.Framework.Model.Enumerations
Imports GrowthWare.Framework.Model.Profiles

Namespace DataAccessLayer.SqlServer.V2000
	''' <summary>
	''' DFunctions provides all database interaction to SQL Server 2000 to 2005
	''' </summary>
	''' <remarks>
	'''		The Profile and SecurityEntitySeqID properties must be set
	'''		before using any methods.
	'''		Properties where chosen instead of parameters because all
	'''		methods will need one or both to perform their work.
	'''	</remarks>
	Public Class DFunctions
		Inherits DDBInteraction
		Implements IDFunction

#Region "Member Objects"
		Private m_Profile As MFunctionProfile = Nothing
#End Region

#Region "Public Properties"

		Public ReadOnly Property GetFunction As System.Data.DataRow Implements IDFunction.GetFunction
			Get
				checkValid()
				Dim mParameters() As SqlParameter =
				{
				 New SqlParameter("@P_FUNCTION_SEQ_ID", Profile.Id),
				 MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
				}
				Return MyBase.GetDataRow("ZFP_GET_FUNCTION", mParameters)
			End Get
		End Property

		Public ReadOnly Property GetFunctions As System.Data.DataSet Implements IDFunction.GetFunctions
			Get
				checkValid()
				Dim mDSFunctions As DataSet = Nothing
				Dim myParameters() As SqlParameter = _
				{ _
				 New SqlParameter("@P_FUNCTION_SEQ_ID", -1), _
				 MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) _
				}
				Try
					mDSFunctions = New DataSet
					Dim mFunctions As DataTable = MyBase.GetDataTable("ZFP_GET_FUNCTION", myParameters)
					Dim mHasAssingedRoles As Boolean = False
					Dim mHasGroups As Boolean = False
					mFunctions.TableName = "Functions"
					Dim mFunctionSecurity As DataTable = Me.GetSecurity()
					mFunctionSecurity.TableName = "FunctionSecurity"
					Dim mAssignedRolesDT As DataTable = Me.GetAllRoles()
					mAssignedRolesDT.TableName = "AssignedRoles"
					If mAssignedRolesDT.Rows.Count > 0 Then mHasAssingedRoles = True
					Dim mGroupsTD As DataTable = Me.GetAllGroups()
					mGroupsTD.TableName = "Groups"
					If mGroupsTD.Rows.Count > 0 Then mHasGroups = True
					mDSFunctions.Tables.Add(mFunctions.Copy)
					mDSFunctions.Tables.Add(mFunctionSecurity.Copy)
					mDSFunctions.Tables.Add(mAssignedRolesDT.Copy)
					mDSFunctions.Tables.Add(mGroupsTD.Copy)
					Dim mRelation As DataRelation = New DataRelation("DerivedRoles", mDSFunctions.Tables(0).Columns("Function_Seq_ID"), mDSFunctions.Tables(1).Columns("Function_Seq_ID"))
					mDSFunctions.Relations.Add(mRelation)
					If mHasAssingedRoles Then
						mRelation = New DataRelation("AssignedRoles", mDSFunctions.Tables(0).Columns("Function_Seq_ID"), mDSFunctions.Tables(2).Columns("Function_Seq_ID"))
						mDSFunctions.Relations.Add(mRelation)
					End If
					If mHasGroups Then
						mRelation = New DataRelation("Groups", mDSFunctions.Tables(0).Columns("Function_Seq_ID"), mDSFunctions.Tables(3).Columns("Function_Seq_ID"))
						mDSFunctions.Relations.Add(mRelation)
					End If
				Catch ex As Exception
					Throw
				Finally
					If Not mDSFunctions Is Nothing Then
						mDSFunctions.Dispose()
					End If
				End Try
				Return mDSFunctions
			End Get
		End Property

		Public Property Profile As MFunctionProfile Implements IDFunction.Profile
			Get
				Return m_Profile
			End Get
			Set(value As MFunctionProfile)
				m_Profile = value
			End Set
		End Property

		Public Property SecurityEntitySeqID As Integer Implements IDFunction.SecurityEntitySeqID
#End Region

#Region "Pulbic Methods"
		Public Sub Delete() Implements IDFunction.Delete
			checkValid()
			Dim myParameters() As SqlParameter = _
			{ _
			  New SqlParameter("@P_FUNCTION_SEQ_ID", Profile.Id), _
			  MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) _
			}
			MyBase.ExecuteNonQuery("ZFP_DEL_FUNCTION", myParameters)
		End Sub

		Private Function GetAllGroups() As DataTable
			checkValid()
			Dim mParameters() As SqlParameter =
			{
			   New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID),
			   New SqlParameter("@P_FUNCTION_SEQ_ID", -1),
			   New SqlParameter("@P_PERMISSIONS_SEQ_ID", -1),
			   MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			}
			Return MyBase.GetDataTable("ZFP_GET_FUNCTION_GRPS", mParameters)
		End Function

		Private Function GetGroups(ByVal permission As PermissionTypes) As System.Data.DataTable
			checkValid()
			Dim myParameters() As SqlParameter = _
			{ _
			  New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID), _
			  New SqlParameter("@P_FUNCTION_SEQ_ID", Profile.Id), _
			  New SqlParameter("@P_PERMISSIONS_SEQ_ID", permission), _
			  MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) _
			}
			Return MyBase.GetDataTable("ZFP_GET_FUNCTION_GRPS", myParameters)
		End Function

		Private Function GetAllRoles() As DataTable
			checkValid()
			Dim mParameters() As SqlParameter =
			{
			   New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID),
			   New SqlParameter("@P_FUNCTION_SEQ_ID", -1),
			   New SqlParameter("@P_PERMISSIONS_SEQ_ID", -1),
			   MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			}
			Return MyBase.GetDataTable("ZFP_GET_FUNCTION_RLS", mParameters)
		End Function

		Private Function GetRoles(ByVal permission As PermissionTypes) As System.Data.DataTable
			checkValid()
			Dim myParameter As SqlParameter = Nothing
			Dim myParameters() As SqlParameter = _
			{ _
			  New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID), _
			  New SqlParameter("@P_FUNCTION_SEQ_ID", Profile.Id), _
			  New SqlParameter("@P_PERMISSIONS_SEQ_ID", permission), _
			  MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output) _
			}
			Return MyBase.GetDataTable("ZFP_GET_FUNCTION_RLS", myParameters)
		End Function

		Public Function GetSecurity() As System.Data.DataTable
			Dim myStoreProcedure As String = "ZFP_GET_FUNCTIONS_SECURITY"
			Dim myParameters() As SqlParameter =
			{
			 New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID),
			 MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			}
			Return MyBase.GetDataTable(myStoreProcedure, myParameters)
		End Function

		Public Function Save() As Integer Implements IDFunction.Save
			checkValid()
			Dim mRetInt As Integer
			Dim mParameters() As SqlParameter =
			 {
			  New SqlParameter("@P_FUNCTION_SEQ_ID", m_Profile.Id),
			  New SqlParameter("@P_NAME", m_Profile.Name),
			  New SqlParameter("@P_DESCRIPTION", m_Profile.Description),
			  New SqlParameter("@P_FUNCTION_TYPE_SEQ_ID", m_Profile.FunctionTypeSeqID),
			  New SqlParameter("@P_SOURCE", m_Profile.Source),
			  New SqlParameter("@P_ENABLE_VIEW_STATE", m_Profile.EnableViewState),
			  New SqlParameter("@P_ENABLE_NOTIFICATIONS", m_Profile.EnableNotifications),
			  New SqlParameter("@P_REDIRECT_ON_TIMEOUT", m_Profile.RedirectOnTimeout),
			  New SqlParameter("@P_IS_NAV", m_Profile.IsNav),
			  New SqlParameter("@P_NO_UI", m_Profile.No_UI),
			  New SqlParameter("@P_NAV_TYPE_ID", m_Profile.NavigationTypeSeqId),
			  New SqlParameter("@P_ACTION", m_Profile.Action),
			  New SqlParameter("@P_META_KEY_WORDS", m_Profile.MetaKeyWords),
			  New SqlParameter("@P_PARENT_FUNCTION_SEQ_ID", m_Profile.ParentID),
			  New SqlParameter("@P_NOTES", m_Profile.Notes),
			  New SqlParameter("@P_ADDED_UPDATED_BY", m_Profile.UpdatedBy),
			  New SqlParameter("@P_ADDED_UPDATED_DATE", m_Profile.UpdatedDate),
			  MyBase.GetSqlParameter("@P_PRIMARY_KEY", "", ParameterDirection.Output),
			  MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			 }
			MyBase.ExecuteNonQuery("ZFP_SET_FUNCTION", mParameters)
			mRetInt = Integer.Parse(MyBase.GetParameterValue("@P_PRIMARY_KEY", mParameters))
			Return mRetInt
		End Function

		Public Sub SaveGroups(ByVal permission As PermissionTypes) Implements IDFunction.SaveGroups
			checkValid()
			Dim mCommaSeporatedString As String = Profile.GetCommaSeporatedGroups(permission)
			Dim mParameters() As SqlParameter =
			 {
			  New SqlParameter("@P_FUNCTION_SEQ_ID", Profile.Id),
			  New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID),
			  New SqlParameter("@P_GROUPS", mCommaSeporatedString),
			  New SqlParameter("@P_PERMISSIONS_SEQ_ID", permission),
			  New SqlParameter("@P_ADDUPD_BY", MyBase.GetAddedUpdatedBy(Profile)),
			  MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			 }
			MyBase.ExecuteNonQuery("ZFP_SET_FUNCTION_GRPS", mParameters)
		End Sub

		Public Sub SaveRoles(ByVal permission As PermissionTypes) Implements IDFunction.SaveRoles
			checkValid()
			Dim mCommaSeporatedString As String = Profile.GetCommaSeporatedGroups(permission)
			Dim mParameters() As SqlParameter =
			 {
			  New SqlParameter("@P_FUNCTION_SEQ_ID", Profile.Id),
			  New SqlParameter("@P_SE_SEQ_ID", SecurityEntitySeqID),
			  New SqlParameter("@P_ROLES", mCommaSeporatedString),
			  New SqlParameter("@P_PERMISSIONS_SEQ_ID", permission),
			  New SqlParameter("@P_ADDUPD_BY", MyBase.GetAddedUpdatedBy(Profile)),
			  MyBase.GetSqlParameter("@P_ErrorCode", "", ParameterDirection.Output)
			 }
			MyBase.ExecuteNonQuery("ZFP_SET_FUNCTION_GRPS", mParameters)
		End Sub
#End Region

#Region "Private Methods"
		Private Sub checkValid()
			MyBase.IsValid()
			If Profile Is Nothing Then
				Throw New ArgumentException("Profile property must be set before calling methods from this class")
			End If
			If SecurityEntitySeqID = 0 Then
				Throw New ArgumentException("SE_SEQ_ID property must be set before calling methods from this class")
			End If
		End Sub
#End Region
	End Class
End Namespace
