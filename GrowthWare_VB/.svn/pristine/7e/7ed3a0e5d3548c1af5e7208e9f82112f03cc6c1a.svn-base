Imports System.IO
Imports System.Threading
Imports System.Web
Imports GrowthWare.Framework.Common
Imports GrowthWare.Framework.Model.Profiles
Imports log4net

Namespace Utilities
	Public NotInheritable Class LogUtility
		Implements IDisposable

		Const FILE_NAME_FORMAT As String = "yyyy_MM_dd"

		Private m_DisposedValue As Boolean = False		' To detect redundant calls
		Private Shared m_LogUtility As LogUtility
		Private Shared m_Mutex As New Mutex
		Private Shared m_Layout As New log4net.Layout.PatternLayout
		Private Shared m_LogFileName As String = DateTime.Now.ToString(FILE_NAME_FORMAT) & ".txt"
		Private Shared m_LogFilePath As String = ConfigSettings.LogPath
		Private Shared m_LogFile As String = m_LogFilePath & m_LogFileName
		Private Shared m_StackTrace As StackTrace = New StackTrace
		Private Shared m_CurrentLogLevel As Integer
		Private Shared m_SCurrentLogLevel As String = String.Empty

		''' <summary>
		''' Inticates the current logging level.
		''' </summary>
		''' <value>integer</value>
		''' <returns>integer</returns>
		''' <remarks></remarks>
		Public ReadOnly Property CurrentLogLevel() As Integer
			Get
				Return m_CurrentLogLevel
			End Get
		End Property

		Private Sub New()
			init()
		End Sub

		'*********************************************************************
		'
		' Sub init performs all of the first time intialization for the LogUtility
		'
		'*********************************************************************
		Private Sub init()
			m_Layout.ConversionPattern = ConfigSettings.ConversionPattern
			Select Case ConfigSettings.LogPriority.ToLower
				Case "debug"
					m_CurrentLogLevel = 0
					m_SCurrentLogLevel = "DEBUG"
				Case "info"
					m_CurrentLogLevel = 1
					m_SCurrentLogLevel = "INFO"
				Case "warn"
					m_CurrentLogLevel = 2
					m_SCurrentLogLevel = "WARN"
				Case "error"
					m_CurrentLogLevel = 3
					m_SCurrentLogLevel = "ERROR"
				Case "fatal"
					m_CurrentLogLevel = 4
					m_SCurrentLogLevel = "FATAL"
				Case Else
					m_CurrentLogLevel = 3
					m_SCurrentLogLevel = "ERROR"
			End Select
			DeleteOldLogs()
		End Sub	'init

		Private Function GetAppender() As log4net.Appender.FileAppender
			Dim retAppender As log4net.Appender.FileAppender = Nothing
			Try
				retAppender = New log4net.Appender.FileAppender(m_Layout, m_LogFile, True)
			Catch ex As Exception
				m_LogFilePath = HttpContext.Current.Server.MapPath("~\Logs\")
				m_LogFile = m_LogFilePath & m_LogFileName
				Try
					Dim DirectoryProfile As New MDirectoryProfile
					FileUtility.CreateDirectory(HttpContext.Current.Server.MapPath("~\"), "Logs", DirectoryProfile)
					m_LogFile = m_LogFilePath & m_LogFileName
				Catch ex2 As Exception
					Throw ex2
				End Try
				retAppender = New log4net.Appender.FileAppender(m_Layout, m_LogFile, True)
			End Try
			'retAppender.AppendToFile = ConfigSettings.AppendToFile
			retAppender.Name = m_StackTrace.GetFrame(1).GetMethod.ReflectedType.Name
			'retAppender.Name = "LogUtility"
			retAppender.Threshold = ConvertPriorityTextToPriority(m_SCurrentLogLevel)
			retAppender.ImmediateFlush = True
			log4net.Config.BasicConfigurator.Configure(retAppender)
			retAppender.ActivateOptions()
			Return retAppender
		End Function

		Private Sub DeleteOldLogs()
			Dim mCounter As Integer
			Dim mPosSep As Integer
			Dim mAFiles() As String
			Dim mFile As String
			Dim mLogRetention As Integer = 0
			mLogRetention = Integer.Parse(ConfigSettings.LogRetention)
			If mLogRetention > 0 Then
				mLogRetention = mLogRetention * -1
				Dim mRetentionDate As Date = Date.Now.AddDays(mLogRetention)
				If System.IO.Directory.Exists(m_LogFilePath) Then
					mAFiles = System.IO.Directory.GetFiles(m_LogFilePath)
					For mCounter = 0 To mAFiles.GetUpperBound(0)
						' Get the position of the trailing separator.
						mPosSep = mAFiles(mCounter).LastIndexOf("\")
						mFile = mAFiles(mCounter).Substring((mPosSep + 1), mAFiles(mCounter).Length - (mPosSep + 1))
						mFile = m_LogFilePath & mFile
						If File.GetCreationTime(mFile) < mRetentionDate Then
							Try
								File.Delete(mFile)
							Catch ex As Exception
								' could not delete don't worrie about it.
							End Try
						End If
					Next mCounter
				End If
			End If
		End Sub

		Public Shared Function GetInstance() As LogUtility
			Try
				m_Mutex.WaitOne()
				If m_LogUtility Is Nothing Then
					m_LogUtility = New LogUtility
				End If
			Catch ex As Exception
				Throw ex
			Finally
				m_Mutex.ReleaseMutex()
				m_StackTrace = New StackTrace
				m_LogFile = m_LogFilePath & m_LogFileName
			End Try
			Return m_LogUtility
		End Function	'GetInstance

		' SetThreshold allows a developer to set the 
		' logging priority during runtime
		Public Sub SetThreshold(ByVal threshold As log4net.Priority)
			If Not threshold Is Nothing Then
				If threshold.Equals(log4net.Priority.DEBUG) Then
					m_SCurrentLogLevel = "DEBUG"
					m_CurrentLogLevel = 0
				ElseIf threshold.Equals(log4net.Priority.INFO) Then
					m_SCurrentLogLevel = "INFO"
					m_CurrentLogLevel = 1
				ElseIf threshold.Equals(log4net.Priority.WARN) Then
					m_SCurrentLogLevel = "WARN"
					m_CurrentLogLevel = 2
				ElseIf threshold.Equals(log4net.Priority.ERROR) Then
					m_SCurrentLogLevel = "ERROR"
					m_CurrentLogLevel = 3
				ElseIf threshold.Equals(log4net.Priority.FATAL) Then
					m_SCurrentLogLevel = "FATAL"
					m_CurrentLogLevel = 4
				End If
			End If
		End Sub

		Public Sub Debug(ByVal message As Object)
			Dim myAppender As log4net.Appender.FileAppender = GetAppender()
			Dim log As ILog = LogManager.GetLogger(myAppender.Name)
			log.Debug(message)
			myAppender.Close()
		End Sub

		Public Sub Info(ByVal message As Object)
			Dim myAppender As log4net.Appender.FileAppender = GetAppender()
			Dim log As ILog = LogManager.GetLogger(myAppender.Name)
			log.Info(message)
			myAppender.Close()
		End Sub

		Public Sub Warn(ByVal message As Object)
			Dim myAppender As log4net.Appender.FileAppender = GetAppender()
			Dim log As ILog = LogManager.GetLogger(myAppender.Name)
			log.Warn(message)
			myAppender.Close()
		End Sub

		Public Sub [Error](ByVal message As Object)
			Dim myAppender As log4net.Appender.FileAppender = GetAppender()
			Dim log As ILog = LogManager.GetLogger(myAppender.Name)
			log.Error(message)
			myAppender.Close()
		End Sub

		Public Sub Fatal(ByVal message As Object)
			Dim myAppender As log4net.Appender.FileAppender = GetAppender()
			Dim log As ILog = LogManager.GetLogger(myAppender.Name)
			log.Error(message)
			myAppender.Close()
		End Sub

		''' <summary>
		''' The convertPriorityTextToPriority method returns the log4net priority given a text value
		''' </summary>
		''' <param name="priority">String value for the desired priority.  Valid values are Debug, Info, Warn, Error, and Fatal any other will return Error</param>
		''' <returns>Returns a Log4Net Priority object.</returns>
		''' <remarks></remarks>
		Public Function ConvertPriorityTextToPriority(ByVal priority As String) As log4net.Priority
			Dim retPriority As log4net.Priority
			Select Case priority.ToUpper
				Case "DEBUG"
					retPriority = log4net.Priority.DEBUG
				Case "INFO"
					retPriority = log4net.Priority.INFO
				Case "WARN"
					retPriority = log4net.Priority.WARN
				Case "ERROR"
					retPriority = log4net.Priority.ERROR
				Case "FATAL"
					retPriority = log4net.Priority.FATAL
				Case Else
					retPriority = log4net.Priority.ERROR
			End Select
			Return retPriority
		End Function

		' IDisposable
		Public Sub Dispose(ByVal disposing As Boolean)
			If Not Me.m_DisposedValue Then
				If disposing Then
					' nothing to do at the moment
				End If
				' TODO: free shared unmanaged resources
			End If
			Me.m_DisposedValue = True
		End Sub

#Region " IDisposable Support "
		' This code added by Visual Basic to correctly implement the disposable pattern.
		Public Sub Dispose() Implements IDisposable.Dispose
			' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
			Dispose(True)
			GC.SuppressFinalize(Me)
		End Sub
#End Region


	End Class
End Namespace