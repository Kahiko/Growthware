Imports GrowthWare.Framework.Model.Profiles
Imports GrowthWare.Framework.Web.Utilities
Imports System.Web
Imports System.Web.SessionState
Imports System.Globalization

Namespace Context
	''' <summary>
	''' HttpContext entry point
	''' </summary>
	''' <remarks>Will initiate the ClientChoicesHttpModule</remarks>
	Public Class HttpContextModule
		Implements IHttpModule, IRequiresSessionState

		Private m_DisposedValue As Boolean ' To detect redundant calls


		''' <summary>
		''' Implements IDispose
		''' </summary>
		''' <param name="disposing">Boolean</param>
		''' <remarks></remarks>
		Protected Overridable Sub Dispose(ByVal disposing As Boolean)
			If Not Me.m_DisposedValue Then
				If disposing Then
					' TODO: dispose managed state (managed objects).
				End If

				' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
				' TODO: set large fields to null.
			End If
			Me.m_DisposedValue = True
		End Sub

		' TODO: override Finalize() only if Dispose(ByVal disposing As Boolean) above has code to free unmanaged resources.
		Protected Overrides Sub Finalize()
			' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
			Dispose(False)
			MyBase.Finalize()
		End Sub

		' This code added by Visual Basic to correctly implement the disposable pattern.

		''' <summary>
		''' Implements Dispose
		''' </summary>
		''' <remarks></remarks>
		<System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1816:CallGCSuppressFinalizeCorrectly")>
		Public Sub Dispose() Implements IHttpModule.Dispose
			' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
			Dispose(True)
			GC.SuppressFinalize(Me)
		End Sub

		''' <summary>
		''' Initializes the HTTP module
		''' </summary>
		''' <param name="context">as HttpApplication</param>
		''' <remarks>
		''' Servers as a wrapper to the ClientChoicesHttpModule as well as 
		''' placing the current function, security profiles into the context.
		''' </remarks>
		Public Sub Init(ByVal context As System.Web.HttpApplication) Implements System.Web.IHttpModule.Init
			If Not context Is Nothing Then
				'Dim mInitClientChoices As New ClientChoicesHttpModule()
				'mInitClientChoices.Init(context)
				AddHandler context.Context.ApplicationInstance.Error, AddressOf Me.applicationError
				'AddHandler context.BeginRequest, AddressOf Me.beginRequest
				AddHandler context.AcquireRequestState, AddressOf Me.acquireRequestState
			End If
		End Sub

		Private Sub applicationError(ByVal sender As Object, ByVal e As EventArgs)
			Dim mEx As Exception = HttpContext.Current.Server.GetLastError
			Dim mLog As LogUtility = LogUtility.GetInstance()
			mLog.Error(mEx)
			Select Case mEx.Message
				Case "Cannot redirect after HTTP headers have been sent"
					Exit Sub
				Case "Session state has created a session id, but cannot save it because the response was already flushed by the application."
					Exit Sub
			End Select
			'WebHelper.ExceptionError = mEx
			'If mEx.Message.ToUpper.StartsWith("CANNOT OPEN DATABASE") Then
			'	mLog.Error(mEx)
			'	WebHelper.ExceptionError = mEx
			'	HttpContext.Current.Server.ClearError()
			'	Dim config As Configuration = WebConfigurationManager.OpenWebConfiguration("~")
			'	Dim appSettingsSection As AppSettingsSection = TryCast(config.GetSection("appSettings"), AppSettingsSection)
			'	WebHelper.SetEnvironmentValue(config, False, "DB_Status", "OffLine", False)
			'	HttpContext.Current.Response.Redirect("~/Public/Pages/UnderConstruction.aspx")
			'Else
			'	HttpContext.Current.Server.ClearError()
			'	NavControler.NavTo(mEx)
			'End If
		End Sub

		Private Sub acquireRequestState(ByVal sender As Object, ByVal e As EventArgs)
			If HttpContext.Current.Request.Path.ToUpper(New CultureInfo("en-US", False)).IndexOf(".ASPX", StringComparison.Ordinal) > -1 Then
				If Not HttpContext.Current.Request.QueryString("Action") Is Nothing Then
					' process security
					Dim mAccountUtilty As AccountUtility = New AccountUtility()
					Dim mAccountProfile As MAccountProfile = mAccountUtilty.GetCurrentProfile
					HttpContext.Current.Items.Add("CurrentAccount", mAccountProfile)
				Else
					' check requesting page ... if it's the same as the defautpage then
					' redirect using either the defaultaction or defaultauthenticatedaction
				End If
			End If
		End Sub

	End Class
End Namespace
