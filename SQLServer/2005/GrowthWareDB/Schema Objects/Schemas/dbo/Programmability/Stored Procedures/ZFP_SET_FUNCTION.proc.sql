CREATE PROCEDURE [ZFP_SET_FUNCTION]
	@P_FUNCTION_SEQ_ID int,
	@P_NAME VARCHAR(30),
	@P_DESCRIPTION VARCHAR(512),
	@P_FUNCTION_TYPE_SEQ_ID INT,
	@P_SOURCE VARCHAR(512),
	@P_ENABLE_VIEW_STATE int,
	@P_ENABLE_NOTIFICATIONS int,
	@P_REDIRECT_ON_TIMEOUT int,
	@P_IS_NAV int,
	@P_NO_UI int,
	@P_NAV_TYPE_ID int,
	@P_ACTION VARCHAR(256),
	@P_META_KEY_WORDS VARCHAR(512),
	@P_PARENT_FUNCTION_SEQ_ID int,
	@P_NOTES VARCHAR(512),
	@P_ADDED_UPDATED_BY INT,
	@P_ADDED_UPDATED_DATE DATETIME,
	@P_PRIMARY_KEY INT OUTPUT,
	@P_ErrorCode int OUTPUT
AS
	IF @P_FUNCTION_SEQ_ID > -1
		BEGIN -- UPDATE PROFILE
			UPDATE ZFC_FUNCTIONS
			SET 
				[NAME] = @P_NAME,
				[DESCRIPTION] = @P_DESCRIPTION,
				FUNCTION_TYPE_SEQ_ID = @P_FUNCTION_TYPE_SEQ_ID,
				[SOURCE] = @P_SOURCE,
				ENABLE_VIEW_STATE = @P_ENABLE_VIEW_STATE,
				ENABLE_NOTIFICATIONS = @P_ENABLE_NOTIFICATIONS,
				REDIRECT_ON_TIMEOUT = @P_REDIRECT_ON_TIMEOUT,
				IS_NAV = @P_IS_NAV,
				NO_UI = @P_NO_UI,
				NAVIGATION_NVP_SEQ_DET_ID = @P_NAV_TYPE_ID,
				META_KEY_WORDS = @P_META_KEY_WORDS,
				--[ACTION] = @P_ACTION,
				PARENT_FUNCTION_SEQ_ID = @P_PARENT_FUNCTION_SEQ_ID,
				NOTES = @P_NOTES,
				UPDATED_BY = @P_ADDED_UPDATED_BY,
				UPDATED_DATE = @P_ADDED_UPDATED_DATE
			WHERE
				FUNCTION_SEQ_ID = @P_FUNCTION_SEQ_ID

			SELECT @P_PRIMARY_KEY = @P_FUNCTION_SEQ_ID
		END
	ELSE
	BEGIN -- INSERT a new row in the table.

			-- CHECK FOR DUPLICATE NAME BEFORE INSERTING
			IF EXISTS( SELECT [ACTION]
				   FROM ZFC_FUNCTIONS
				   WHERE [ACTION] = @P_ACTION
			)
			BEGIN
				RAISERROR ('THE FUNCTION YOU ENTERED ALREADY EXISTS IN THE DATABASE.',16,1)
				RETURN
			END
			INSERT ZFC_FUNCTIONS
			(
				[NAME],
				[DESCRIPTION],
				FUNCTION_TYPE_SEQ_ID,
				SOURCE,
				ENABLE_VIEW_STATE,
				ENABLE_NOTIFICATIONS,
				REDIRECT_ON_TIMEOUT,
				IS_NAV,
				NO_UI,
				NAVIGATION_NVP_SEQ_DET_ID,
				META_KEY_WORDS,
				[ACTION],
				PARENT_FUNCTION_SEQ_ID,
				NOTES,
				ADDED_BY,
				ADDED_DATE,
				UPDATED_BY,
				UPDATED_DATE
			)
			VALUES
			(
				@P_NAME,
				@P_DESCRIPTION,
				@P_FUNCTION_TYPE_SEQ_ID,
				@P_SOURCE,
				@P_ENABLE_VIEW_STATE,
				@P_ENABLE_NOTIFICATIONS,
				@P_REDIRECT_ON_TIMEOUT,
				@P_IS_NAV,
				@P_NO_UI,
				@P_NAV_TYPE_ID,
				@P_META_KEY_WORDS,
				@P_ACTION,
				@P_PARENT_FUNCTION_SEQ_ID,
				@P_NOTES,
				@P_ADDED_UPDATED_BY,
				@P_ADDED_UPDATED_DATE,
				@P_ADDED_UPDATED_BY,
				@P_ADDED_UPDATED_DATE
			)
			SELECT @P_PRIMARY_KEY=SCOPE_IDENTITY() -- Get the IDENTITY value for the row just inserted.
			DECLARE @V_SORT_ORDER INT
			SET @V_SORT_ORDER = (SELECT MAX(SORT_ORDER) FROM ZFC_FUNCTIONS WHERE PARENT_FUNCTION_SEQ_ID = @P_PARENT_FUNCTION_SEQ_ID) + 1
			UPDATE ZFC_FUNCTIONS SET SORT_ORDER = @V_SORT_ORDER WHERE FUNCTION_SEQ_ID = @P_PRIMARY_KEY

		END
-- Get the Error Code for the statement just executed.
SELECT @P_ErrorCode=@@ERROR
