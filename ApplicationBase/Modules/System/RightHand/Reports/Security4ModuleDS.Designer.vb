'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Security4ModuleDS"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Security4ModuleDS
    Inherits System.Data.DataSet
    
    Private tableZBP_GET_SECURITY_4_MODULES As ZBP_GET_SECURITY_4_MODULESDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ZBP_GET_SECURITY_4_MODULES")) Is Nothing) Then
                MyBase.Tables.Add(New ZBP_GET_SECURITY_4_MODULESDataTable(ds.Tables("ZBP_GET_SECURITY_4_MODULES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZBP_GET_SECURITY_4_MODULES() As ZBP_GET_SECURITY_4_MODULESDataTable
        Get
            Return Me.tableZBP_GET_SECURITY_4_MODULES
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Security4ModuleDS = CType(MyBase.Clone,Security4ModuleDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ZBP_GET_SECURITY_4_MODULES")) Is Nothing) Then
                MyBase.Tables.Add(New ZBP_GET_SECURITY_4_MODULESDataTable(ds.Tables("ZBP_GET_SECURITY_4_MODULES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableZBP_GET_SECURITY_4_MODULES = CType(MyBase.Tables("ZBP_GET_SECURITY_4_MODULES"),ZBP_GET_SECURITY_4_MODULESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZBP_GET_SECURITY_4_MODULES) Is Nothing) Then
                Me.tableZBP_GET_SECURITY_4_MODULES.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Security4ModuleDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Security4ModuleDS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableZBP_GET_SECURITY_4_MODULES = New ZBP_GET_SECURITY_4_MODULESDataTable
        MyBase.Tables.Add(Me.tableZBP_GET_SECURITY_4_MODULES)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeZBP_GET_SECURITY_4_MODULES() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Security4ModuleDS = New Security4ModuleDS
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler(ByVal sender As Object, ByVal e As ZBP_GET_SECURITY_4_MODULESRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZBP_GET_SECURITY_4_MODULESDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnENVIRONMENT As System.Data.DataColumn
        
        Private columnNAME As System.Data.DataColumn
        
        Private columnModule As System.Data.DataColumn
        
        Private columnPermission As System.Data.DataColumn
        
        Private columnRole As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZBP_GET_SECURITY_4_MODULES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENVIRONMENTColumn() As System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModuleColumn() As System.Data.DataColumn
            Get
                Return Me.columnModule
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPermission
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoleColumn() As System.Data.DataColumn
            Get
                Return Me.columnRole
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZBP_GET_SECURITY_4_MODULESRow
            Get
                Return CType(Me.Rows(index),ZBP_GET_SECURITY_4_MODULESRow)
            End Get
        End Property
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowChanging As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowChanged As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowDeleting As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowDeleted As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddZBP_GET_SECURITY_4_MODULESRow(ByVal row As ZBP_GET_SECURITY_4_MODULESRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddZBP_GET_SECURITY_4_MODULESRow(ByVal ENVIRONMENT As String, ByVal NAME As String, ByVal _Module As String, ByVal Permission As String, ByVal Role As String) As ZBP_GET_SECURITY_4_MODULESRow
            Dim rowZBP_GET_SECURITY_4_MODULESRow As ZBP_GET_SECURITY_4_MODULESRow = CType(Me.NewRow,ZBP_GET_SECURITY_4_MODULESRow)
            rowZBP_GET_SECURITY_4_MODULESRow.ItemArray = New Object() {ENVIRONMENT, NAME, _Module, Permission, Role}
            Me.Rows.Add(rowZBP_GET_SECURITY_4_MODULESRow)
            Return rowZBP_GET_SECURITY_4_MODULESRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ZBP_GET_SECURITY_4_MODULESDataTable = CType(MyBase.Clone,ZBP_GET_SECURITY_4_MODULESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ZBP_GET_SECURITY_4_MODULESDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnENVIRONMENT = MyBase.Columns("ENVIRONMENT")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnModule = MyBase.Columns("Module")
            Me.columnPermission = MyBase.Columns("Permission")
            Me.columnRole = MyBase.Columns("Role")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnENVIRONMENT = New System.Data.DataColumn("ENVIRONMENT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENT)
            Me.columnNAME = New System.Data.DataColumn("NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnModule = New System.Data.DataColumn("Module", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnModule.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Module")
            Me.columnModule.ExtendedProperties.Add("Generator_UserColumnName", "Module")
            MyBase.Columns.Add(Me.columnModule)
            Me.columnPermission = New System.Data.DataColumn("Permission", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermission)
            Me.columnRole = New System.Data.DataColumn("Role", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRole)
            Me.columnENVIRONMENT.ReadOnly = true
            Me.columnENVIRONMENT.MaxLength = 50
            Me.columnNAME.AllowDBNull = false
            Me.columnNAME.MaxLength = 50
            Me.columnModule.AllowDBNull = false
            Me.columnModule.MaxLength = 255
            Me.columnPermission.AllowDBNull = false
            Me.columnPermission.MaxLength = 20
            Me.columnRole.AllowDBNull = false
            Me.columnRole.MaxLength = 25
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewZBP_GET_SECURITY_4_MODULESRow() As ZBP_GET_SECURITY_4_MODULESRow
            Return CType(Me.NewRow,ZBP_GET_SECURITY_4_MODULESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ZBP_GET_SECURITY_4_MODULESRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ZBP_GET_SECURITY_4_MODULESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowChangedEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowChanged(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowChangingEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowChanging(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowDeleted(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowDeleting(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveZBP_GET_SECURITY_4_MODULESRow(ByVal row As ZBP_GET_SECURITY_4_MODULESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Security4ModuleDS = New Security4ModuleDS
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZBP_GET_SECURITY_4_MODULESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ZBP_GET_SECURITY_4_MODULESRow
        Inherits System.Data.DataRow
        
        Private tableZBP_GET_SECURITY_4_MODULES As ZBP_GET_SECURITY_4_MODULESDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZBP_GET_SECURITY_4_MODULES = CType(Me.Table,ZBP_GET_SECURITY_4_MODULESDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENVIRONMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.ENVIRONMENTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ENVIRONMENT' in table 'ZBP_GET_SECURITY_4_MODULES' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.ENVIRONMENTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.NAMEColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Module() As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.ModuleColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.ModuleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Permission() As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.PermissionColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.PermissionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Role() As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.RoleColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.RoleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENVIRONMENTNull() As Boolean
            Return Me.IsNull(Me.tableZBP_GET_SECURITY_4_MODULES.ENVIRONMENTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENVIRONMENTNull()
            Me(Me.tableZBP_GET_SECURITY_4_MODULES.ENVIRONMENTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ZBP_GET_SECURITY_4_MODULESRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ZBP_GET_SECURITY_4_MODULESRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ZBP_GET_SECURITY_4_MODULESRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ZBP_GET_SECURITY_4_MODULESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Security4ModuleDSTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZBP_GET_SECURITY_4_MODULESTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZBP_GET_SECURITY_4_MODULES"
            tableMapping.ColumnMappings.Add("ENVIRONMENT", "ENVIRONMENT")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("Module", "Module")
            tableMapping.ColumnMappings.Add("Permission", "Permission")
            tableMapping.ColumnMappings.Add("Role", "Role")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("ApplicationBaseConnectionString").ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.ZBP_GET_SECURITY_4_MODULES"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@P_BUSINESS_UNIT_SEQ_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, Nothing, System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@P_ENVIRONMENT", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Security4ModuleDS.ZBP_GET_SECURITY_4_MODULESDataTable, ByVal P_BUSINESS_UNIT_SEQ_ID As System.Nullable(Of Integer), ByVal P_ENVIRONMENT As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (P_BUSINESS_UNIT_SEQ_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(P_BUSINESS_UNIT_SEQ_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (P_ENVIRONMENT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(P_ENVIRONMENT,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal P_BUSINESS_UNIT_SEQ_ID As System.Nullable(Of Integer), ByVal P_ENVIRONMENT As String) As Security4ModuleDS.ZBP_GET_SECURITY_4_MODULESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (P_BUSINESS_UNIT_SEQ_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(P_BUSINESS_UNIT_SEQ_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (P_ENVIRONMENT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(P_ENVIRONMENT,String)
            End If
            Dim dataTable As Security4ModuleDS.ZBP_GET_SECURITY_4_MODULESDataTable = New Security4ModuleDS.ZBP_GET_SECURITY_4_MODULESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
