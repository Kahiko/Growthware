'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Security4ModuleDS
    Inherits DataSet
    
    Private tableZBP_GET_SECURITY_4_MODULES As ZBP_GET_SECURITY_4_MODULESDataTable
    
    Private tableTable1 As Table1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ZBP_GET_SECURITY_4_MODULES")) Is Nothing) Then
                Me.Tables.Add(New ZBP_GET_SECURITY_4_MODULESDataTable(ds.Tables("ZBP_GET_SECURITY_4_MODULES")))
            End If
            If (Not (ds.Tables("Table1")) Is Nothing) Then
                Me.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZBP_GET_SECURITY_4_MODULES As ZBP_GET_SECURITY_4_MODULESDataTable
        Get
            Return Me.tableZBP_GET_SECURITY_4_MODULES
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table1 As Table1DataTable
        Get
            Return Me.tableTable1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Security4ModuleDS = CType(MyBase.Clone,Security4ModuleDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ZBP_GET_SECURITY_4_MODULES")) Is Nothing) Then
            Me.Tables.Add(New ZBP_GET_SECURITY_4_MODULESDataTable(ds.Tables("ZBP_GET_SECURITY_4_MODULES")))
        End If
        If (Not (ds.Tables("Table1")) Is Nothing) Then
            Me.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableZBP_GET_SECURITY_4_MODULES = CType(Me.Tables("ZBP_GET_SECURITY_4_MODULES"),ZBP_GET_SECURITY_4_MODULESDataTable)
        If (Not (Me.tableZBP_GET_SECURITY_4_MODULES) Is Nothing) Then
            Me.tableZBP_GET_SECURITY_4_MODULES.InitVars
        End If
        Me.tableTable1 = CType(Me.Tables("Table1"),Table1DataTable)
        If (Not (Me.tableTable1) Is Nothing) Then
            Me.tableTable1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Security4ModuleDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SecurityByBUByRoleByAccountDS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableZBP_GET_SECURITY_4_MODULES = New ZBP_GET_SECURITY_4_MODULESDataTable
        Me.Tables.Add(Me.tableZBP_GET_SECURITY_4_MODULES)
        Me.tableTable1 = New Table1DataTable
        Me.Tables.Add(Me.tableTable1)
    End Sub
    
    Private Function ShouldSerializeZBP_GET_SECURITY_4_MODULES() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTable1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler(ByVal sender As Object, ByVal e As ZBP_GET_SECURITY_4_MODULESRowChangeEvent)
    
    Public Delegate Sub Table1RowChangeEventHandler(ByVal sender As Object, ByVal e As Table1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ZBP_GET_SECURITY_4_MODULESDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNAME As DataColumn
        
        Private column_Module As DataColumn
        
        Private columnPermission As DataColumn
        
        Private columnRole As DataColumn
        
        Friend Sub New()
            MyBase.New("ZBP_GET_SECURITY_4_MODULES")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property _ModuleColumn As DataColumn
            Get
                Return Me.column_Module
            End Get
        End Property
        
        Friend ReadOnly Property PermissionColumn As DataColumn
            Get
                Return Me.columnPermission
            End Get
        End Property
        
        Friend ReadOnly Property RoleColumn As DataColumn
            Get
                Return Me.columnRole
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZBP_GET_SECURITY_4_MODULESRow
            Get
                Return CType(Me.Rows(index),ZBP_GET_SECURITY_4_MODULESRow)
            End Get
        End Property
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowChanged As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowChanging As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowDeleted As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Event ZBP_GET_SECURITY_4_MODULESRowDeleting As ZBP_GET_SECURITY_4_MODULESRowChangeEventHandler
        
        Public Overloads Sub AddZBP_GET_SECURITY_4_MODULESRow(ByVal row As ZBP_GET_SECURITY_4_MODULESRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddZBP_GET_SECURITY_4_MODULESRow(ByVal NAME As String, ByVal _Module As String, ByVal Permission As String, ByVal Role As String) As ZBP_GET_SECURITY_4_MODULESRow
            Dim rowZBP_GET_SECURITY_4_MODULESRow As ZBP_GET_SECURITY_4_MODULESRow = CType(Me.NewRow,ZBP_GET_SECURITY_4_MODULESRow)
            rowZBP_GET_SECURITY_4_MODULESRow.ItemArray = New Object() {NAME, _Module, Permission, Role}
            Me.Rows.Add(rowZBP_GET_SECURITY_4_MODULESRow)
            Return rowZBP_GET_SECURITY_4_MODULESRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ZBP_GET_SECURITY_4_MODULESDataTable = CType(MyBase.Clone,ZBP_GET_SECURITY_4_MODULESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ZBP_GET_SECURITY_4_MODULESDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNAME = Me.Columns("NAME")
            Me.column_Module = Me.Columns("Module")
            Me.columnPermission = Me.Columns("Permission")
            Me.columnRole = Me.Columns("Role")
        End Sub
        
        Private Sub InitClass()
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.column_Module = New DataColumn("Module", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Module)
            Me.columnPermission = New DataColumn("Permission", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermission)
            Me.columnRole = New DataColumn("Role", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRole)
            Me.columnNAME.AllowDBNull = false
            Me.column_Module.AllowDBNull = false
            Me.columnPermission.AllowDBNull = false
            Me.columnRole.AllowDBNull = false
        End Sub
        
        Public Function NewZBP_GET_SECURITY_4_MODULESRow() As ZBP_GET_SECURITY_4_MODULESRow
            Return CType(Me.NewRow,ZBP_GET_SECURITY_4_MODULESRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ZBP_GET_SECURITY_4_MODULESRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ZBP_GET_SECURITY_4_MODULESRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowChangedEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowChanged(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowChangingEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowChanging(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowDeleted(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZBP_GET_SECURITY_4_MODULESRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZBP_GET_SECURITY_4_MODULESRowDeleting(Me, New ZBP_GET_SECURITY_4_MODULESRowChangeEvent(CType(e.Row,ZBP_GET_SECURITY_4_MODULESRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveZBP_GET_SECURITY_4_MODULESRow(ByVal row As ZBP_GET_SECURITY_4_MODULESRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ZBP_GET_SECURITY_4_MODULESRow
        Inherits DataRow
        
        Private tableZBP_GET_SECURITY_4_MODULES As ZBP_GET_SECURITY_4_MODULESDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableZBP_GET_SECURITY_4_MODULES = CType(Me.Table,ZBP_GET_SECURITY_4_MODULESDataTable)
        End Sub
        
        Public Property NAME As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.NAMEColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.NAMEColumn) = value
            End Set
        End Property
        
        Public Property _Module As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES._ModuleColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES._ModuleColumn) = value
            End Set
        End Property
        
        Public Property Permission As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.PermissionColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.PermissionColumn) = value
            End Set
        End Property
        
        Public Property Role As String
            Get
                Return CType(Me(Me.tableZBP_GET_SECURITY_4_MODULES.RoleColumn),String)
            End Get
            Set
                Me(Me.tableZBP_GET_SECURITY_4_MODULES.RoleColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ZBP_GET_SECURITY_4_MODULESRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ZBP_GET_SECURITY_4_MODULESRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ZBP_GET_SECURITY_4_MODULESRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ZBP_GET_SECURITY_4_MODULESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNAME As DataColumn
        
        Private column_Module As DataColumn
        
        Private columnPermission As DataColumn
        
        Private columnRole As DataColumn
        
        Friend Sub New()
            MyBase.New("Table1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property _ModuleColumn As DataColumn
            Get
                Return Me.column_Module
            End Get
        End Property
        
        Friend ReadOnly Property PermissionColumn As DataColumn
            Get
                Return Me.columnPermission
            End Get
        End Property
        
        Friend ReadOnly Property RoleColumn As DataColumn
            Get
                Return Me.columnRole
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table1Row
            Get
                Return CType(Me.Rows(index),Table1Row)
            End Get
        End Property
        
        Public Event Table1RowChanged As Table1RowChangeEventHandler
        
        Public Event Table1RowChanging As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleted As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleting As Table1RowChangeEventHandler
        
        Public Overloads Sub AddTable1Row(ByVal row As Table1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable1Row(ByVal NAME As String, ByVal _Module As String, ByVal Permission As String, ByVal Role As String) As Table1Row
            Dim rowTable1Row As Table1Row = CType(Me.NewRow,Table1Row)
            rowTable1Row.ItemArray = New Object() {NAME, _Module, Permission, Role}
            Me.Rows.Add(rowTable1Row)
            Return rowTable1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Table1DataTable = CType(MyBase.Clone,Table1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Table1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNAME = Me.Columns("NAME")
            Me.column_Module = Me.Columns("Module")
            Me.columnPermission = Me.Columns("Permission")
            Me.columnRole = Me.Columns("Role")
        End Sub
        
        Private Sub InitClass()
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.column_Module = New DataColumn("Module", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Module)
            Me.columnPermission = New DataColumn("Permission", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermission)
            Me.columnRole = New DataColumn("Role", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRole)
            Me.columnNAME.ReadOnly = true
            Me.column_Module.AllowDBNull = false
            Me.columnPermission.AllowDBNull = false
            Me.columnRole.AllowDBNull = false
        End Sub
        
        Public Function NewTable1Row() As Table1Row
            Return CType(Me.NewRow,Table1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Table1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table1RowChangedEvent) Is Nothing) Then
                RaiseEvent Table1RowChanged(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table1RowChangingEvent) Is Nothing) Then
                RaiseEvent Table1RowChanging(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleted(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleting(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable1Row(ByVal row As Table1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1Row
        Inherits DataRow
        
        Private tableTable1 As Table1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable1 = CType(Me.Table,Table1DataTable)
        End Sub
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableTable1.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.NAMEColumn) = value
            End Set
        End Property
        
        Public Property _Module As String
            Get
                Return CType(Me(Me.tableTable1._ModuleColumn),String)
            End Get
            Set
                Me(Me.tableTable1._ModuleColumn) = value
            End Set
        End Property
        
        Public Property Permission As String
            Get
                Return CType(Me(Me.tableTable1.PermissionColumn),String)
            End Get
            Set
                Me(Me.tableTable1.PermissionColumn) = value
            End Set
        End Property
        
        Public Property Role As String
            Get
                Return CType(Me(Me.tableTable1.RoleColumn),String)
            End Get
            Set
                Me(Me.tableTable1.RoleColumn) = value
            End Set
        End Property
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableTable1.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableTable1.NAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Table1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Table1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Table1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Table1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
