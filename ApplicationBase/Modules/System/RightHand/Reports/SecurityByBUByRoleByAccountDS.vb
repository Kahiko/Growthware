'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On 

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.Diagnostics.DebuggerStepThrough(), _
 System.ComponentModel.ToolboxItem(True)> _
Public Class SecurityByBUByRoleByAccountDS
	Inherits DataSet

	Private tableZBP_SECURITY_INFO As ZBP_SECURITY_INFODataTable

	Public Sub New()
		MyBase.New()
		Me.InitClass()
		Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
		AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
		AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
	End Sub

	Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
		MyBase.New()
		Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
		If (Not (strSchema) Is Nothing) Then
			Dim ds As DataSet = New DataSet
			ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
			If (Not (ds.Tables("ZBP_SECURITY_INFO")) Is Nothing) Then
				Me.Tables.Add(New ZBP_SECURITY_INFODataTable(ds.Tables("ZBP_SECURITY_INFO")))
			End If
			Me.DataSetName = ds.DataSetName
			Me.Prefix = ds.Prefix
			Me.Namespace = ds.Namespace
			Me.Locale = ds.Locale
			Me.CaseSensitive = ds.CaseSensitive
			Me.EnforceConstraints = ds.EnforceConstraints
			Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
			Me.InitVars()
		Else
			Me.InitClass()
		End If
		Me.GetSerializationData(info, context)
		Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
		AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
		AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
	End Sub

	<System.ComponentModel.Browsable(False), _
	 System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
	Public ReadOnly Property ZBP_SECURITY_INFO() As ZBP_SECURITY_INFODataTable
		Get
			Return Me.tableZBP_SECURITY_INFO
		End Get
	End Property

	Public Overrides Function Clone() As DataSet
		Dim cln As SecurityByBUByRoleByAccountDS = CType(MyBase.Clone, SecurityByBUByRoleByAccountDS)
		cln.InitVars()
		Return cln
	End Function

	Protected Overrides Function ShouldSerializeTables() As Boolean
		Return False
	End Function

	Protected Overrides Function ShouldSerializeRelations() As Boolean
		Return False
	End Function

	Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
		Me.Reset()
		Dim ds As DataSet = New DataSet
		ds.ReadXml(reader)
		If (Not (ds.Tables("ZBP_SECURITY_INFO")) Is Nothing) Then
			Me.Tables.Add(New ZBP_SECURITY_INFODataTable(ds.Tables("ZBP_SECURITY_INFO")))
		End If
		Me.DataSetName = ds.DataSetName
		Me.Prefix = ds.Prefix
		Me.Namespace = ds.Namespace
		Me.Locale = ds.Locale
		Me.CaseSensitive = ds.CaseSensitive
		Me.EnforceConstraints = ds.EnforceConstraints
		Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
		Me.InitVars()
	End Sub

	Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
		Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
		Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
		stream.Position = 0
		Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
	End Function

	Friend Sub InitVars()
		Me.tableZBP_SECURITY_INFO = CType(Me.Tables("ZBP_SECURITY_INFO"), ZBP_SECURITY_INFODataTable)
		If (Not (Me.tableZBP_SECURITY_INFO) Is Nothing) Then
			Me.tableZBP_SECURITY_INFO.InitVars()
		End If
	End Sub

	Private Sub InitClass()
		Me.DataSetName = "SecurityByBUByRoleByAccountDS"
		Me.Prefix = ""
		Me.Namespace = "http://tempuri.org/SecurityByBUByRoleByAccountDS.xsd"
		Me.Locale = New System.Globalization.CultureInfo("en-US")
		Me.CaseSensitive = False
		Me.EnforceConstraints = True
		Me.tableZBP_SECURITY_INFO = New ZBP_SECURITY_INFODataTable
		Me.Tables.Add(Me.tableZBP_SECURITY_INFO)
	End Sub

	Private Function ShouldSerializeZBP_SECURITY_INFO() As Boolean
		Return False
	End Function

	Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
		If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
			Me.InitVars()
		End If
	End Sub

	Public Delegate Sub ZBP_SECURITY_INFORowChangeEventHandler(ByVal sender As Object, ByVal e As ZBP_SECURITY_INFORowChangeEvent)

	<System.Diagnostics.DebuggerStepThrough()> _
	Public Class ZBP_SECURITY_INFODataTable
		Inherits DataTable
		Implements System.Collections.IEnumerable

		Private columnNAME As DataColumn

		Private columnACCOUNT As DataColumn

		Private columnROLE_NAME As DataColumn

		Friend Sub New()
			MyBase.New("ZBP_SECURITY_INFO")
			Me.InitClass()
		End Sub

		Friend Sub New(ByVal table As DataTable)
			MyBase.New(table.TableName)
			If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
				Me.CaseSensitive = table.CaseSensitive
			End If
			If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
				Me.Locale = table.Locale
			End If
			If (table.Namespace <> table.DataSet.Namespace) Then
				Me.Namespace = table.Namespace
			End If
			Me.Prefix = table.Prefix
			Me.MinimumCapacity = table.MinimumCapacity
			Me.DisplayExpression = table.DisplayExpression
		End Sub

		<System.ComponentModel.Browsable(False)> _
		Public ReadOnly Property Count() As Integer
			Get
				Return Me.Rows.Count
			End Get
		End Property

		Friend ReadOnly Property NAMEColumn() As DataColumn
			Get
				Return Me.columnNAME
			End Get
		End Property

		Friend ReadOnly Property ACCOUNTColumn() As DataColumn
			Get
				Return Me.columnACCOUNT
			End Get
		End Property

		Friend ReadOnly Property ROLE_NAMEColumn() As DataColumn
			Get
				Return Me.columnROLE_NAME
			End Get
		End Property

		Default Public ReadOnly Property Item(ByVal index As Integer) As ZBP_SECURITY_INFORow
			Get
				Return CType(Me.Rows(index), ZBP_SECURITY_INFORow)
			End Get
		End Property

		Public Event ZBP_SECURITY_INFORowChanged As ZBP_SECURITY_INFORowChangeEventHandler

		Public Event ZBP_SECURITY_INFORowChanging As ZBP_SECURITY_INFORowChangeEventHandler

		Public Event ZBP_SECURITY_INFORowDeleted As ZBP_SECURITY_INFORowChangeEventHandler

		Public Event ZBP_SECURITY_INFORowDeleting As ZBP_SECURITY_INFORowChangeEventHandler

		Public Overloads Sub AddZBP_SECURITY_INFORow(ByVal row As ZBP_SECURITY_INFORow)
			Me.Rows.Add(row)
		End Sub

		Public Overloads Function AddZBP_SECURITY_INFORow(ByVal NAME As String, ByVal ACCOUNT As String, ByVal ROLE_NAME As String) As ZBP_SECURITY_INFORow
			Dim rowZBP_SECURITY_INFORow As ZBP_SECURITY_INFORow = CType(Me.NewRow, ZBP_SECURITY_INFORow)
			rowZBP_SECURITY_INFORow.ItemArray = New Object() {NAME, ACCOUNT, ROLE_NAME}
			Me.Rows.Add(rowZBP_SECURITY_INFORow)
			Return rowZBP_SECURITY_INFORow
		End Function

		Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
			Return Me.Rows.GetEnumerator
		End Function

		Public Overrides Function Clone() As DataTable
			Dim cln As ZBP_SECURITY_INFODataTable = CType(MyBase.Clone, ZBP_SECURITY_INFODataTable)
			cln.InitVars()
			Return cln
		End Function

		Protected Overrides Function CreateInstance() As DataTable
			Return New ZBP_SECURITY_INFODataTable
		End Function

		Friend Sub InitVars()
			Me.columnNAME = Me.Columns("NAME")
			Me.columnACCOUNT = Me.Columns("ACCOUNT")
			Me.columnROLE_NAME = Me.Columns("ROLE_NAME")
		End Sub

		Private Sub InitClass()
			Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
			Me.Columns.Add(Me.columnNAME)
			Me.columnACCOUNT = New DataColumn("ACCOUNT", GetType(System.String), Nothing, System.Data.MappingType.Element)
			Me.Columns.Add(Me.columnACCOUNT)
			Me.columnROLE_NAME = New DataColumn("ROLE_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
			Me.Columns.Add(Me.columnROLE_NAME)
			Me.columnNAME.AllowDBNull = False
			Me.columnACCOUNT.AllowDBNull = False
			Me.columnROLE_NAME.AllowDBNull = False
		End Sub

		Public Function NewZBP_SECURITY_INFORow() As ZBP_SECURITY_INFORow
			Return CType(Me.NewRow, ZBP_SECURITY_INFORow)
		End Function

		Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
			Return New ZBP_SECURITY_INFORow(builder)
		End Function

		Protected Overrides Function GetRowType() As System.Type
			Return GetType(ZBP_SECURITY_INFORow)
		End Function

		Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
			MyBase.OnRowChanged(e)
			If (Not (Me.ZBP_SECURITY_INFORowChangedEvent) Is Nothing) Then
				RaiseEvent ZBP_SECURITY_INFORowChanged(Me, New ZBP_SECURITY_INFORowChangeEvent(CType(e.Row, ZBP_SECURITY_INFORow), e.Action))
			End If
		End Sub

		Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
			MyBase.OnRowChanging(e)
			If (Not (Me.ZBP_SECURITY_INFORowChangingEvent) Is Nothing) Then
				RaiseEvent ZBP_SECURITY_INFORowChanging(Me, New ZBP_SECURITY_INFORowChangeEvent(CType(e.Row, ZBP_SECURITY_INFORow), e.Action))
			End If
		End Sub

		Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
			MyBase.OnRowDeleted(e)
			If (Not (Me.ZBP_SECURITY_INFORowDeletedEvent) Is Nothing) Then
				RaiseEvent ZBP_SECURITY_INFORowDeleted(Me, New ZBP_SECURITY_INFORowChangeEvent(CType(e.Row, ZBP_SECURITY_INFORow), e.Action))
			End If
		End Sub

		Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
			MyBase.OnRowDeleting(e)
			If (Not (Me.ZBP_SECURITY_INFORowDeletingEvent) Is Nothing) Then
				RaiseEvent ZBP_SECURITY_INFORowDeleting(Me, New ZBP_SECURITY_INFORowChangeEvent(CType(e.Row, ZBP_SECURITY_INFORow), e.Action))
			End If
		End Sub

		Public Sub RemoveZBP_SECURITY_INFORow(ByVal row As ZBP_SECURITY_INFORow)
			Me.Rows.Remove(row)
		End Sub
	End Class

	<System.Diagnostics.DebuggerStepThrough()> _
	Public Class ZBP_SECURITY_INFORow
		Inherits DataRow

		Private tableZBP_SECURITY_INFO As ZBP_SECURITY_INFODataTable

		Friend Sub New(ByVal rb As DataRowBuilder)
			MyBase.New(rb)
			Me.tableZBP_SECURITY_INFO = CType(Me.Table, ZBP_SECURITY_INFODataTable)
		End Sub

		Public Property NAME() As String
			Get
				Return CType(Me(Me.tableZBP_SECURITY_INFO.NAMEColumn), String)
			End Get
			Set(ByVal Value As String)
				Me(Me.tableZBP_SECURITY_INFO.NAMEColumn) = value
			End Set
		End Property

		Public Property ACCOUNT() As String
			Get
				Return CType(Me(Me.tableZBP_SECURITY_INFO.ACCOUNTColumn), String)
			End Get
			Set(ByVal Value As String)
				Me(Me.tableZBP_SECURITY_INFO.ACCOUNTColumn) = value
			End Set
		End Property

		Public Property ROLE_NAME() As String
			Get
				Return CType(Me(Me.tableZBP_SECURITY_INFO.ROLE_NAMEColumn), String)
			End Get
			Set(ByVal Value As String)
				Me(Me.tableZBP_SECURITY_INFO.ROLE_NAMEColumn) = value
			End Set
		End Property
	End Class

	<System.Diagnostics.DebuggerStepThrough()> _
	Public Class ZBP_SECURITY_INFORowChangeEvent
		Inherits EventArgs

		Private eventRow As ZBP_SECURITY_INFORow

		Private eventAction As DataRowAction

		Public Sub New(ByVal row As ZBP_SECURITY_INFORow, ByVal action As DataRowAction)
			MyBase.New()
			Me.eventRow = row
			Me.eventAction = action
		End Sub

		Public ReadOnly Property Row() As ZBP_SECURITY_INFORow
			Get
				Return Me.eventRow
			End Get
		End Property

		Public ReadOnly Property Action() As DataRowAction
			Get
				Return Me.eventAction
			End Get
		End Property
	End Class
End Class